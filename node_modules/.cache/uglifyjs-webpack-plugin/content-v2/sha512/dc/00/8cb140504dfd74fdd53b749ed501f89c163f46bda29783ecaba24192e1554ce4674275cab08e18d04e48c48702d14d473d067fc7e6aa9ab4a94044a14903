{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{168:function(e,t,r){\"use strict\";r.r(t);var n=r(0),a=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"div\",{staticClass:\"content\"},[e._m(0),e._v(\" \"),e._m(1),e._v(\" \"),e._m(2),e._v(\" \"),e._m(3),e._v(\" \"),e._m(4),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"codepen:\")]),r(\"a\",{attrs:{href:\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仿Vue极简双向绑定\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"Github:\")]),r(\"a\",{attrs:{href:\"http://obkoro1.com/simpleDemo/simpleDemo/myVue/index.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仿Vue极简双向绑定\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(5),e._v(\" \"),e._m(6),e._v(\" \"),e._m(7),e._v(\" \"),e._m(8),e._v(\" \"),e._m(9),e._v(\" \"),r(\"p\",[e._v(\"对，这里有个\"),r(\"a\",{attrs:{href:\"https://codepen.io/OBKoro1/pen/XYYMMp?editors=0010\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"demo\"),r(\"OutboundLink\")],1),e._v(\"。\")]),e._v(\" \"),e._m(10),e._v(\" \"),e._m(11),e._v(\" \"),e._m(12),e._v(\" \"),r(\"p\",[e._v(\"更详细的可以看一下\"),r(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"MDN\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(13),e._v(\" \"),e._m(14),e._v(\" \"),e._m(15),e._v(\" \"),e._m(16),e._v(\" \"),e._m(17),e._v(\" \"),r(\"p\",[e._v(\"这部分讲的很清楚，现在有点懵逼也没关系，看完代码，自己copy下来玩一玩之后，回头再看实现思路，相信会有收获的。\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(18),e._v(\" \"),e._m(19),e._v(\" \"),r(\"pre\",[r(\"code\",[e._v('<div id=\"app\">\\n    <input type=\"text\" v-model=\"name\">\\n    <h3 v-bind=\"name\"></h3>\\n    <input type=\"text\" v-model=\"testData1\">\\n    <h3>'+e._s(e.testData1)+'</h3>\\n    <input type=\"text\" v-model=\"testData2\">\\n    <h3>'+e._s(e.testData2)+\"</h3>\\n</div>\\n\")])]),e._v(\" \"),r(\"p\",[e._v(\"看到这个模板，相信用过Vue的同学都不会陌生。\")]),e._v(\" \"),e._m(20),e._v(\" \"),r(\"p\",[e._v(\"采用类Vue方式来使用双向绑定：\")]),e._v(\" \"),e._m(21),e._v(\" \"),e._m(22),e._v(\" \"),e._m(23),e._v(\" \"),e._m(24),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(25),e._v(\" \"),e._m(26),e._v(\" \"),r(\"p\",[e._v(\"像实现思路中所说的，这里起到了连接Observer和Compile的作用：\")]),e._v(\" \"),e._m(27),e._v(\" \"),r(\"p\",[e._v(\"没有看错，代码量就这么多，可能需要把整个代码连接起来，多看几遍才能够理解。\")]),e._v(\" \"),e._m(28),e._v(\" \"),e._m(29),e._v(\" \"),r(\"p\",[e._v(\"然后在给对象的某个属性赋值的时候，就会触发set。\")]),e._v(\" \"),e._m(30),e._v(\" \"),e._m(31),e._v(\" \"),e._m(32),e._v(\" \"),r(\"p\",[e._v(\"这里是实现思路中的第三步，让我们来总结一下这里做了哪些事情：\")]),e._v(\" \"),e._m(33),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(34),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/myVue/index.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"GitHub完整代码\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"codepen:\")]),r(\"a\",{attrs:{href:\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仿Vue极简双向绑定\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[r(\"strong\",[e._v(\"Github:\")]),r(\"a\",{attrs:{href:\"http://obkoro1.com/web_accumulate/example/myVue/index.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仿Vue极简双向绑定\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[e._v(\"如果觉得还不错的话，就给个\"),r(\"a\",{attrs:{href:\"https://github.com/OBKoro1/simpleDemo\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Star\"),r(\"OutboundLink\")],1),e._v(\"⭐️鼓励一下我吧~\")]),e._v(\" \"),r(\"hr\"),e._v(\" \"),e._m(35),e._v(\" \"),e._m(36),e._v(\" \"),r(\"p\",[e._v(\"以上2018.6.24\")]),e._v(\" \"),e._m(37),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000006599500\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"剖析Vue原理&实现双向绑定MVVM\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://juejin.im/post/5acc17cb51882555745a03f8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"面试题：你能写一个Vue的双向数据绑定吗？\"),r(\"OutboundLink\")],1)]),e._v(\" \"),r(\"p\",[r(\"a\",{attrs:{href:\"https://juejin.im/post/5abdd6f6f265da23793c4458#heading-8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"不好意思！耽误你的十分钟，让MVVM原理还给你\"),r(\"OutboundLink\")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"仿vue极简双向绑定\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#仿vue极简双向绑定\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 仿Vue极简双向绑定\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，\"),t(\"strong\",[this._v(\"接下来本文用160行代码带你实现一个极简的双向绑定机制\")]),this._v(\"。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"效果gif：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#效果gif：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 效果GIF：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[t(\"img\",{attrs:{src:\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl70vrkj3g30aw09iq3y.gif\",alt:\"\"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"demo地址：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#demo地址：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" demo地址：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"了解object-defineproperty-：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#了解object-defineproperty-：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 了解Object.defineProperty()：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"这个API是实现双向绑定的核心，最主要的作用是重写数据的\"),t(\"code\",[this._v(\"get\")]),this._v(\"、\"),t(\"code\",[this._v(\"set\")]),this._v(\"方法，现在的三大框架(vue react angular)也都是通过这个API来实现双向绑定的。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"使用方式：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方式：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 使用方式：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"pre\",[t(\"code\",[this._v('    let obj = {\\n      singer: \"周杰伦\"\\n    };\\n    let value = \"青花瓷\";\\n    Object.defineProperty(obj, \"music\", {\\n      // value: \\'七里香\\', // 设置属性的值 下面设置了get set函数 所以这里不能设置\\n      configurable: false, // 是否可以删除属性 默认不能删除\\n      // writable: true,  // 是否可以修改对象 下面设置了get set函数 所以这里不能设置\\n      enumerable: true, // music是否可以被枚举 默认是不能被枚举(遍历)\\n      // ☆ get,set设置时不能设置writable和value，要一对一对设置，交叉设置/同时存在 就会报错\\n      get() {\\n        // 获取obj.music的时候就会调用get方法\\n        // let value = \"强行设置get的返回值\"; // 打开注释 读取属性永远都是‘强行设置get的返回值’\\n        return value;\\n      },\\n      set(val) {\\n        // 将修改的值重新赋给song\\n        value = val;\\n      }\\n    });\\n    console.log(obj.music); // 青花瓷\\n    delete obj.music; // configurable设为false 删除无效\\n    console.log(obj.music); // 青花瓷\\n    obj.music = \"听妈妈的话\"; \\n    console.log(obj.music); // 听妈妈的话\\n    for (let key in obj) {\\n      // 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的\\n      // 需要设置enumerable为true才可以 否则只能拿到singer 属性\\n      console.log(key); // singer, music\\n    }\\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"示例demo：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#示例demo：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 示例demo：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"画一下重点：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#画一下重点：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 画一下重点：\")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ul\",[r(\"li\",[e._v(\"get,set设置时不能设置writable和value, 他们是一对情侣的存在，\"),r(\"strong\",[e._v(\"交叉设置或同时存在,会报错\")])]),e._v(\" \"),r(\"li\",[e._v(\"通过\"),r(\"code\",[e._v(\"defineProperty\")]),e._v(\"设置的属性，\"),r(\"strong\",[e._v(\"默认不能删除，不能遍历\")]),e._v(\"，当然你可以通过设置更改他们。\")]),e._v(\" \"),r(\"li\",[r(\"strong\",[e._v(\"get、set 是函数，可以做的事情很多\")]),e._v(\"。\")])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[t(\"strong\",[this._v(\"兼容性\")]),this._v(\"：IE 9,Firefox 4, Chorme 5,Opera 11.6,Safari 5.1\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"实现思路：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现思路：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 实现思路：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"mvvm系列的双向绑定，关键步骤：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mvvm系列的双向绑定，关键步骤：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" mvvm系列的双向绑定，关键步骤：\")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ol\",[r(\"li\",[e._v(\"实现数据监听器Observer，用\"),r(\"code\",[e._v(\"Object.defineProperty()\")]),r(\"strong\",[e._v(\"重写数据的get、set，值更新就在set中通知订阅者更新数据\")]),e._v(\"。\")]),e._v(\" \"),r(\"li\",[e._v(\"实现模板编译Compile，深度遍历dom树，对每个元素节点的指令模板进行\"),r(\"strong\",[e._v(\"替换数据以及订阅数据\")]),e._v(\"。\")]),e._v(\" \"),r(\"li\",[e._v(\"实现Watch用于连接Observer和Compile，\"),r(\"strong\",[e._v(\"能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图\")]),e._v(\"。\")]),e._v(\" \"),r(\"li\",[e._v(\"mvvm入口函数，整合以上三者。\")])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"流程图：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#流程图：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 流程图：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[t(\"img\",{attrs:{src:\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl7dygfovj30ka0augpd.jpg\",alt:\"\"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"具体代码实现：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#具体代码实现：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 具体代码实现：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"html结构：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#html结构：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" html结构：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"调用方法：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#调用方法：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 调用方法：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"pre\",[t(\"code\",[this._v(\" window.onload = function () {\\n    var app = new myVue({\\n        el: '#app', // dom\\n        data: { // 数据\\n            testData1: '仿Vue',\\n            testData2: '极简双向绑定',\\n            name: 'OBKoro1'\\n        }\\n    })\\n}\\n\")])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"创建myvue函数：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建myvue函数：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 创建myVue函数：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"实际上这里是我们实现思路中的第四步，用于整合数据监听器\"),t(\"code\",[this._v(\"this._observer()\")]),this._v(\"、指令解析器\"),t(\"code\",[this._v(\"this._compile()\")]),this._v(\"以及连接Observer和Compile的_watcherTpl的watch池。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"pre\",[t(\"code\",[this._v(\"    function myVue(options = {}) {  // 防止没传，设一个默认值\\n        this.$options = options; // 配置挂载\\n        this.$el = document.querySelector(options.el); // 获取dom\\n        this._data = options.data; // 数据挂载\\n        this._watcherTpl = {}; // watcher池\\n        this._observer(this._data); // 传入数据，执行函数，重写数据的get set\\n        this._compile(this.$el); // 传入dom，执行函数，编译模板 发布订阅\\n    };\\n\")])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"watcher函数\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#watcher函数\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Watcher函数:\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"这是实现思路中的第三步，因为下方数据监听器\"),t(\"code\",[this._v(\"_observer()\")]),this._v(\"需要用到Watcher函数，所以这里就先讲了。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"ol\",[t(\"li\",[t(\"p\",[t(\"strong\",[this._v(\"在模板编译_compile()阶段发布订阅\")])])]),this._v(\" \"),t(\"li\",[t(\"p\",[t(\"strong\",[this._v(\"在赋值操作的时候，更新视图\")])]),this._v(\" \"),t(\"pre\",[t(\"code\",[this._v(\" // new Watcher() 为this._compile()发布订阅+ 在this._observer()中set(赋值)的时候更新视图\\n function Watcher(el, vm, val, attr) {\\n     this.el = el; // 指令对应的DOM元素\\n     this.vm = vm; // myVue实例\\n     this.val = val; // 指令对应的值 \\n     this.attr = attr; // dom获取值，如value获取input的值 / innerHTML获取dom的值\\n     this.update(); // 更新视图\\n }\\n Watcher.prototype.update = function () { \\n     this.el[this.attr] = this.vm._data[this.val]; // 获取data的最新值 赋值给dom 更新视图\\n }\\n\")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"实现数据监听器-observer-：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现数据监听器-observer-：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 实现数据监听器_observer()：\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"实现思路中的第一步，用\"),t(\"code\",[this._v(\"Object.defineProperty()\")]),this._v(\"遍历data重写所有属性的get set。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[t(\"strong\",[this._v(\"在set中我们可以监听到数据的变化，然后就可以触发watch更新视图\")]),this._v(\"。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"pre\",[t(\"code\",[this._v(\" myVue.prototype._observer = function (obj) {\\n        var _this = this;\\n        Object.keys(obj).forEach(key => { // 遍历数据\\n            _this._watcherTpl[key] = { // 每个数据的订阅池()\\n                _directives: []\\n            };\\n            var value = obj[key]; // 获取属性值\\n            var watcherTpl = _this._watcherTpl[key]; // 数据的订阅池\\n            Object.defineProperty(_this._data, key, { // 双向绑定最重要的部分 重写数据的set get\\n                configurable: true,  // 可以删除\\n                enumerable: true, // 可以遍历\\n                get() {\\n                    console.log(`${key}获取值：${value}`);\\n                    return value; // 获取值的时候 直接返回\\n                },\\n                set(newVal) { // 改变值的时候 触发set\\n                    console.log(`${key}更新：${newVal}`);\\n                    if (value !== newVal) {\\n                        value = newVal;\\n                        watcherTpl._directives.forEach((item) => { // 遍历订阅池 \\n                            item.update();\\n                            // 遍历所有订阅的地方(v-model+v-bind+{{}}) 触发this._compile()中发布的订阅Watcher 更新视图  \\n                        });\\n                    }\\n                }\\n            })\\n        });\\n    }\\n\")])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"实现compile-模板编译\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现compile-模板编译\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 实现Compile 模板编译\")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"ul\",[r(\"li\",[r(\"p\",[e._v(\"首先是深度遍历dom树，遍历每个节点以及子节点。\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"将模板中的变量替换成数据，初始化渲染页面视图。\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"把指令绑定的属性添加到对应的订阅池中\")])]),e._v(\" \"),r(\"li\",[r(\"p\",[e._v(\"一旦数据有变动，收到通知，更新视图。\")]),e._v(\" \"),r(\"pre\",[r(\"code\",[e._v(\"  myVue.prototype._compile = function (el) {\\n      var _this = this, nodes = el.children; // 获取app的dom\\n      for (var i = 0, len = nodes.length; i < len; i++) { // 遍历dom节点\\n          var node = nodes[i];\\n          if (node.children.length) {\\n              _this._compile(node);  // 递归深度遍历 dom树\\n          }\\n          // 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件    \\n          if (node.hasAttribute('v-model') && (node.tagName = 'INPUT' || node.tagName == 'TEXTAREA')) {\\n              node.addEventListener('input', (function (key) {\\n                  var attVal = node.getAttribute('v-model'); // 获取v-model绑定的值\\n                  _this._watcherTpl[attVal]._directives.push(new Watcher( // 将dom替换成属性的数据并发布订阅 在set的时候更新数据\\n                      node,\\n                      _this,\\n                      attVal,\\n                      'value'\\n                  ));\\n                  return function () {\\n                      _this._data[attVal] = nodes[key].value;  // input值改变的时候 将新值赋给数据 触发set=>set触发watch 更新视图\\n                  }\\n              })(i));\\n          }\\n          if (node.hasAttribute('v-bind')) { // v-bind指令 \\n              var attrVal = node.getAttribute('v-bind'); // 绑定的data\\n              _this._watcherTpl[attrVal]._directives.push(new Watcher( // 将dom替换成属性的数据并发布订阅 在set的时候更新数据\\n                  node,\\n                  _this,\\n                  attrVal,\\n                  'innerHTML'\\n              ))\\n          }\\n          var reg = /\\\\{\\\\{\\\\s*([^}]+\\\\S)\\\\s*\\\\}\\\\}/g, txt = node.textContent;   // 正则匹配{{}}\\n          if (reg.test(txt)) {\\n              node.textContent = txt.replace(reg, (matched, placeholder) => {\\n                   // matched匹配的文本节点包括双花括号, placeholder 是双花括号中间的属性名\\n                  var getName = _this._watcherTpl; // 所有绑定watch的数据\\n                  getName = getName[placeholder];  // 获取对应watch 数据的值\\n                  if (!getName._directives) { // 没有事件池 创建事件池\\n                      getName._directives = [];\\n                  }\\n                  getName._directives.push(new Watcher( // 将dom替换成属性的数据并发布订阅 在set的时候更新数据\\n                      node,\\n                      _this,\\n                      placeholder,\\n                      'innerHTML'\\n                  ));\\n                  return placeholder.split('.').reduce((val, key) => {\\n                      return _this._data[key]; // 获取数据的值 触发get 返回当前值 \\n                  }, _this.$el);\\n              });\\n          }\\n      }\\n  }\\n\")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"完整代码-demo地址\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#完整代码-demo地址\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 完整代码&demo地址\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h2\",{attrs:{id:\"小结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 小结\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"p\",[this._v(\"本文只是一个简单的实现双向绑定的方法，主要目的是帮助各位同学理解mvvm框架的双向绑定机制，也并没有很完善，这里还是有很多缺陷，比如：没有实现数据的深度对数据进行\"),t(\"code\",[this._v(\"get\")]),this._v(\"、\"),t(\"code\",[this._v(\"set\")]),this._v(\"等。希望看完本文，大家能有所收获。\")])},function(){var e=this.$createElement,t=this._self._c||e;return t(\"h3\",{attrs:{id:\"参考资料：\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考资料：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 参考资料：\")])}],!1,null,null,null);a.options.__file=\"极简双向绑定.md\";t.default=a.exports}}]);","extractedComments":[]}