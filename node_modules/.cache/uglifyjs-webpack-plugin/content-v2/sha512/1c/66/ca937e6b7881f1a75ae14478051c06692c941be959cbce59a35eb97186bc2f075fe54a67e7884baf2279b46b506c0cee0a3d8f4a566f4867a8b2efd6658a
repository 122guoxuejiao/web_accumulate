{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{167:function(t,n,e){\"use strict\";e.r(n);var r=e(0),a=Object(r.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"div\",{staticClass:\"content\"},[t._m(0),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),e(\"p\",[t._v(\"前2个数是 0 和 1 。\")]),t._v(\" \"),e(\"p\",[t._v(\"第 i 个数是第 i-1 个数和第i-2 个数的和。\")]),t._v(\" \"),t._m(3),t._v(\" \"),t._m(4),t._v(\" \"),t._m(5),t._v(\" \"),e(\"p\",[t._v(\"给定 1，返回 0\")]),t._v(\" \"),e(\"p\",[t._v(\"给定 2，返回 1\")]),t._v(\" \"),e(\"p\",[t._v(\"给定 10，返回 34\")]),t._v(\" \"),t._m(6),t._v(\" \"),e(\"p\",[t._v(\"值得注意的是：前两个数字可以算成是起始元素，从第三个元素才开始有规则。\")]),t._v(\" \"),t._m(7),t._v(\" \"),t._m(8),t._v(\" \"),e(\"p\",[t._v(\"不行，我一定要秀一波，不然心里难受：\")]),t._v(\" \"),t._m(9),t._v(\" \"),e(\"p\",[t._v(\"最后一题的提交，甩的第二名看不到我的车尾灯，开心！\")]),t._v(\" \"),e(\"p\",[t._v(\"第一回刷算法题，以后要继续坚持！\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"代码地址\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码地址\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" \"),e(\"a\",{attrs:{href:\"https://github.com/OBKoro1/Brush_algorithm/blob/master/codeSource/FibonacciSequence.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"代码地址\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"p\",[t._v(\"2018.8.5\")])])},[function(){var t=this.$createElement,n=this._self._c||t;return n(\"h2\",{attrs:{id:\"查找斐波纳契数列中第-n-个数。\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查找斐波纳契数列中第-n-个数。\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 查找斐波纳契数列中第 N 个数。\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"h3\",{attrs:{id:\"描述\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#描述\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 描述\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"p\",[n(\"strong\",[this._v(\"所谓的斐波纳契数列是指\")]),this._v(\"：\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"p\",[n(\"strong\",[this._v(\"斐波纳契数列的前10个数字是\")]),this._v(\"：\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"pre\",[n(\"code\",[this._v(\"0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...\\n\")])])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"h3\",{attrs:{id:\"怎样算解成功：\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#怎样算解成功：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 怎样算解成功：\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"h3\",{attrs:{id:\"题目分析：\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#题目分析：\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 题目分析：\")])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"h3\",{attrs:{id:\"code\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#code\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" code:\")])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"ol\",[e(\"li\",[e(\"p\",[t._v(\"递归解法：\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\" const fibonacci = (n) => {\\n     if (!(typeof n === 'number' && n % 1 === 0 && n > 1)) {\\n         throw '请输入大于0的整数数字';\\n     }\\n     var array = [0, 0, 1];\\n     let temp = (n) => {\\n         if (n == 1 || n == 2) return array[n];\\n         array[n] = temp(n - 1) + temp(n - 2); // 递归获取推算数组每一个元素的值\\n         return array[n];\\n     }\\n     let num = temp(n);\\n     array.splice(2, 1); // 将数组恢复成 斐波纳契数列\\n     return num;\\n }\\n\")])])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"遍历保存结果\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\" const fibonacci = (n) => {\\n     let a = 0, b = 1, c, d = [0];\\n     for (let i = 1; i < n; i++) {\\n         c = a + b;\\n         a = b;\\n         b = c;\\n         d.push(a); // 加戏 恢复数列\\n     }\\n     console.log(d, '斐波纳契数列')\\n     return a\\n }\\n\")])])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"一次遍历 逐步推导所有元素 时间消耗:158ms 最优\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\" const fibonacci = (n) => {\\n     let num = new Array(n).fill(0); // 初始化数组，并设置初始值\\n     num[1] = 1; // 设置第二个元素的值 推导第3个元素\\n     for (let i = 2; i <= n - 1; i++) {\\n         num[i] = num[i - 2] + num[i - 1]; // 遍历逐步推导元素值 数组完全符合数列不用进行判断等 运行效率最高。\\n     }\\n     return num[n - 1]; // 数组是从0开始计算 所以要减1\\n }\\n\")])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/8/5/1650894f0e88c323?w=3002&h=1766&f=jpeg&s=383340\",alt:\"\"}})])}],!1,null,null,null);a.options.__file=\"查找斐波纳契数列中第N个数.md\";n.default=a.exports}}]);","extractedComments":[]}