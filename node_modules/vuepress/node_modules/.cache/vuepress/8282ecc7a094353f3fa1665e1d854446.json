{"remainingRequest":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/obkoro1/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/obkoro1/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/obkoro1/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/obkoro1/work/web_my/web_accumulate/docs/accumulate/JS/函数防抖和函数节流.md?vue&type=template&id=55494944&","dependencies":[{"path":"/Users/obkoro1/work/web_my/web_accumulate/docs/accumulate/JS/函数防抖和函数节流.md","mtime":1546429257054},{"path":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/obkoro1/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"防抖函数-节流函数\\\"><a href=\\\"#防抖函数-节流函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数&amp;节流函数</h1> <p>节流函数和防抖函数是 JS 比较重要的概念，应用好了可以提高很大的性能，在面试中也是很高频的一个考点。下面一起来看看这两种方法是如何使用的：</p> <h2 id=\\\"防抖函数-debounce\\\"><a href=\\\"#防抖函数-debounce\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数(debounce):</h2> <h3 id=\\\"概念：\\\"><a href=\\\"#概念：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时</strong>。</p> <h3 id=\\\"生活中的栗子：\\\"><a href=\\\"#生活中的栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>如果有人进电梯（触发事件），那电梯将在 10 秒钟后出发（执行事件），这时如果又有人进电梯了（在 10 秒内再次触发该事件），我们又得等 10 秒再出发（重新计时）。</p> <h3 id=\\\"代码栗子：\\\"><a href=\\\"#代码栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 防抖函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果有一个函数在等待执行 清除定时器 下面重新计时</span>\\n      <span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// wait时间后(期间不能再触发debounce) 执行回调</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次在1500ms后触发，之后每1000ms触发一次</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 还没执行就一直重复触发,不会执行</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br></div></div><div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">可以这样理解</p> <p>函数触发停止一段时间后(期间不能再触发 debounce，否则将重新计时)，再执行回调函数</p></div> <h3 id=\\\"机制：\\\"><a href=\\\"#机制：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>防抖函数主要利用定时器的延迟执行特性，根据是否有定时器在等待执行：</p> <ul><li>触发了一个事件后：如果有一个定时任务待执行，就清除定时器，重新计时。</li> <li>如果没有任务待执行，就定时执行这个事件。</li></ul> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>表单的连续点击，防止重复提交。比如重复发送一篇文章。</li> <li>类百度的搜索，连续输入等输入停止后再搜索。</li> <li>一直拖动浏览器窗口，只想触发一次事件等。</li></ol> <h2 id=\\\"节流函数-throttle\\\"><a href=\\\"#节流函数-throttle\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节流函数(throttle):</h2> <h3 id=\\\"概念：-2\\\"><a href=\\\"#概念：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行(单位时间内有事件被多次触发则，只生效一次)</strong>。</p> <h3 id=\\\"生活中的栗子：-2\\\"><a href=\\\"#生活中的栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>漏水的自来水水龙头，尽管水龙头里面有很多水(一直在触发事件)，但还是一滴一滴的往下滴(单位事件内只生效一次)。</p> <h3 id=\\\"代码栗子：-2\\\"><a href=\\\"#代码栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 节流函数 每隔一定时间就执行</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// !_lastTime 第一次进入</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 当前时间- 上次执行的时间 超过 给定时间间隔 就执行回调</span>\\n      _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 触发后，上次执行时间赋值为当前时间</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 每隔10毫秒都会触发一次throttle，每隔一秒触发一次actionFn回调(1秒内再次触发被丢弃)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><ul><li>一开始_lastTime 没有值，触发回调,保存当前触发的时间为_lastTime</li> <li>10 毫秒触发一次,每次触发 用_nowTime-_lastTime 超过给定的时间(1 秒)，就再次触发回调</li></ul> <h3 id=\\\"机制：-2\\\"><a href=\\\"#机制：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>节流函数根据时间差是否超过给定时间(gapTime)来决定是否触发回调。</p> <h3 id=\\\"应用场景：-2\\\"><a href=\\\"#应用场景：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>自动保存草稿功能，当用户在输入的时候(一直触发事件),单位时间内只保存一次草稿。</li> <li>游戏中的刷新率</li></ol> <h2 id=\\\"怎么给回调函数传参？\\\"><a href=\\\"#怎么给回调函数传参？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 怎么给回调函数传参？</h2> <p><strong>通过 ES6 的<code>...</code>扩展符来保存回调函数的参数，并传给回调函数</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// !_lastTime 一开始的时候没有值为true</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行函数'</span><span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// arr是个数组 接收不定数量的参数 没有参数是个空数组</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'执行函数参数1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'执行函数参数2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 节流</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><h2 id=\\\"应用实例，需要加个括号：\\\"><a href=\\\"#应用实例，需要加个括号：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用实例，需要加个括号：</h2> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// !_lastTime 一开始的时候没有值为true</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行函数'</span><span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// arr是个数组 接收不定数量的参数 没有参数是个空数组</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\ndocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onclick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'执行函数参数1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'执行函数参数2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行闭包函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><h2 id=\\\"作用和本质：\\\"><a href=\\\"#作用和本质：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 作用和本质：</h2> <ul><li><p>防抖函数和节流函数主要解决的问题是：<strong>防止函数”短时间“的重复执行</strong>。</p></li> <li><p>它们本质上是：<strong>在时间轴上控制函数的执行次数</strong>。</p></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}