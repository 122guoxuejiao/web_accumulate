{"remainingRequest":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangguobao/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huangguobao/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1589824626563},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1563603945530},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1563603945407},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1563603945530},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1563603948643}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"comment\",\n  data() {\n    return {\n      gitalk: null,\n      gitalkOBKoro1: {}\n    };\n  },\n  mounted() {\n    this.pageInit();\n  },\n  methods: {\n    pageInit() {\n      console.log(\"this\", this);\n      const url = location.href;\n      let arr = [\n        \"http://obkoro1.com/web_accumulate/about.html\",\n        \"http://obkoro1.com/web_accumulate/\"\n      ];\n      // 过滤某些页面\n      if (!arr.includes(url)) {\n        this.initGitalk();\n        this.initIssue();\n      }\n    },\n    // 使用油候初始化issue\n    initIssue() {\n      let val = sessionStorage.pageArray;\n      if (!val) {\n        let pageArray = this.$site.pages;\n        pageArray = pageArray.map(item => {\n          return `${location.origin}/web_accumulate${decodeURI(item.path)}`;\n        });\n        sessionStorage.setItem(\"pageArray\", JSON.stringify(pageArray));\n      }\n    },\n    issueTitle() {\n      const title = \"前端进阶积累\";\n      const pathArr = location.pathname.split(\"/\");\n      let res;\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else if (pathArr[2] === \"codeBlack\") {\n          res = `${articleTile} | 开箱即用的代码块`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\", \"codeBlack\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"前端进阶积累\",\n            algorithm: \"前端算法\",\n            codeBlack: \"开箱即用的代码块\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      return [res, articleTile];\n    },\n    issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      let labels = this.$page.headers.map(item => {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n        return item.title;\n      });\n      // 过滤一些标签\n      labels = labels.filter(item => {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      });\n      // 限制标签数\n      if (labels.length > 10) {\n        labels.length = 10;\n      }\n      // 修改头部的meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    },\n    initGitalk() {\n      let body = document.querySelector(\".gitalk-container\");\n      let script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n      script.onload = () => {\n        this.gitalkOBKoro1 =\n          sessionStorage.gitalkOBKoro1 &&\n          JSON.parse(sessionStorage.gitalkOBKoro1);\n        if (this.gitalkOBKoro1 && this.gitalkOBKoro1.href === location.href) {\n          this.newGitalk(false);\n        } else {\n          this.gitalkOBKoro1 = {\n            href: location.href,\n            num: 0\n          };\n          this.newGitalk();\n        }\n      };\n    },\n    // 根据链接获取仓库\n    getRepo() {\n      const url = location.href;\n      const obj = {\n        \"/web_accumulate/algorithm/\": \"Brush_algorithm\", // 算法仓库\n        \"/web_accumulate/accumulate/\": \"web_accumulate\", // 博客仓库\n        \"/web_accumulate/codeBlack/\": \"codeBlack\"\n      };\n      let repoName = obj[\"/web_accumulate/accumulate/\"]; // 默认博客仓库\n      for (const key in obj) {\n        const index = url.indexOf(key);\n        if (index !== -1) {\n          repoName = obj[key];\n        }\n      }\n      return repoName;\n    },\n    newGitalk(createLabels = true) {\n      const [title, articleTile] = this.issueTitle();\n      let labels = [articleTile];\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n      if (this.gitalkOBKoro1.num > 2) {\n        labels = [];\n      }\n      console.log(\"labels\", labels);\n      let article = this.$page.excerpt.replace(\n        new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"),\n        \"\"\n      );\n      let body = `### [博客链接](${location.href})\\n${article}\\n [博客链接](${location.href})`;\n      if (title) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: this.getRepo(), // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          // id: decodeURI(location.pathname).slice(0, 48), // issue title\n          id: `web ${articleTile}`,\n          title, // issue标题\n          body, // issue内容\n          labels: labels, // issue标签\n          distractionFreeMode: false\n        };\n        this.errCatch();\n        console.log(\"location\", location.href);\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          this.gitalkOBKoro1.num++;\n          sessionStorage.setItem(\n            \"gitalkOBKoro1\",\n            JSON.stringify(this.gitalkOBKoro1)\n          );\n          location.reload();\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          sessionStorage.setItem(\n            \"gitalkOBKoro1\",\n            JSON.stringify(this.gitalkOBKoro1)\n          );\n        }\n      }\n    },\n    // 创建失败\n    errCatch() {\n      var log = console.log;\n      let self = this;\n      console.log = function(msg, data) {\n        // 拦截issue抛出的错误 刷新页面 labels改值\n        if (msg === \"err:\") {\n          if (data.config.baseURL === \"https://api.github.com\") {\n            self.newGitalk(false);\n          }\n        }\n        log.apply(this, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n};\n",null]}