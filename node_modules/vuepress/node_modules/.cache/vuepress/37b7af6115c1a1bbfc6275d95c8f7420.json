{"remainingRequest":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/huangguobao/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/退出页面发送请求.md?vue&type=template&id=51fe2ced&","dependencies":[{"path":"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/退出页面发送请求.md","mtime":1548245067217},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1548245069428},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1548245072336},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1548245069428},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1548245072335},{"path":"/Users/huangguobao/work/web_my/web_accumulate/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1548245072442}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"刷新-关闭页面之前发送请求\"><a class=\"header-anchor\" href=\"#刷新-关闭页面之前发送请求\" aria-hidden=\"true\">#</a> 刷新/关闭页面之前发送请求</h2>\n<h3 id=\"背景：\"><a class=\"header-anchor\" href=\"#背景：\" aria-hidden=\"true\">#</a> 背景：</h3>\n<p>有一个任务非常耗时会消耗后台大量算力，所以在退出页面的时候，要求前端这边发送一个请求来杀死任务。</p>\n<p>一开始以为这个需求非常简单，就是在进入其他路由前，发送一下请求，杀死 \b 一下任务就好了。</p>\n<p>然而现实狠狠的打了我的脸，因为退出页面的场景不止切换路由~</p>\n<h3 id=\"退出页面场景：\"><a class=\"header-anchor\" href=\"#退出页面场景：\" aria-hidden=\"true\">#</a> 退出页面场景：</h3>\n<ol>\n<li>还在本网站，跳到其他路由</li>\n<li>刷新页面/关闭页面</li>\n</ol>\n<h3 id=\"还在本网站，跳到其他路由\"><a class=\"header-anchor\" href=\"#还在本网站，跳到其他路由\" aria-hidden=\"true\">#</a> 还在本网站，跳到其他路由</h3>\n<p>这个比较简单，在<code>Vue</code>中可以通过路由离开的钩子<code>beforeRouteLeave</code>来实现：</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code> <span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>任务运行中<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 发送请求</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 用户离开</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p><strong>刷新页面/关闭页面的情况：</strong></p>\n<p>然而在刷新页面的时候，<code>beforeRouteLeave</code>并不会执行，接着想到了下面这两个<code>API</code>.</p>\n<h2 id=\"beforeunload和unload\"><a class=\"header-anchor\" href=\"#beforeunload和unload\" aria-hidden=\"true\">#</a> <code>beforeunload</code>和<code>unload</code></h2>\n<h3 id=\"beforeunload-当浏览器窗口关闭或者刷新时触发\"><a class=\"header-anchor\" href=\"#beforeunload-当浏览器窗口关闭或者刷新时触发\" aria-hidden=\"true\">#</a> beforeunload 当浏览器窗口关闭或者刷新时触发:</h3>\n<p><strong>介绍</strong>：</p>\n<p>使用这个<code>API</code>可以阻止页面直接关闭，用户通过点击确定/取消按钮，来决定是否不关闭/刷新当前页面。</p>\n<p>在 chrome 下长这个样子，你们肯定都见过：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4rCogy1fyr8kpadj0j30bt04vglt.jpg\" alt=\"\"></p>\n<p><strong>如何使用</strong></p>\n<p>这个 API 的使用非常简单，只要在页面加载的时候监听一下此事件，在需要出现弹窗的时候<strong>return 一个可以转化为 true 的值</strong>,就可以了。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 页面卸载之前</span>\n<span class=\"token keyword\">let</span> killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否杀死任务</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onbeforeunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>任务运行 <span class=\"token operator\">&amp;&amp;</span> 对应页面<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'您可能有数据没有保存'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在部分浏览器可以修改弹窗标题</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    killTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 没有return一个可以转化为true的值 就不会出现弹窗</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p><strong>出现此弹窗的浏览器行为</strong>：</p>\n<p>以下行为是基于 chorme：</p>\n<ol>\n<li>\n<p>焦点：你没有点击取消/确定之前，焦点会一直在此弹窗上</p>\n</li>\n<li>\n<p>你无法在出现弹窗的页面上执行任何操作</p>\n</li>\n<li>\n<p>在其他页面也只能执行简单的点击操作，弹窗还是存在页面中间，无法使用键盘，</p>\n</li>\n<li>\n<p>键盘：键盘被绑定在弹窗上，只能通过按键<code>Esc</code>、<code>Enter</code>来执行取消/确定操作</p>\n</li>\n<li>\n<p><strong>弹窗不是页面的 dom，是浏览器的行为</strong></p>\n</li>\n<li>\n<p><strong>用户取消/确定，没有回调 API，无法得知</strong></p>\n</li>\n</ol>\n<p><strong>弹窗标题</strong>：</p>\n<p>chrome 中刷新页面的标题：<code>重新加载此网站?</code></p>\n<p>chrome 中关闭页面的标题：<code>离开此网站?</code></p>\n<p>现在大部分浏览器都不允许修改弹窗的标题，这个是为了安全考虑，来保证用户不受到错误信息的误导，</p>\n<p><strong>迷茫</strong>：</p>\n<p>一开始我以为既然可以拦截到用户的刷新/关闭页面的操作，出现了上面那个弹窗，这个需求就已经做完了的时候。</p>\n<p>然后发现，<strong>浏览器竟然没有提供用户点击确定/取消刷新页面的回调</strong>。</p>\n<p>到这里我陷入了迷茫，盯着<code>beforeunload</code>这个 API 思考了起了人生的意义(其实是在发呆)，盯着盯着，从<code>beforeunload</code>的<code>before</code>我也就想到了<code>unload</code>这个 API。</p>\n<p>瞬间又燃起了斗志，何不试试这个<code>unload</code>？</p>\n<h3 id=\"unload当页面正在被卸载的时候触发该事件\"><a class=\"header-anchor\" href=\"#unload当页面正在被卸载的时候触发该事件\" aria-hidden=\"true\">#</a> <code>unload</code>当页面正在被卸载的时候触发该事件</h3>\n<p><strong>介绍</strong></p>\n<p>当页面正在被卸载的时候触发该事件，该事件不可取消，为不可逆操作。</p>\n<p><strong>使用</strong></p>\n<p>直接监听该事件就可以了。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p><strong>结合需求</strong>:</p>\n<p><code>killTask</code>为<code>beforeunload</code>时定义的变量，每次进入回调，都会给<code>killTask</code>赋值，使用这个值就可以判断什么时候可以发送请求杀死任务。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onunload</span> <span class=\"token operator\">=</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>killTask <span class=\"token operator\">&amp;&amp;</span> 对应页面<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \b发送请求</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>到这里大家肯定以为已经做出来了该需求，事实上，并没有！</p>\n<p><strong>无法发送异步请求</strong></p>\n<p>\b\b我使用的是<code>axios</code>来发送请求，请求发出去了，但是被取消了，服务器那边根本没有收到请求，如下。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4rCogy1fz5098m4tsj31gd06n761.jpg\" alt=\"\"></p>\n<p>经过一顿分析:发现是<code>axios</code>请求是异步的问题，谷歌之后发现axios不支持同步的请求</p>\n<p><strong>最后使用原生的<a href=\"http://www.w3school.com.cn/xml/xml_http.asp\" target=\"_blank\" rel=\"noopener noreferrer\">XMLHttpRequest<OutboundLink/></a>对象</strong>，让请求同步</p>\n<p>大功告成！</p>\n<h2 id=\"小结：\"><a class=\"header-anchor\" href=\"#小结：\" aria-hidden=\"true\">#</a> 小结：</h2>\n<p>在这两个API中,还有些事项需要注意：</p>\n<ol>\n<li>\n<p><code>alert</code>/<code>confirm</code>/<code>debugger</code>/<code>window.open</code>等都无法使用</p>\n</li>\n<li>\n<p>抛出错误无法终止这两个API</p>\n</li>\n<li>\n<p>谨慎使用异步</p>\n</li>\n</ol>\n<h3 id=\"鼓励我一下：\"><a class=\"header-anchor\" href=\"#鼓励我一下：\" aria-hidden=\"true\">#</a> 鼓励我一下：</h3>\n<p>觉得还不错的话，给我的项目点个<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">star<OutboundLink/></a>吧</p>\n<p><a href=\"http://obkoro1.com/\" target=\"_blank\" rel=\"noopener noreferrer\">博客<OutboundLink/></a>、<a href=\"https://github.com/OBKoro1/Brush_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">前端算法<OutboundLink/></a>、<a href=\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&amp;h=344&amp;f=jpeg&amp;s=8317\" target=\"_blank\" rel=\"noopener noreferrer\">公众号<OutboundLink/></a></p>\n<p>以上2019.1.13</p>\n</div>\n",null]}