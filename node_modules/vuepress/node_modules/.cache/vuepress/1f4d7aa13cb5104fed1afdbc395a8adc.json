{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1561359743865},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1557296864421},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190}],"contextDependencies":[],"result":["import _slicedToArray from \"/Users/koro/work/web_my/web_accumulate/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport file2 from \"../../../README.md\";\nexport default {\n  name: \"comment\",\n  data: function data() {\n    return {};\n  },\n  methods: {\n    issueTitle: function issueTitle() {\n      window.file2 = file2;\n      console.log(\"this\", this, window);\n      var title = location.pathname;\n      var pathArr = title.split(\"/\");\n      var res; // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n\n      var articleTile = this.$page.title;\n\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          var obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = \"\".concat(articleTile, \" | \").concat(obj[pathArr[3]]);\n        } else {\n          // 文章\n          res = \"\".concat(articleTile, \" | \").concat(pathArr[3]);\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        var agreeArr = [\"accumulate\", \"algorithm\"];\n\n        if (agreeArr.includes(pathArr[2])) {\n          var _obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = _obj[pathArr[2]];\n        }\n      }\n\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels: function issueLabels() {\n      var labels = this.$page.headers.map(function (item) {\n        return item.title;\n      }); // 增加meta\n\n      document.querySelector(\"meta[name=description]\").content = labels.join(\",\");\n      return labels;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var body = document.querySelector(\".gitalk-container\");\n    var script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n    body.appendChild(script);\n\n    script.onload = function () {\n      var _this$issueTitle = _this.issueTitle(),\n          _this$issueTitle2 = _slicedToArray(_this$issueTitle, 2),\n          title = _this$issueTitle2[0],\n          articleTile = _this$issueTitle2[1];\n\n      var labels = _this.issueLabels(); // 创建issue TODO: false\n\n\n      if (false) {\n        var commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\",\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 用于当前页面的唯一标识，一般来讲 pathname 足够了，\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: articleTile,\n          // issue title\n          title: title,\n          // body:,\n          labels: labels,\n          distractionFreeMode: false,\n          // 如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮\n          createIssueManually: true\n        };\n        var gitalk = new Gitalk(commentConfig);\n        gitalk.render(\"gitalk-container\");\n        console.log('document.querySelector(\".gt-copyright\")', commentConfig);\n      }\n    };\n  }\n};",{"version":3,"sources":["docs/.vuepress/components/comment/comment.vue"],"names":["file2","name","data","methods","issueTitle","window","console","log","title","location","pathname","pathArr","split","res","articleTile","$page","obj","induction","simple","medium","agreeArr","includes","accumulate","algorithm","issueLabels","labels","headers","map","item","document","querySelector","content","join","mounted","body","script","createElement","src","appendChild","onload","commentConfig","clientID","clientSecret","repo","owner","admin","id","distractionFreeMode","createIssueManually","gitalk","Gitalk","render"],"mappings":"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","sourceRoot":"/Users/koro/work/web_my/web_accumulate","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport file2 from \"../../../README.md\";\n\nexport default {\n  name: \"comment\",\n  data() {\n    return {};\n  },\n  methods: {\n    issueTitle() {\n      window.file2 = file2;\n      console.log(\"this\", this, window);\n      const title = location.pathname;\n      const pathArr = title.split(\"/\");\n      let res;\n      // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels() {\n      let labels = this.$page.headers.map(item => {\n        return item.title;\n      });\n      // 增加meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    }\n  },\n  mounted() {\n    let body = document.querySelector(\".gitalk-container\");\n    let script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n    body.appendChild(script);\n    script.onload = () => {\n      const [title, articleTile] = this.issueTitle();\n      const labels = this.issueLabels();\n      // 创建issue TODO: false\n      if (false) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\",\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 用于当前页面的唯一标识，一般来讲 pathname 足够了，\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: articleTile, // issue title\n          title,\n          // body:,\n          labels: labels,\n          distractionFreeMode: false,\n          // 如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮\n          createIssueManually: true\n        };\n        const gitalk = new Gitalk(commentConfig);\n        gitalk.render(\"gitalk-container\");\n        console.log('document.querySelector(\".gt-copyright\")', commentConfig);\n      }\n    };\n  }\n};\n"]}]}