{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1564556113780},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1557296864421},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _slicedToArray from \"/Users/koro/work/web_my/web_accumulate/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es7.array.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"comment\",\n  data: function data() {\n    return {\n      gitalk: null\n    };\n  },\n  mounted: function mounted() {\n    this.pageInit();\n  },\n  methods: {\n    pageInit: function pageInit() {\n      console.log(\"this\", this);\n      var url = location.href;\n      var arr = [\"http://obkoro1.com/web_accumulate/about.html\"]; // 过滤某些页面\n\n      if (!arr.includes(url)) {\n        this.initGitalk();\n        this.initIssue();\n      }\n    },\n    // 使用油候初始化issue\n    initIssue: function initIssue() {\n      var val = sessionStorage.pageArray;\n\n      if (!val) {\n        var pageArray = this.$site.pages;\n        pageArray = pageArray.map(function (item) {\n          return \"\".concat(location.origin, \"/web_accumulate\").concat(decodeURI(item.path));\n        });\n        sessionStorage.setItem(\"pageArray\", JSON.stringify(pageArray));\n      }\n\n      console.log(\"存pageArray\", sessionStorage.pageArray);\n    },\n    issueTitle: function issueTitle() {\n      var title = location.pathname;\n      var pathArr = title.split(\"/\");\n      var res; // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n\n      var articleTile = this.$page.title;\n\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          var obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = \"\".concat(articleTile, \" | \").concat(obj[pathArr[3]]);\n        } else {\n          // 文章\n          res = \"\".concat(articleTile, \" | \").concat(pathArr[3]);\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        var agreeArr = [\"accumulate\", \"algorithm\"];\n\n        if (agreeArr.includes(pathArr[2])) {\n          var _obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = _obj[pathArr[2]];\n        }\n      }\n\n      return [res, articleTile];\n    },\n    issueLabels: function issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      var labels = this.$page.headers.map(function (item) {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n\n        return item.title;\n      }); // 过滤一些标签\n\n      labels = labels.filter(function (item) {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      }); // 限制标签数\n\n      if (labels.length > 10) {\n        labels.length = 10;\n      } // 修改头部的meta\n\n\n      document.querySelector(\"meta[name=description]\").content = labels.join(\",\");\n      return labels;\n    },\n    initGitalk: function initGitalk() {\n      var _this = this;\n\n      var body = document.querySelector(\".gitalk-container\");\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n\n      script.onload = function () {\n        var val = sessionStorage.gitalkOBKoro1;\n\n        if (val && val === \"issue失败\") {\n          _this.newGitalk(false);\n        } else {\n          _this.newGitalk();\n        }\n      };\n    },\n    // 根据链接获取仓库\n    getRepo: function getRepo() {\n      var url = location.href;\n      var obj = {\n        \"/web_accumulate/algorithm/\": \"Brush_algorithm\",\n        // 算法仓库\n        \"/web_accumulate/accumulate/\": \"web_accumulate\",\n        // 博客仓库\n        \"/web_accumulate/codeBlack/\": \"codeBlack\"\n      };\n      var repoName = obj[\"/web_accumulate/accumulate/\"]; // 默认博客仓库\n\n      for (var key in obj) {\n        var index = url.indexOf(key);\n\n        if (index !== -1) {\n          repoName = obj[key];\n        }\n      }\n\n      return repoName;\n    },\n    newGitalk: function newGitalk() {\n      var createLabels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _this$issueTitle = this.issueTitle(),\n          _this$issueTitle2 = _slicedToArray(_this$issueTitle, 2),\n          title = _this$issueTitle2[0],\n          articleTile = _this$issueTitle2[1];\n\n      var labels = [articleTile];\n\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n\n      var article = this.$page.excerpt.replace(new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"), \"\");\n      var body = \"### [\\u535A\\u5BA2\\u94FE\\u63A5](\".concat(location.href, \")\\n\").concat(article, \"\\n [\\u535A\\u5BA2\\u94FE\\u63A5](\").concat(location.href, \")\");\n\n      if (title) {\n        var commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: this.getRepo(),\n          // github项目名 TODO: 算法分开、小代码块、bug\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48),\n          // issue title\n          title: title,\n          // issue标题\n          body: body,\n          // issue内容\n          labels: labels,\n          // issue标签\n          distractionFreeMode: false\n        };\n        this.errCatch();\n\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue失败\");\n          location.reload();\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue成功\");\n        }\n      }\n    },\n    // 创建失败\n    errCatch: function errCatch() {\n      var log = console.log;\n      var self = this;\n\n      console.log = function (msg, data) {\n        // 拦截issue抛出的错误 刷新页面 labels改值\n        if (msg === \"err:\") {\n          if (data.config.baseURL === \"https://api.github.com\") {\n            self.newGitalk(false);\n          }\n        }\n\n        log.apply(this, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n};",{"version":3,"sources":["docs/.vuepress/components/comment/comment.vue"],"names":["name","data","gitalk","mounted","pageInit","methods","console","log","url","location","href","arr","includes","initGitalk","initIssue","val","sessionStorage","pageArray","$site","pages","map","origin","decodeURI","item","path","setItem","JSON","stringify","issueTitle","title","pathname","pathArr","split","res","articleTile","$page","obj","induction","simple","medium","agreeArr","accumulate","algorithm","issueLabels","labels","headers","length","slice","filter","document","querySelector","content","join","body","script","createElement","src","appendChild","onload","gitalkOBKoro1","newGitalk","getRepo","repoName","key","index","indexOf","createLabels","article","excerpt","replace","RegExp","commentConfig","clientID","clientSecret","repo","owner","admin","id","distractionFreeMode","errCatch","reload","Gitalk","render","self","msg","config","baseURL","apply","Array","prototype","call","arguments"],"mappings":"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","sourceRoot":"/Users/koro/work/web_my/web_accumulate","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"comment\",\n  data() {\n    return {\n      gitalk: null\n    };\n  },\n  mounted() {\n    this.pageInit();\n  },\n  methods: {\n    pageInit() {\n      console.log(\"this\", this);\n      const url = location.href;\n      let arr = [\"http://obkoro1.com/web_accumulate/about.html\"];\n      // 过滤某些页面\n      if (!arr.includes(url)) {\n        this.initGitalk();\n        this.initIssue();\n      }\n    },\n    // 使用油候初始化issue\n    initIssue() {\n      let val = sessionStorage.pageArray;\n      if (!val) {\n        let pageArray = this.$site.pages;\n        pageArray = pageArray.map(item => {\n          return `${location.origin}/web_accumulate${decodeURI(item.path)}`;\n        });\n        sessionStorage.setItem(\"pageArray\", JSON.stringify(pageArray));\n      }\n      console.log(\"存pageArray\", sessionStorage.pageArray);\n    },\n    issueTitle() {\n      const title = location.pathname;\n      const pathArr = title.split(\"/\");\n      let res;\n      // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      return [res, articleTile];\n    },\n    issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      let labels = this.$page.headers.map(item => {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n        return item.title;\n      });\n      // 过滤一些标签\n      labels = labels.filter(item => {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      });\n      // 限制标签数\n      if (labels.length > 10) {\n        labels.length = 10;\n      }\n      // 修改头部的meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    },\n    initGitalk() {\n      let body = document.querySelector(\".gitalk-container\");\n      let script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n      script.onload = () => {\n        let val = sessionStorage.gitalkOBKoro1;\n        if (val && val === \"issue失败\") {\n          this.newGitalk(false);\n        } else {\n          this.newGitalk();\n        }\n      };\n    },\n    // 根据链接获取仓库\n    getRepo() {\n      const url = location.href;\n      const obj = {\n        \"/web_accumulate/algorithm/\": \"Brush_algorithm\", // 算法仓库\n        \"/web_accumulate/accumulate/\": \"web_accumulate\", // 博客仓库\n        \"/web_accumulate/codeBlack/\": \"codeBlack\"\n      };\n      let repoName = obj[\"/web_accumulate/accumulate/\"]; // 默认博客仓库\n      for (const key in obj) {\n        const index = url.indexOf(key);\n        if (index !== -1) {\n          repoName = obj[key];\n        }\n      }\n      return repoName;\n    },\n    newGitalk(createLabels = true) {\n      const [title, articleTile] = this.issueTitle();\n      let labels = [articleTile];\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n      let article = this.$page.excerpt.replace(\n        new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"),\n        \"\"\n      );\n      let body = `### [博客链接](${location.href})\\n${article}\\n [博客链接](${location.href})`;\n      if (title) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: this.getRepo(), // github项目名 TODO: 算法分开、小代码块、bug\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48), // issue title\n          title, // issue标题\n          body, // issue内容\n          labels: labels, // issue标签\n          distractionFreeMode: false\n        };\n        this.errCatch();\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue失败\");\n          location.reload();\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue成功\");\n        }\n      }\n    },\n    // 创建失败\n    errCatch() {\n      var log = console.log;\n      let self = this;\n      console.log = function(msg, data) {\n        // 拦截issue抛出的错误 刷新页面 labels改值\n        if (msg === \"err:\") {\n          if (data.config.baseURL === \"https://api.github.com\") {\n            self.newGitalk(false);\n          }\n        }\n        log.apply(this, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n};\n"]}]}