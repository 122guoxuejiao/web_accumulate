{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1561518755688},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1557296864421},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _slicedToArray from \"/Users/koro/work/web_my/web_accumulate/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"comment\",\n  methods: {\n    issueTitle: function issueTitle() {\n      var title = location.pathname;\n      var pathArr = title.split(\"/\");\n      var res; // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n\n      var articleTile = this.$page.title;\n\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          var obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = \"\".concat(articleTile, \" | \").concat(obj[pathArr[3]]);\n        } else {\n          // 文章\n          res = \"\".concat(articleTile, \" | \").concat(pathArr[3]);\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        var agreeArr = [\"accumulate\", \"algorithm\"];\n\n        if (agreeArr.includes(pathArr[2])) {\n          var _obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = _obj[pathArr[2]];\n        }\n      }\n\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels: function issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      var labels = this.$page.headers.map(function (item) {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n\n        return item.title;\n      }); // 过滤一些标签\n\n      labels = labels.filter(function (item) {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      }); // 限制标签数\n\n      if (labels.length > 10) {\n        labels.length = 10;\n      } // 修改头部的meta\n\n\n      document.querySelector(\"meta[name=description]\").content = labels.join(\",\");\n      return labels;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var body = document.querySelector(\".gitalk-container\");\n    var script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n    body.appendChild(script);\n\n    script.onload = function () {\n      var _this$issueTitle = _this.issueTitle(),\n          _this$issueTitle2 = _slicedToArray(_this$issueTitle, 2),\n          title = _this$issueTitle2[0],\n          articleTile = _this$issueTitle2[1];\n\n      var labels = _this.issueLabels();\n\n      var article = _this.$page.excerpt.replace(new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"), \"\");\n\n      var body = \"### [\\u535A\\u5BA2\\u94FE\\u63A5](\".concat(location.href, \")\\n\").concat(article, \"\\n [\\u535A\\u5BA2\\u94FE\\u63A5](\").concat(location.href, \")\");\n      console.log(\"this\", _this);\n\n      if (title) {\n        var commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\",\n          // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48),\n          // issue title\n          title: title,\n          // issue标题\n          body: body,\n          // issue内容\n          labels: labels,\n          // issue标签\n          distractionFreeMode: false\n        };\n        var log = console.log;\n\n        console.log = function () {\n          log.call(this, \"My Console!!!\");\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n\n        window.gitalk = new Gitalk(commentConfig);\n        window.gitalk.render(\"gitalk-container\");\n        console.log(\"commentConfig\", commentConfig);\n      }\n    };\n  }\n};",{"version":3,"sources":["docs/.vuepress/components/comment/comment.vue"],"names":["name","methods","issueTitle","title","location","pathname","pathArr","split","res","articleTile","$page","obj","induction","simple","medium","agreeArr","includes","accumulate","algorithm","console","log","issueLabels","labels","headers","map","item","length","slice","filter","document","querySelector","content","join","mounted","body","script","createElement","src","appendChild","onload","article","excerpt","replace","RegExp","href","commentConfig","clientID","clientSecret","repo","owner","admin","id","decodeURI","distractionFreeMode","call","apply","Array","prototype","arguments","window","gitalk","Gitalk","render"],"mappings":"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","sourceRoot":"/Users/koro/work/web_my/web_accumulate","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"comment\",\n  methods: {\n    issueTitle() {\n      const title = location.pathname;\n      const pathArr = title.split(\"/\");\n      let res;\n      // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      let labels = this.$page.headers.map(item => {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n        return item.title;\n      });\n      // 过滤一些标签\n      labels = labels.filter(item => {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      });\n      // 限制标签数\n      if (labels.length > 10) {\n        labels.length = 10;\n      }\n      // 修改头部的meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    }\n  },\n  mounted() {\n    let body = document.querySelector(\".gitalk-container\");\n    let script = document.createElement(\"script\");\n    script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n    body.appendChild(script);\n    script.onload = () => {\n      const [title, articleTile] = this.issueTitle();\n      const labels = this.issueLabels();\n      let article = this.$page.excerpt.replace(\n        new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"),\n        \"\"\n      );\n      let body = `### [博客链接](${location.href})\\n${article}\\n [博客链接](${\n        location.href\n      })`;\n      console.log(\"this\", this);\n      if (title) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\", // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48), // issue title\n          title, // issue标题\n          body, // issue内容\n          labels: labels, // issue标签\n          distractionFreeMode: false\n        };\n        var log = console.log;\n        console.log = function() {\n          log.call(this, \"My Console!!!\");\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n        window.gitalk = new Gitalk(commentConfig);\n        window.gitalk.render(\"gitalk-container\");\n        console.log(\"commentConfig\", commentConfig);\n      }\n    };\n  }\n};\n"]}]}