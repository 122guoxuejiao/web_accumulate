{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1561534860823},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1557296864421},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _slicedToArray from \"/Users/koro/work/web_my/web_accumulate/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"comment\",\n  data: function data() {\n    return {\n      gitalk: null\n    };\n  },\n  mounted: function mounted() {\n    this.pageInit();\n  },\n  methods: {\n    pageInit: function pageInit() {\n      console.log(\"this\", this);\n      this.initGitalk();\n      this.initIssue();\n    },\n    // 使用油候初始化issue\n    initIssue: function initIssue() {\n      if (window.initIssue) {\n        var val = sessionStorage.pageArray;\n\n        if (!val) {\n          var pageArray = this.$site.pages;\n          pageArray = pageArray.map(function (item) {\n            return \"\".concat(location.origin, \"/web_accumulate\").concat(decodeURI(item.path));\n          });\n          sessionStorage.setItem(\"pageArray\", JSON.stringify(pageArray));\n          console.log(\"存pageArray\", sessionStorage.pageArray);\n        }\n      }\n    },\n    issueTitle: function issueTitle() {\n      var title = location.pathname;\n      var pathArr = title.split(\"/\");\n      var res; // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n\n      var articleTile = this.$page.title;\n\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          var obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = \"\".concat(articleTile, \" | \").concat(obj[pathArr[3]]);\n        } else {\n          // 文章\n          res = \"\".concat(articleTile, \" | \").concat(pathArr[3]);\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        var agreeArr = [\"accumulate\", \"algorithm\"];\n\n        if (agreeArr.includes(pathArr[2])) {\n          var _obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = _obj[pathArr[2]];\n        }\n      }\n\n      return [res, articleTile];\n    },\n    issueLabels: function issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      var labels = this.$page.headers.map(function (item) {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n\n        return item.title;\n      }); // 过滤一些标签\n\n      labels = labels.filter(function (item) {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      }); // 限制标签数\n\n      if (labels.length > 10) {\n        labels.length = 10;\n      } // 修改头部的meta\n\n\n      document.querySelector(\"meta[name=description]\").content = labels.join(\",\");\n      return labels;\n    },\n    initGitalk: function initGitalk() {\n      var _this = this;\n\n      var body = document.querySelector(\".gitalk-container\");\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n\n      script.onload = function () {\n        var val = sessionStorage.gitalkOBKoro1;\n\n        if (val && val === \"issue失败\") {\n          _this.newGitalk(false);\n        } else {\n          _this.newGitalk();\n        }\n      };\n    },\n    newGitalk: function newGitalk() {\n      var createLabels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _this$issueTitle = this.issueTitle(),\n          _this$issueTitle2 = _slicedToArray(_this$issueTitle, 2),\n          title = _this$issueTitle2[0],\n          articleTile = _this$issueTitle2[1];\n\n      var labels = [articleTile];\n\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n\n      var article = this.$page.excerpt.replace(new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"), \"\");\n      var body = \"### [\\u535A\\u5BA2\\u94FE\\u63A5](\".concat(location.href, \")\\n\").concat(article, \"\\n [\\u535A\\u5BA2\\u94FE\\u63A5](\").concat(location.href, \")\");\n\n      if (title) {\n        var commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\",\n          // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48),\n          // issue title\n          title: title,\n          // issue标题\n          body: body,\n          // issue内容\n          labels: labels,\n          // issue标签\n          distractionFreeMode: false\n        }; // 全局拦截console\n\n        var log = console.log;\n        var self = this;\n\n        console.log = function (msg, data) {\n          // 拦截issue抛出的错误 刷新页面 labels改值\n          if (msg === \"err:\") {\n            if (data.config.baseURL === \"https://api.github.com\") {\n              self.newGitalk(false);\n            }\n          }\n\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue失败\");\n          location.reload();\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue成功\");\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["docs/.vuepress/components/comment/comment.vue"],"names":["name","data","gitalk","mounted","pageInit","methods","console","log","initGitalk","initIssue","window","val","sessionStorage","pageArray","$site","pages","map","location","origin","decodeURI","item","path","setItem","JSON","stringify","issueTitle","title","pathname","pathArr","split","res","articleTile","$page","obj","induction","simple","medium","agreeArr","includes","accumulate","algorithm","issueLabels","labels","headers","length","slice","filter","document","querySelector","content","join","body","script","createElement","src","appendChild","onload","gitalkOBKoro1","newGitalk","createLabels","article","excerpt","replace","RegExp","href","commentConfig","clientID","clientSecret","repo","owner","admin","id","distractionFreeMode","self","msg","config","baseURL","apply","Array","prototype","call","arguments","reload","Gitalk","render"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe;AACbA,QAAM,SADO;AAEbC,MAFa,kBAEN;AACL,WAAO;AACLC,cAAQ;AADH,KAAP;AAGD,GANY;AAObC,SAPa,qBAOH;AACR,SAAKC,QAAL;AACD,GATY;AAUbC,WAAS;AACPD,YADO,sBACI;AACTE,cAAQC,GAAR,CAAY,MAAZ,EAAoB,IAApB;AACA,WAAKC,UAAL;AACA,WAAKC,SAAL;AACD,KALM;AAMP;AACAA,aAPO,uBAOK;AACV,UAAIC,OAAOD,SAAX,EAAsB;AACpB,YAAIE,MAAMC,eAAeC,SAAzB;;AACA,YAAI,CAACF,GAAL,EAAU;AACR,cAAIE,YAAY,KAAKC,KAAL,CAAWC,KAA3B;AACAF,sBAAYA,UAAUG,GAAV,CAAc,gBAAQ;AAChC,6BAAUC,SAASC,MAAnB,4BAA2CC,UAAUC,KAAKC,IAAf,CAA3C;AACD,WAFW,CAAZ;AAGAT,yBAAeU,OAAf,CAAuB,WAAvB,EAAoCC,KAAKC,SAAL,CAAeX,SAAf,CAApC;AACAP,kBAAQC,GAAR,CAAY,YAAZ,EAA0BK,eAAeC,SAAzC;AACD;AACF;AACF,KAnBM;AAoBPY,cApBO,wBAoBM;AACX,UAAMC,QAAQT,SAASU,QAAvB;AACA,UAAMC,UAAUF,MAAMG,KAAN,CAAY,GAAZ,CAAhB;AACA,UAAIC,GAAJ,CAHW,CAIX;AACA;;AACA,UAAIC,cAAc,KAAKC,KAAL,CAAWN,KAA7B;;AACA,UAAIE,QAAQ,CAAR,CAAJ,EAAgB;AACd;AACA,YAAIA,QAAQ,CAAR,MAAe,WAAnB,EAAgC;AAC9B;AACA,cAAIK,MAAM;AACRC,uBAAW,QADH;AAERC,oBAAQ,QAFA;AAGRC,oBAAQ;AAHA,WAAV;AAKAN,0BAASC,WAAT,gBAA0BE,IAAIL,QAAQ,CAAR,CAAJ,CAA1B;AACD,SARD,MAQO;AACL;AACAE,0BAASC,WAAT,gBAA0BH,QAAQ,CAAR,CAA1B;AACD;AACF,OAdD,MAcO,IAAIA,QAAQ,CAAR,CAAJ,EAAgB;AACrB;AACA,YAAIS,WAAW,CAAC,YAAD,EAAe,WAAf,CAAf;;AACA,YAAIA,SAASC,QAAT,CAAkBV,QAAQ,CAAR,CAAlB,CAAJ,EAAmC;AACjC,cAAIK,OAAM;AACRM,wBAAY,WADJ;AAERC,uBAAW;AAFH,WAAV;AAIAV,gBAAMG,KAAIL,QAAQ,CAAR,CAAJ,CAAN;AACD;AACF;;AACD,aAAO,CAACE,GAAD,EAAMC,WAAN,CAAP;AACD,KArDM;AAsDPU,eAtDO,yBAsDO;AACZ;AACA,UAAIC,SAAS,KAAKV,KAAL,CAAWW,OAAX,CAAmB3B,GAAnB,CAAuB,gBAAQ;AAC1C,YAAII,KAAKM,KAAL,CAAWkB,MAAX,GAAoB,EAAxB,EAA4B;AAC1BxB,eAAKM,KAAL,GAAaN,KAAKM,KAAL,CAAWmB,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAAb;AACD;;AACD,eAAOzB,KAAKM,KAAZ;AACD,OALY,CAAb,CAFY,CAQZ;;AACAgB,eAASA,OAAOI,MAAP,CAAc,gBAAQ;AAC7B,eAAO,CAAC,CAAC,QAAD,EAAW,IAAX,EAAiBR,QAAjB,CAA0BlB,IAA1B,CAAR;AACD,OAFQ,CAAT,CATY,CAYZ;;AACA,UAAIsB,OAAOE,MAAP,GAAgB,EAApB,EAAwB;AACtBF,eAAOE,MAAP,GAAgB,EAAhB;AACD,OAfW,CAgBZ;;;AACAG,eAASC,aAAT,CAAuB,wBAAvB,EAAiDC,OAAjD,GAA2DP,OAAOQ,IAAP,CACzD,GADyD,CAA3D;AAGA,aAAOR,MAAP;AACD,KA3EM;AA4EPlC,cA5EO,wBA4EM;AAAA;;AACX,UAAI2C,OAAOJ,SAASC,aAAT,CAAuB,mBAAvB,CAAX;AACA,UAAII,SAASL,SAASM,aAAT,CAAuB,QAAvB,CAAb;AACAD,aAAOE,GAAP,GAAa,0DAAb;AACAH,WAAKI,WAAL,CAAiBH,MAAjB;;AACAA,aAAOI,MAAP,GAAgB,YAAM;AACpB,YAAI7C,MAAMC,eAAe6C,aAAzB;;AACA,YAAI9C,OAAOA,QAAQ,SAAnB,EAA8B;AAC5B,gBAAK+C,SAAL,CAAe,KAAf;AACD,SAFD,MAEO;AACL,gBAAKA,SAAL;AACD;AACF,OAPD;AAQD,KAzFM;AA0FPA,aA1FO,uBA0FwB;AAAA,UAArBC,YAAqB,uEAAN,IAAM;;AAAA,6BACA,KAAKlC,UAAL,EADA;AAAA;AAAA,UACtBC,KADsB;AAAA,UACfK,WADe;;AAE7B,UAAIW,SAAS,CAACX,WAAD,CAAb;;AACA,UAAI4B,YAAJ,EAAkB;AAChBjB,iBAAS,KAAKD,WAAL,EAAT;AACD;;AACD,UAAImB,UAAU,KAAK5B,KAAL,CAAW6B,OAAX,CAAmBC,OAAnB,CACZ,IAAIC,MAAJ,CAAW,+CAAX,EAA4D,GAA5D,CADY,EAEZ,EAFY,CAAd;AAIA,UAAIZ,gDAAqBlC,SAAS+C,IAA9B,gBAAwCJ,OAAxC,2CACF3C,SAAS+C,IADP,MAAJ;;AAGA,UAAItC,KAAJ,EAAW;AACT,YAAMuC,gBAAgB;AACpBC,oBAAU,sBADU;AAEpBC,wBAAc,0CAFM;AAGpBC,gBAAM,gBAHc;AAGI;AACxBC,iBAAO,SAJa;AAKpB;AACAC,iBAAO,CAAC,SAAD,CANa;AAOpB;AAEA;AACAC,cAAIpD,UAAUF,SAASU,QAAnB,EAA6BkB,KAA7B,CAAmC,CAAnC,EAAsC,EAAtC,CAVgB;AAU2B;AAC/CnB,sBAXoB;AAWb;AACPyB,oBAZoB;AAYd;AACNT,kBAAQA,MAbY;AAaJ;AAChB8B,+BAAqB;AAdD,SAAtB,CADS,CAiBT;;AACA,YAAIjE,MAAMD,QAAQC,GAAlB;AACA,YAAIkE,OAAO,IAAX;;AACAnE,gBAAQC,GAAR,GAAc,UAASmE,GAAT,EAAczE,IAAd,EAAoB;AAChC;AACA,cAAIyE,QAAQ,MAAZ,EAAoB;AAClB,gBAAIzE,KAAK0E,MAAL,CAAYC,OAAZ,KAAwB,wBAA5B,EAAsD;AACpDH,mBAAKf,SAAL,CAAe,KAAf;AACD;AACF;;AACDnD,cAAIsE,KAAJ,CAAU,IAAV,EAAgBC,MAAMC,SAAN,CAAgBlC,KAAhB,CAAsBmC,IAAtB,CAA2BC,SAA3B,CAAhB;AACD,SARD;;AASA,YAAI,KAAK/E,MAAT,EAAiB;AACf;AACAU,yBAAeU,OAAf,CAAuB,eAAvB,EAAwC,SAAxC;AACAL,mBAASiE,MAAT;AACD,SAJD,MAIO;AACL,eAAKhF,MAAL,GAAc,IAAIiF,MAAJ,CAAWlB,aAAX,CAAd;AACA,eAAK/D,MAAL,CAAYkF,MAAZ,CAAmB,kBAAnB;AACAxE,yBAAeU,OAAf,CAAuB,eAAvB,EAAwC,SAAxC;AACD;AACF;AACF;AA9IM;AAVI,CAAf","sourceRoot":"/Users/koro/work/web_my/web_accumulate","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"comment\",\n  data() {\n    return {\n      gitalk: null\n    };\n  },\n  mounted() {\n    this.pageInit();\n  },\n  methods: {\n    pageInit() {\n      console.log(\"this\", this);\n      this.initGitalk();\n      this.initIssue();\n    },\n    // 使用油候初始化issue\n    initIssue() {\n      if (window.initIssue) {\n        let val = sessionStorage.pageArray;\n        if (!val) {\n          let pageArray = this.$site.pages;\n          pageArray = pageArray.map(item => {\n            return `${location.origin}/web_accumulate${decodeURI(item.path)}`;\n          });\n          sessionStorage.setItem(\"pageArray\", JSON.stringify(pageArray));\n          console.log(\"存pageArray\", sessionStorage.pageArray);\n        }\n      }\n    },\n    issueTitle() {\n      const title = location.pathname;\n      const pathArr = title.split(\"/\");\n      let res;\n      // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      return [res, articleTile];\n    },\n    issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      let labels = this.$page.headers.map(item => {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n        return item.title;\n      });\n      // 过滤一些标签\n      labels = labels.filter(item => {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      });\n      // 限制标签数\n      if (labels.length > 10) {\n        labels.length = 10;\n      }\n      // 修改头部的meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    },\n    initGitalk() {\n      let body = document.querySelector(\".gitalk-container\");\n      let script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n      script.onload = () => {\n        let val = sessionStorage.gitalkOBKoro1;\n        if (val && val === \"issue失败\") {\n          this.newGitalk(false);\n        } else {\n          this.newGitalk();\n        }\n      };\n    },\n    newGitalk(createLabels = true) {\n      const [title, articleTile] = this.issueTitle();\n      let labels = [articleTile];\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n      let article = this.$page.excerpt.replace(\n        new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"),\n        \"\"\n      );\n      let body = `### [博客链接](${location.href})\\n${article}\\n [博客链接](${\n        location.href\n      })`;\n      if (title) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\", // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48), // issue title\n          title, // issue标题\n          body, // issue内容\n          labels: labels, // issue标签\n          distractionFreeMode: false\n        };\n        // 全局拦截console\n        var log = console.log;\n        let self = this;\n        console.log = function(msg, data) {\n          // 拦截issue抛出的错误 刷新页面 labels改值\n          if (msg === \"err:\") {\n            if (data.config.baseURL === \"https://api.github.com\") {\n              self.newGitalk(false);\n            }\n          }\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue失败\");\n          location.reload();\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          sessionStorage.setItem(\"gitalkOBKoro1\", \"issue成功\");\n        }\n      }\n    }\n  }\n};\n"]}]}