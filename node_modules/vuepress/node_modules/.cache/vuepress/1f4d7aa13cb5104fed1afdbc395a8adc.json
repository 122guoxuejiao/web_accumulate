{"remainingRequest":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koro/work/web_my/web_accumulate/docs/.vuepress/components/comment/comment.vue","mtime":1561527307439},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/babel-loader/lib/index.js","mtime":1557296864421},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/cache-loader/dist/cjs.js","mtime":1557296864520},{"path":"/Users/koro/work/web_my/web_accumulate/node_modules/vue-loader/lib/index.js","mtime":1557296867190}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _slicedToArray from \"/Users/koro/work/web_my/web_accumulate/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"comment\",\n  data: function data() {\n    return {\n      gitalk: null\n    };\n  },\n  methods: {\n    issueTitle: function issueTitle() {\n      var title = location.pathname;\n      var pathArr = title.split(\"/\");\n      var res; // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n\n      var articleTile = this.$page.title;\n\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          var obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = \"\".concat(articleTile, \" | \").concat(obj[pathArr[3]]);\n        } else {\n          // 文章\n          res = \"\".concat(articleTile, \" | \").concat(pathArr[3]);\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        var agreeArr = [\"accumulate\", \"algorithm\"];\n\n        if (agreeArr.includes(pathArr[2])) {\n          var _obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = _obj[pathArr[2]];\n        }\n      }\n\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels: function issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      var labels = this.$page.headers.map(function (item) {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n\n        return item.title;\n      }); // 过滤一些标签\n\n      labels = labels.filter(function (item) {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      }); // 限制标签数\n\n      if (labels.length > 10) {\n        labels.length = 10;\n      } // 修改头部的meta\n\n\n      document.querySelector(\"meta[name=description]\").content = labels.join(\",\");\n      return labels;\n    },\n    initGitalk: function initGitalk() {\n      var _this = this;\n\n      var body = document.querySelector(\".gitalk-container\");\n      var script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n\n      script.onload = function () {\n        _this.newGitalk();\n      };\n    },\n    newGitalk: function newGitalk() {\n      var createLabels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _this$issueTitle = this.issueTitle(),\n          _this$issueTitle2 = _slicedToArray(_this$issueTitle, 2),\n          title = _this$issueTitle2[0],\n          articleTile = _this$issueTitle2[1];\n\n      var labels = [articleTile];\n\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n\n      var article = this.$page.excerpt.replace(new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"), \"\");\n      var body = \"### [\\u535A\\u5BA2\\u94FE\\u63A5](\".concat(location.href, \")\\n\").concat(article, \"\\n [\\u535A\\u5BA2\\u94FE\\u63A5](\").concat(location.href, \")\");\n\n      if (title) {\n        var commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\",\n          // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48),\n          // issue title\n          title: title,\n          // issue标题\n          body: body,\n          // issue内容\n          labels: labels,\n          // issue标签\n          distractionFreeMode: false\n        }; // 全局拦截console\n\n        var log = console.log;\n        var self = this;\n\n        console.log = function (msg, data) {\n          // 拦截issue抛出的错误 labels改值\n          if (msg === \"err:\") {\n            if (data.config.baseURL === \"https://api.github.com\") {\n              console.log('重新请求');\n              self.newGitalk(false);\n            }\n          }\n\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n\n        console.log(\"gitalk\", this.gitalk, commentConfig);\n\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          console.log(\"this.gitalk.option\", this.gitalk.option);\n          this.gitalk.option = commentConfig;\n          this.gitalk.render(\"gitalk-container\");\n          console.log(\"this.gitalk1\", document.querySelector(\"#gitalk-container\"));\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          console.log(\"this.gitalk2\", document.querySelector(\"#gitalk-container\"));\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initGitalk();\n  }\n};",{"version":3,"sources":["docs/.vuepress/components/comment/comment.vue"],"names":["name","data","gitalk","methods","issueTitle","title","location","pathname","pathArr","split","res","articleTile","$page","obj","induction","simple","medium","agreeArr","includes","accumulate","algorithm","console","log","issueLabels","labels","headers","map","item","length","slice","filter","document","querySelector","content","join","initGitalk","body","script","createElement","src","appendChild","onload","newGitalk","createLabels","article","excerpt","replace","RegExp","href","commentConfig","clientID","clientSecret","repo","owner","admin","id","decodeURI","distractionFreeMode","self","msg","config","baseURL","apply","Array","prototype","call","arguments","option","render","Gitalk","mounted"],"mappings":"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","sourceRoot":"/Users/koro/work/web_my/web_accumulate","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"comment\",\n  data() {\n    return {\n      gitalk: null\n    };\n  },\n  methods: {\n    issueTitle() {\n      const title = location.pathname;\n      const pathArr = title.split(\"/\");\n      let res;\n      // \"js 调用栈机制与ES6尾调用优化介绍\"\n      // \"OBKoro1前端积累\"\n      let articleTile = this.$page.title;\n      if (pathArr[3]) {\n        // 文章页面创建issue\n        if (pathArr[2] === \"algorithm\") {\n          // 算法\n          let obj = {\n            induction: \"入门级-算法\",\n            simple: \"简单级-算法\",\n            medium: \"中等级-算法\"\n          };\n          res = `${articleTile} | ${obj[pathArr[3]]}`;\n        } else {\n          // 文章\n          res = `${articleTile} | ${pathArr[3]}`;\n        }\n      } else if (pathArr[2]) {\n        // 第二层主目录是否创建issue\n        let agreeArr = [\"accumulate\", \"algorithm\"];\n        if (agreeArr.includes(pathArr[2])) {\n          let obj = {\n            accumulate: \"OBKoro1博客\",\n            algorithm: \"前端算法\"\n          };\n          res = obj[pathArr[2]];\n        }\n      }\n      console.log(\"pathArr\", pathArr, res);\n      return [res, articleTile];\n    },\n    issueLabels() {\n      // 切割超过50个字符的标签 避免创建不了issue\n      let labels = this.$page.headers.map(item => {\n        if (item.title.length > 50) {\n          item.title = item.title.slice(0, 48);\n        }\n        return item.title;\n      });\n      // 过滤一些标签\n      labels = labels.filter(item => {\n        return ![\"鼓励我一下：\", \"小结\"].includes(item);\n      });\n      // 限制标签数\n      if (labels.length > 10) {\n        labels.length = 10;\n      }\n      // 修改头部的meta\n      document.querySelector(\"meta[name=description]\").content = labels.join(\n        \",\"\n      );\n      return labels;\n    },\n    initGitalk() {\n      let body = document.querySelector(\".gitalk-container\");\n      let script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\";\n      body.appendChild(script);\n      script.onload = () => {\n        this.newGitalk();\n      };\n    },\n    newGitalk(createLabels = true) {\n      const [title, articleTile] = this.issueTitle();\n      let labels = [articleTile];\n      if (createLabels) {\n        labels = this.issueLabels();\n      }\n      let article = this.$page.excerpt.replace(\n        new RegExp('<div class=\"line-numbers-wrapper\">.*?<\\\\/div>', \"g\"),\n        \"\"\n      );\n      let body = `### [博客链接](${location.href})\\n${article}\\n [博客链接](${\n        location.href\n      })`;\n      if (title) {\n        const commentConfig = {\n          clientID: \"8fbce2735aa4b865e9df\",\n          clientSecret: \"c2d2947de913af238dc5a22b1db8de0d9e834096\",\n          repo: \"web_accumulate\", // github项目名\n          owner: \"OBKoro1\",\n          // 这里接受一个数组，可以添加多个管理员\n          admin: [\"OBKoro1\"],\n          // id 需要用pathname否则将会重复创建。\n\n          // 但是如果你的 pathname 超过 50 个字符，GitHub 将不会成功创建 issue，此情况可以考虑给每个页面生成 hash 值的方法.\n          id: decodeURI(location.pathname).slice(0, 48), // issue title\n          title, // issue标题\n          body, // issue内容\n          labels: labels, // issue标签\n          distractionFreeMode: false\n        };\n        // 全局拦截console\n        var log = console.log;\n        let self = this;\n        console.log = function(msg, data) {\n          // 拦截issue抛出的错误 labels改值\n          if (msg === \"err:\") {\n            if (data.config.baseURL === \"https://api.github.com\") {\n              console.log('重新请求')\n              self.newGitalk(false);\n            }\n          }\n          log.apply(this, Array.prototype.slice.call(arguments));\n        };\n        console.log(\"gitalk\", this.gitalk, commentConfig);\n        if (this.gitalk) {\n          // 更新配置并重新请求\n          console.log(\"this.gitalk.option\", this.gitalk.option);\n          this.gitalk.option = commentConfig;\n          this.gitalk.render(\"gitalk-container\");\n          console.log(\n            \"this.gitalk1\",\n            document.querySelector(\"#gitalk-container\")\n          );\n        } else {\n          this.gitalk = new Gitalk(commentConfig);\n          this.gitalk.render(\"gitalk-container\");\n          console.log(\n            \"this.gitalk2\",\n            document.querySelector(\"#gitalk-container\")\n          );\n        }\n      }\n    }\n  },\n  mounted() {\n    this.initGitalk();\n  }\n};\n"]}]}