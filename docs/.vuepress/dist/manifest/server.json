{
  "entry": "server-bundle.js",
  "files": {
    "server-bundle.js": "module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded chunks\n/******/ \t// \"0\" means \"already loaded\"\n/******/ \tvar installedChunks = {\n/******/ \t\t0: 0\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId) {\n/******/ \t\tvar promises = [];\n/******/\n/******/\n/******/ \t\t// require() chunk loading for javascript\n/******/\n/******/ \t\t// \"0\" is the signal for \"already loaded\"\n/******/ \t\tif(installedChunks[chunkId] !== 0) {\n/******/ \t\t\tvar chunk = require(\"./\" + chunkId + \".server-bundle.js\");\n/******/ \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n/******/ \t\t\tfor(var moduleId in moreModules) {\n/******/ \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t\t}\n/******/ \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n/******/ \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n/******/ \t\t}\n/******/ \t\treturn Promise.all(promises);\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/web_accumulate/\";\n/******/\n/******/ \t// uncaught error handler for webpack runtime\n/******/ \t__webpack_require__.oe = function(err) {\n/******/ \t\tprocess.nextTick(function() {\n/******/ \t\t\tthrow err; // catch this error by using import().catch()\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 90);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"vue\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar store = __webpack_require__(71)('wks');\nvar uid = __webpack_require__(23);\nvar Symbol = __webpack_require__(3).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(3);\nvar core = __webpack_require__(14);\nvar hide = __webpack_require__(11);\nvar redefine = __webpack_require__(12);\nvar ctx = __webpack_require__(10);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(6)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(7);\nvar IE8_DOM_DEFINE = __webpack_require__(72);\nvar toPrimitive = __webpack_require__(73);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(22);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(9);\nvar createDesc = __webpack_require__(53);\nmodule.exports = __webpack_require__(8) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(3);\nvar hide = __webpack_require__(11);\nvar has = __webpack_require__(15);\nvar SRC = __webpack_require__(23)('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(14).inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $iterators = __webpack_require__(19);\nvar getKeys = __webpack_require__(26);\nvar redefine = __webpack_require__(12);\nvar global = __webpack_require__(3);\nvar hide = __webpack_require__(11);\nvar Iterators = __webpack_require__(18);\nvar wks = __webpack_require__(2);\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar addToUnscopables = __webpack_require__(104);\nvar step = __webpack_require__(82);\nvar Iterators = __webpack_require__(18);\nvar toIObject = __webpack_require__(27);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(64)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar fails = __webpack_require__(6);\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(4);\nvar $some = __webpack_require__(31)(3);\n\n$export($export.P + $export.F * !__webpack_require__(20)([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar def = __webpack_require__(9).f;\nvar has = __webpack_require__(15);\nvar TAG = __webpack_require__(2)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(4);\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(100) });\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(78);\nvar enumBugKeys = __webpack_require__(62);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(60);\nvar defined = __webpack_require__(16);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(16);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(28);\nvar $keys = __webpack_require__(26);\n\n__webpack_require__(81)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(4);\nvar $forEach = __webpack_require__(31)(0);\nvar STRICT = __webpack_require__(20)([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = __webpack_require__(10);\nvar IObject = __webpack_require__(60);\nvar toObject = __webpack_require__(28);\nvar toLength = __webpack_require__(56);\nvar asc = __webpack_require__(108);\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(4);\nvar $filter = __webpack_require__(31)(2);\n\n$export($export.P + $export.F * !__webpack_require__(20)([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(4);\nvar $map = __webpack_require__(31)(1);\n\n$export($export.P + $export.F * !__webpack_require__(20)([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@replace logic\n__webpack_require__(67)('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n;(function(root, factory) {\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})(this, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\nmodule.exports = false;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nvar document = __webpack_require__(3).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(10);\nvar call = __webpack_require__(91);\nvar isArrayIter = __webpack_require__(92);\nvar anObject = __webpack_require__(7);\nvar toLength = __webpack_require__(56);\nvar getIterFn = __webpack_require__(93);\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.15 ToLength\nvar toInteger = __webpack_require__(57);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar redefine = __webpack_require__(12);\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global = __webpack_require__(3);\nvar dP = __webpack_require__(9);\nvar DESCRIPTORS = __webpack_require__(8);\nvar SPECIES = __webpack_require__(2)('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(13);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar shared = __webpack_require__(71)('keys');\nvar uid = __webpack_require__(23);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar META = __webpack_require__(23)('meta');\nvar isObject = __webpack_require__(5);\nvar has = __webpack_require__(15);\nvar setDesc = __webpack_require__(9).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__webpack_require__(6)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY = __webpack_require__(51);\nvar $export = __webpack_require__(4);\nvar redefine = __webpack_require__(12);\nvar hide = __webpack_require__(11);\nvar Iterators = __webpack_require__(18);\nvar $iterCreate = __webpack_require__(105);\nvar setToStringTag = __webpack_require__(24);\nvar getPrototypeOf = __webpack_require__(107);\nvar ITERATOR = __webpack_require__(2)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(9).f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || __webpack_require__(8) && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(4);\nvar $indexOf = __webpack_require__(79)(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(20)($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar hide = __webpack_require__(11);\nvar redefine = __webpack_require__(12);\nvar fails = __webpack_require__(6);\nvar defined = __webpack_require__(16);\nvar wks = __webpack_require__(2);\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"vue-router\");\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY = __webpack_require__(51);\nvar global = __webpack_require__(3);\nvar ctx = __webpack_require__(10);\nvar classof = __webpack_require__(70);\nvar $export = __webpack_require__(4);\nvar isObject = __webpack_require__(5);\nvar aFunction = __webpack_require__(22);\nvar anInstance = __webpack_require__(54);\nvar forOf = __webpack_require__(55);\nvar speciesConstructor = __webpack_require__(94);\nvar task = __webpack_require__(74).set;\nvar microtask = __webpack_require__(96)();\nvar newPromiseCapabilityModule = __webpack_require__(76);\nvar perform = __webpack_require__(97);\nvar userAgent = __webpack_require__(98);\nvar promiseResolve = __webpack_require__(99);\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[__webpack_require__(2)('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(58)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n__webpack_require__(24)($Promise, PROMISE);\n__webpack_require__(59)(PROMISE);\nWrapper = __webpack_require__(14)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(77)(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(13);\nvar TAG = __webpack_require__(2)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core = __webpack_require__(14);\nvar global = __webpack_require__(3);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(51) ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(8) && !__webpack_require__(6)(function () {\n  return Object.defineProperty(__webpack_require__(52)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(5);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(10);\nvar invoke = __webpack_require__(95);\nvar html = __webpack_require__(75);\nvar cel = __webpack_require__(52);\nvar global = __webpack_require__(3);\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(13)(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar document = __webpack_require__(3).document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = __webpack_require__(22);\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ITERATOR = __webpack_require__(2)('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar has = __webpack_require__(15);\nvar toIObject = __webpack_require__(27);\nvar arrayIndexOf = __webpack_require__(79)(false);\nvar IE_PROTO = __webpack_require__(61)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(27);\nvar toLength = __webpack_require__(56);\nvar toAbsoluteIndex = __webpack_require__(101);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\nexports.f = {}.propertyIsEnumerable;\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(4);\nvar core = __webpack_require__(14);\nvar fails = __webpack_require__(6);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(7);\nvar dPs = __webpack_require__(106);\nvar enumBugKeys = __webpack_require__(62);\nvar IE_PROTO = __webpack_require__(61)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(52)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(75).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(13);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(5);\nvar cof = __webpack_require__(13);\nvar MATCH = __webpack_require__(2)('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@match logic\n__webpack_require__(67)('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nvar setPrototypeOf = __webpack_require__(121).set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports) {\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(142);\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(7);\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// check on default Array iterator\nvar Iterators = __webpack_require__(18);\nvar ITERATOR = __webpack_require__(2)('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof = __webpack_require__(70);\nvar ITERATOR = __webpack_require__(2)('iterator');\nvar Iterators = __webpack_require__(18);\nmodule.exports = __webpack_require__(14).getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(7);\nvar aFunction = __webpack_require__(22);\nvar SPECIES = __webpack_require__(2)('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports) {\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(3);\nvar macrotask = __webpack_require__(74).set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = __webpack_require__(13)(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(3);\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(7);\nvar isObject = __webpack_require__(5);\nvar newPromiseCapability = __webpack_require__(76);\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(26);\nvar gOPS = __webpack_require__(102);\nvar pIE = __webpack_require__(80);\nvar toObject = __webpack_require__(28);\nvar IObject = __webpack_require__(60);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(6)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(57);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.5 Object.freeze(O)\nvar isObject = __webpack_require__(5);\nvar meta = __webpack_require__(63).onFreeze;\n\n__webpack_require__(81)('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(2)('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(11)(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar create = __webpack_require__(83);\nvar descriptor = __webpack_require__(53);\nvar setToStringTag = __webpack_require__(24);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(11)(IteratorPrototype, __webpack_require__(2)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(9);\nvar anObject = __webpack_require__(7);\nvar getKeys = __webpack_require__(26);\n\nmodule.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(15);\nvar toObject = __webpack_require__(28);\nvar IE_PROTO = __webpack_require__(61)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = __webpack_require__(109);\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nvar isArray = __webpack_require__(84);\nvar SPECIES = __webpack_require__(2)('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// B.2.3.10 String.prototype.link(url)\n__webpack_require__(111)('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(4);\nvar fails = __webpack_require__(6);\nvar defined = __webpack_require__(16);\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = __webpack_require__(4);\n\n$export($export.S, 'Array', { isArray: __webpack_require__(84) });\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@split logic\n__webpack_require__(67)('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = __webpack_require__(85);\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Home_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 115 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarButton_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 21.1.3.25 String.prototype.trim()\n__webpack_require__(117)('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(4);\nvar defined = __webpack_require__(16);\nvar fails = __webpack_require__(6);\nvar spaces = __webpack_require__(118);\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports) {\n\nmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SearchBox_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(3);\nvar inheritIfRequired = __webpack_require__(87);\nvar dP = __webpack_require__(9).f;\nvar gOPN = __webpack_require__(123).f;\nvar isRegExp = __webpack_require__(85);\nvar $flags = __webpack_require__(124);\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (__webpack_require__(8) && (!CORRECT_NEW || __webpack_require__(6)(function () {\n  re2[__webpack_require__(2)('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  __webpack_require__(12)(global, 'RegExp', $RegExp);\n}\n\n__webpack_require__(59)('RegExp');\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(5);\nvar anObject = __webpack_require__(7);\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __webpack_require__(10)(Function.call, __webpack_require__(122).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar pIE = __webpack_require__(80);\nvar createDesc = __webpack_require__(53);\nvar toIObject = __webpack_require__(27);\nvar toPrimitive = __webpack_require__(73);\nvar has = __webpack_require__(15);\nvar IE8_DOM_DEFINE = __webpack_require__(72);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(78);\nvar hiddenKeys = __webpack_require__(62).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(7);\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownTransition_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 126 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_DropdownLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 127 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_NavLinks_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 128 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Navbar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 129 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Page_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 130 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 131 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SidebarGroup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 132 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Sidebar_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 133 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_SWUpdatePopup_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 134 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47);\n/* harmony import */ var _css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_css_loader_0_28_11_css_loader_locals_js_ref_8_oneOf_1_0_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_8_oneOf_1_1_prism_tomorrow_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 135 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_theme_styl_vue_type_style_index_1_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $at = __webpack_require__(137)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(64)(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(57);\nvar defined = __webpack_require__(16);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar strong = __webpack_require__(139);\nvar validate = __webpack_require__(88);\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = __webpack_require__(140)(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar dP = __webpack_require__(9).f;\nvar create = __webpack_require__(83);\nvar redefineAll = __webpack_require__(58);\nvar ctx = __webpack_require__(10);\nvar anInstance = __webpack_require__(54);\nvar forOf = __webpack_require__(55);\nvar $iterDefine = __webpack_require__(64);\nvar step = __webpack_require__(82);\nvar setSpecies = __webpack_require__(59);\nvar DESCRIPTORS = __webpack_require__(8);\nvar fastKey = __webpack_require__(63).fastKey;\nvar validate = __webpack_require__(88);\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global = __webpack_require__(3);\nvar $export = __webpack_require__(4);\nvar redefine = __webpack_require__(12);\nvar redefineAll = __webpack_require__(58);\nvar meta = __webpack_require__(63);\nvar forOf = __webpack_require__(55);\nvar anInstance = __webpack_require__(54);\nvar isObject = __webpack_require__(5);\nvar fails = __webpack_require__(6);\nvar $iterDetect = __webpack_require__(77);\nvar setToStringTag = __webpack_require__(24);\nvar inheritIfRequired = __webpack_require__(87);\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n\n\n/***/ }),\n/* 141 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_OutboundLink_vue_vue_type_style_index_0_lang_stylus___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n/* 142 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.promise.js\nvar es6_promise = __webpack_require__(69);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.assign.js\nvar es6_object_assign = __webpack_require__(25);\n\n// EXTERNAL MODULE: external \"vue\"\nvar external_vue_ = __webpack_require__(0);\nvar external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);\n\n// EXTERNAL MODULE: external \"vue-router\"\nvar external_vue_router_ = __webpack_require__(68);\nvar external_vue_router_default = /*#__PURE__*/__webpack_require__.n(external_vue_router_);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.freeze.js\nvar es6_object_freeze = __webpack_require__(103);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.iterator.js\nvar es6_array_iterator = __webpack_require__(19);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.keys.js\nvar es6_object_keys = __webpack_require__(29);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(17);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.for-each.js\nvar es6_array_for_each = __webpack_require__(30);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(65);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.filter.js\nvar es6_array_filter = __webpack_require__(32);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.index-of.js\nvar es6_array_index_of = __webpack_require__(66);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/arrayWithoutHoles.js\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/toConsumableArray.js\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/util.js\n\nfunction injectMixins(options, mixins) {\n  var _options$mixins;\n\n  if (!options.mixins) {\n    options.mixins = [];\n  }\n\n  (_options$mixins = options.mixins).push.apply(_options$mixins, _toConsumableArray(mixins));\n}\nfunction findPageForPath(pages, path) {\n  for (var i = 0; i < pages.length; i++) {\n    var page = pages[i];\n\n    if (page.path === path) {\n      return page;\n    }\n  }\n\n  return {\n    path: '',\n    frontmatter: {}\n  };\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/dataMixin.js\n\n\n\n\n\n\n\n\n\n\nfunction dataMixin(siteData) {\n  prepare(siteData);\n  var store = new external_vue_default.a({\n    data: {\n      siteData: siteData\n    }\n  });\n\n  if (false) {}\n\n  return {\n    computed: {\n      $site: function $site() {\n        return store.siteData;\n      },\n      $localeConfig: function $localeConfig() {\n        var _this$$site$locales = this.$site.locales,\n            locales = _this$$site$locales === void 0 ? {} : _this$$site$locales;\n        var targetLang;\n        var defaultLang;\n\n        for (var path in locales) {\n          if (path === '/') {\n            defaultLang = locales[path];\n          } else if (this.$page.path.indexOf(path) === 0) {\n            targetLang = locales[path];\n          }\n        }\n\n        return targetLang || defaultLang || {};\n      },\n      $siteTitle: function $siteTitle() {\n        return this.$localeConfig.title || this.$site.title || '';\n      },\n      $title: function $title() {\n        var page = this.$page;\n        var siteTitle = this.$siteTitle;\n        var selfTitle = page.frontmatter.home ? null : page.frontmatter.title || // explicit title\n        page.title // inferred title\n        ;\n        return siteTitle ? selfTitle ? selfTitle + ' | ' + siteTitle : siteTitle : selfTitle || 'VuePress';\n      },\n      $description: function $description() {\n        // #565 hoist description from meta\n        if (this.$page.frontmatter.meta) {\n          var descriptionMeta = this.$page.frontmatter.meta.filter(function (item) {\n            return item.name === 'description';\n          })[0];\n          if (descriptionMeta) return descriptionMeta.content;\n        }\n\n        return this.$page.frontmatter.description || this.$localeConfig.description || this.$site.description || '';\n      },\n      $lang: function $lang() {\n        return this.$page.frontmatter.lang || this.$localeConfig.lang || 'en-US';\n      },\n      $localePath: function $localePath() {\n        return this.$localeConfig.path || '/';\n      },\n      $themeLocaleConfig: function $themeLocaleConfig() {\n        return (this.$site.themeConfig.locales || {})[this.$localePath] || {};\n      },\n      $page: function $page() {\n        return findPageForPath(this.$site.pages, this.$route.path);\n      }\n    }\n  };\n}\n\nfunction prepare(siteData) {\n  siteData.pages.forEach(function (page) {\n    if (!page.frontmatter) {\n      page.frontmatter = {};\n    }\n  });\n\n  if (siteData.locales) {\n    Object.keys(siteData.locales).forEach(function (path) {\n      siteData.locales[path].path = path;\n    });\n  }\n\n  Object.freeze(siteData);\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/store.js\n// It is not yet time to use Vuex to manage the global state\n// singleton object as a global store.\nvar state = {\n  disableScrollBehavior: false\n};\n/* harmony default export */ var app_store = (state);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?vue&type=template&id=3da207fc&\nvar Layoutvue_type_template_id_3da207fc_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"theme-container\",class:_vm.pageClasses,on:{\"touchstart\":_vm.onTouchStart,\"touchend\":_vm.onTouchEnd}},[(_vm.shouldShowNavbar)?_c('Navbar',{on:{\"toggle-sidebar\":_vm.toggleSidebar}}):_vm._e(),_vm._ssrNode(\" <div class=\\\"sidebar-mask\\\"></div> \"),_c('Sidebar',{attrs:{\"items\":_vm.sidebarItems},on:{\"toggle-sidebar\":_vm.toggleSidebar}},[_vm._t(\"sidebar-top\",null,{slot:\"top\"}),_vm._v(\" \"),_vm._t(\"sidebar-bottom\",null,{slot:\"bottom\"})],2),_vm._ssrNode(\" \"),(_vm.$page.frontmatter.layout)?_vm._ssrNode(\"<div class=\\\"custom-layout\\\">\",\"</div>\",[_c(_vm.$page.frontmatter.layout,{tag:\"component\"})],1):(_vm.$page.frontmatter.home)?_c('Home'):_c('Page',{attrs:{\"sidebar-items\":_vm.sidebarItems}},[_vm._t(\"page-top\",null,{slot:\"top\"}),_vm._v(\" \"),_vm._t(\"page-bottom\",null,{slot:\"bottom\"})],2),_vm._ssrNode(\" \"),_c('SWUpdatePopup',{attrs:{\"updateEvent\":_vm.swUpdateEvent}})],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?vue&type=template&id=3da207fc&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_nprogress@0.2.0@nprogress/nprogress.js\nvar nprogress = __webpack_require__(50);\nvar nprogress_default = /*#__PURE__*/__webpack_require__.n(nprogress);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?vue&type=template&id=06612431&\nvar Homevue_type_template_id_06612431_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"home\"},[_vm._ssrNode(\"<div class=\\\"hero\\\">\",\"</div>\",[_vm._ssrNode(((_vm.data.heroImage)?(\"<img\"+(_vm._ssrAttr(\"src\",_vm.$withBase(_vm.data.heroImage)))+\" alt=\\\"hero\\\">\"):\"<!---->\")+\" <h1>\"+_vm._ssrEscape(_vm._s(_vm.data.heroText || _vm.$title || 'Hello'))+\"</h1> <p class=\\\"description\\\">\"+_vm._ssrEscape(\"\\n      \"+_vm._s(_vm.data.tagline || _vm.$description || 'Welcome to your VuePress site')+\"\\n    \")+\"</p> \"),(_vm.data.actionText && _vm.data.actionLink)?_vm._ssrNode(\"<p class=\\\"action\\\">\",\"</p>\",[_c('NavLink',{staticClass:\"action-button\",attrs:{\"item\":_vm.actionLink}})],1):_vm._e()],2),_vm._ssrNode(\" \"+((_vm.data.features && _vm.data.features.length)?(\"<div class=\\\"features\\\">\"+(_vm._ssrList((_vm.data.features),function(feature){return (\"<div class=\\\"feature\\\"><h2>\"+_vm._ssrEscape(_vm._s(feature.title))+\"</h2> <p>\"+_vm._ssrEscape(_vm._s(feature.details))+\"</p></div>\")}))+\"</div>\"):\"<!---->\")+\" \"),_c('Content',{attrs:{\"custom\":\"\"}}),_vm._ssrNode(\" \"+((_vm.data.footer)?(\"<div class=\\\"footer\\\">\"+_vm._ssrEscape(\"\\n    \"+_vm._s(_vm.data.footer)+\"\\n  \")+\"</div>\"):\"<!---->\"))],2)}\nvar Homevue_type_template_id_06612431_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?vue&type=template&id=06612431&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?vue&type=template&id=4d7db10e&\nvar NavLinkvue_type_template_id_4d7db10e_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.isExternal(_vm.link))?_c('router-link',{staticClass:\"nav-link\",attrs:{\"to\":_vm.link,\"exact\":_vm.exact}},[_vm._v(_vm._s(_vm.item.text))]):_c('a',{staticClass:\"nav-link external\",attrs:{\"href\":_vm.link,\"target\":_vm.isMailto(_vm.link) || _vm.isTel(_vm.link) ? null : '_blank',\"rel\":_vm.isMailto(_vm.link) || _vm.isTel(_vm.link) ? null : 'noopener noreferrer'}},[_vm._v(\"\\n  \"+_vm._s(_vm.item.text)+\"\\n  \"),_c('OutboundLink')],1)}\nvar NavLinkvue_type_template_id_4d7db10e_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?vue&type=template&id=4d7db10e&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.some.js\nvar es6_array_some = __webpack_require__(21);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.link.js\nvar es6_string_link = __webpack_require__(110);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.is-array.js\nvar es6_array_is_array = __webpack_require__(112);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.map.js\nvar es6_array_map = __webpack_require__(33);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(113);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.match.js\nvar es6_regexp_match = __webpack_require__(86);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(34);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/util.js\n\n\n\n\n\n\n\n\n\n\nvar hashRE = /#.*$/;\nvar extRE = /\\.(md|html)$/;\nvar endingSlashRE = /\\/$/;\nvar outboundRE = /^(https?:|mailto:|tel:)/;\nfunction normalize(path) {\n  return decodeURI(path).replace(hashRE, '').replace(extRE, '');\n}\nfunction getHash(path) {\n  var match = path.match(hashRE);\n\n  if (match) {\n    return match[0];\n  }\n}\nfunction isExternal(path) {\n  return outboundRE.test(path);\n}\nfunction isMailto(path) {\n  return /^mailto:/.test(path);\n}\nfunction isTel(path) {\n  return /^tel:/.test(path);\n}\nfunction ensureExt(path) {\n  if (isExternal(path)) {\n    return path;\n  }\n\n  var hashMatch = path.match(hashRE);\n  var hash = hashMatch ? hashMatch[0] : '';\n  var normalized = normalize(path);\n\n  if (endingSlashRE.test(normalized)) {\n    return path;\n  }\n\n  return normalized + '.html' + hash;\n}\nfunction util_isActive(route, path) {\n  var routeHash = route.hash;\n  var linkHash = getHash(path);\n\n  if (linkHash && routeHash !== linkHash) {\n    return false;\n  }\n\n  var routePath = normalize(route.path);\n  var pagePath = normalize(path);\n  return routePath === pagePath;\n}\nfunction resolvePage(pages, rawPath, base) {\n  if (base) {\n    rawPath = resolvePath(rawPath, base);\n  }\n\n  var path = normalize(rawPath);\n\n  for (var i = 0; i < pages.length; i++) {\n    if (normalize(pages[i].path) === path) {\n      return Object.assign({}, pages[i], {\n        type: 'page',\n        path: ensureExt(rawPath)\n      });\n    }\n  }\n\n  console.error(\"[vuepress] No matching page found for sidebar item \\\"\".concat(rawPath, \"\\\"\"));\n  return {};\n}\n\nfunction resolvePath(relative, base, append) {\n  var firstChar = relative.charAt(0);\n\n  if (firstChar === '/') {\n    return relative;\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative;\n  }\n\n  var stack = base.split('/'); // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  } // resolve relative path\n\n\n  var segments = relative.replace(/^\\//, '').split('/');\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  } // ensure leading slash\n\n\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/');\n}\n\nfunction resolveSidebarItems(page, route, site, localePath) {\n  var pages = site.pages,\n      themeConfig = site.themeConfig;\n  var localeConfig = localePath && themeConfig.locales ? themeConfig.locales[localePath] || themeConfig : themeConfig;\n  var pageSidebarConfig = page.frontmatter.sidebar || localeConfig.sidebar || themeConfig.sidebar;\n\n  if (pageSidebarConfig === 'auto') {\n    return resolveHeaders(page);\n  }\n\n  var sidebarConfig = localeConfig.sidebar || themeConfig.sidebar;\n\n  if (!sidebarConfig) {\n    return [];\n  } else {\n    var _resolveMatchingConfi = resolveMatchingConfig(route, sidebarConfig),\n        base = _resolveMatchingConfi.base,\n        config = _resolveMatchingConfi.config;\n\n    return config ? config.map(function (item) {\n      return resolveItem(item, pages, base);\n    }) : [];\n  }\n}\n\nfunction resolveHeaders(page) {\n  var headers = groupHeaders(page.headers || []);\n  return [{\n    type: 'group',\n    collapsable: false,\n    title: page.title,\n    children: headers.map(function (h) {\n      return {\n        type: 'auto',\n        title: h.title,\n        basePath: page.path,\n        path: page.path + '#' + h.slug,\n        children: h.children || []\n      };\n    })\n  }];\n}\n\nfunction groupHeaders(headers) {\n  // group h3s under h2\n  headers = headers.map(function (h) {\n    return Object.assign({}, h);\n  });\n  var lastH2;\n  headers.forEach(function (h) {\n    if (h.level === 2) {\n      lastH2 = h;\n    } else if (lastH2) {\n      (lastH2.children || (lastH2.children = [])).push(h);\n    }\n  });\n  return headers.filter(function (h) {\n    return h.level === 2;\n  });\n}\nfunction resolveNavLinkItem(linkItem) {\n  return Object.assign(linkItem, {\n    type: linkItem.items && linkItem.items.length ? 'links' : 'link'\n  });\n}\nfunction resolveMatchingConfig(route, config) {\n  if (Array.isArray(config)) {\n    return {\n      base: '/',\n      config: config\n    };\n  }\n\n  for (var base in config) {\n    if (ensureEndingSlash(route.path).indexOf(base) === 0) {\n      return {\n        base: base,\n        config: config[base]\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction ensureEndingSlash(path) {\n  return /(\\.html|\\/)$/.test(path) ? path : path + '/';\n}\n\nfunction resolveItem(item, pages, base, isNested) {\n  if (typeof item === 'string') {\n    return resolvePage(pages, item, base);\n  } else if (Array.isArray(item)) {\n    return Object.assign(resolvePage(pages, item[0], base), {\n      title: item[1]\n    });\n  } else {\n    if (isNested) {\n      console.error('[vuepress] Nested sidebar groups are not supported. ' + 'Consider using navbar + categories instead.');\n    }\n\n    var children = item.children || [];\n    return {\n      type: 'group',\n      title: item.title,\n      children: children.map(function (child) {\n        return resolveItem(child, pages, base, true);\n      }),\n      collapsable: item.collapsable !== false\n    };\n  }\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?vue&type=script&lang=js&\n\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var NavLinkvue_type_script_lang_js_ = ({\n  props: {\n    item: {\n      required: true\n    }\n  },\n  computed: {\n    link: function link() {\n      return ensureExt(this.item.link);\n    },\n    exact: function exact() {\n      var _this = this;\n\n      if (this.$site.locales) {\n        return Object.keys(this.$site.locales).some(function (rootLink) {\n          return rootLink === _this.link;\n        });\n      }\n\n      return this.link === '/';\n    }\n  },\n  methods: {\n    isExternal: isExternal,\n    isMailto: isMailto,\n    isTel: isTel\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_NavLinkvue_type_script_lang_js_ = (NavLinkvue_type_script_lang_js_); \n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_NavLinkvue_type_script_lang_js_,\n  NavLinkvue_type_template_id_4d7db10e_render,\n  NavLinkvue_type_template_id_4d7db10e_staticRenderFns,\n  false,\n  null,\n  null,\n  \"66179a98\"\n  \n)\n\ncomponent.options.__file = \"NavLink.vue\"\n/* harmony default export */ var NavLink = (component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var Homevue_type_script_lang_js_ = ({\n  components: {\n    NavLink: NavLink\n  },\n  computed: {\n    data: function data() {\n      return this.$page.frontmatter;\n    },\n    actionLink: function actionLink() {\n      return {\n        link: this.data.actionLink,\n        text: this.data.actionText\n      };\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_Homevue_type_script_lang_js_ = (Homevue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue\n\n\n\nfunction injectStyles (context) {\n  \n  var style0 = __webpack_require__(114)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar Home_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_Homevue_type_script_lang_js_,\n  Homevue_type_template_id_06612431_render,\n  Homevue_type_template_id_06612431_staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"5f03fd10\"\n  \n)\n\nHome_component.options.__file = \"Home.vue\"\n/* harmony default export */ var Home = (Home_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?vue&type=template&id=07d000ac&\nvar Navbarvue_type_template_id_07d000ac_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:\"navbar\"},[_c('SidebarButton',{on:{\"toggle-sidebar\":function($event){_vm.$emit('toggle-sidebar')}}}),_vm._ssrNode(\" \"),_c('router-link',{staticClass:\"home-link\",attrs:{\"to\":_vm.$localePath}},[(_vm.$site.themeConfig.logo)?_c('img',{staticClass:\"logo\",attrs:{\"src\":_vm.$withBase(_vm.$site.themeConfig.logo),\"alt\":_vm.$siteTitle}}):_vm._e(),_vm._v(\" \"),(_vm.$siteTitle)?_c('span',{ref:\"siteName\",staticClass:\"site-name\",class:{ 'can-hide': _vm.$site.themeConfig.logo }},[_vm._v(_vm._s(_vm.$siteTitle))]):_vm._e()]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"links\\\"\"+(_vm._ssrStyle(null,{\n      'max-width': _vm.linksWrapMaxWidth + 'px'\n    }, null))+\">\",\"</div>\",[(_vm.isAlgoliaSearch)?_c('AlgoliaSearchBox',{attrs:{\"options\":_vm.algolia}}):(_vm.$site.themeConfig.search !== false)?_c('SearchBox'):_vm._e(),_vm._ssrNode(\" \"),_c('NavLinks',{staticClass:\"can-hide\"})],2)],2)}\nvar Navbarvue_type_template_id_07d000ac_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?vue&type=template&id=07d000ac&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue?vue&type=template&id=07ab6e96&\nvar SidebarButtonvue_type_template_id_07ab6e96_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar-button\",on:{\"click\":function($event){_vm.$emit('toggle-sidebar')}}},[_vm._ssrNode(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 448 512\\\" class=\\\"icon\\\"><path fill=\\\"currentColor\\\" d=\\\"M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z\\\"></path></svg>\")])}\nvar SidebarButtonvue_type_template_id_07ab6e96_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue?vue&type=template&id=07ab6e96&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue\n\nvar script = {}\nfunction SidebarButton_injectStyles (context) {\n  \n  var style0 = __webpack_require__(115)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar SidebarButton_component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  SidebarButtonvue_type_template_id_07ab6e96_render,\n  SidebarButtonvue_type_template_id_07ab6e96_staticRenderFns,\n  false,\n  SidebarButton_injectStyles,\n  null,\n  \"2864d636\"\n  \n)\n\nSidebarButton_component.options.__file = \"SidebarButton.vue\"\n/* harmony default export */ var SidebarButton = (SidebarButton_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/webpack/noopModule.js\n/* harmony default export */ var noopModule = ({});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?vue&type=template&id=a25c4144&\nvar SearchBoxvue_type_template_id_a25c4144_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"search-box\"},[_vm._ssrNode(\"<input aria-label=\\\"Search\\\" autocomplete=\\\"off\\\" spellcheck=\\\"false\\\"\"+(_vm._ssrAttr(\"value\",_vm.query))+(_vm._ssrClass(null,{ 'focused': _vm.focused }))+\"> \"+((_vm.showSuggestions)?(\"<ul\"+(_vm._ssrClass(\"suggestions\",{ 'align-right': _vm.alignRight }))+\">\"+(_vm._ssrList((_vm.suggestions),function(s,i){return (\"<li\"+(_vm._ssrClass(\"suggestion\",{ focused: i === _vm.focusIndex }))+\"><a\"+(_vm._ssrAttr(\"href\",s.path))+\"><span class=\\\"page-title\\\">\"+_vm._ssrEscape(_vm._s(s.title || s.path))+\"</span> \"+((s.header)?(\"<span class=\\\"header\\\">\"+_vm._ssrEscape(\"> \"+_vm._s(s.header.title))+\"</span>\"):\"<!---->\")+\"</a></li>\")}))+\"</ul>\"):\"<!---->\"))])}\nvar SearchBoxvue_type_template_id_a25c4144_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?vue&type=template&id=a25c4144&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.trim.js\nvar es6_string_trim = __webpack_require__(116);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?vue&type=script&lang=js&\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ var SearchBoxvue_type_script_lang_js_ = ({\n  data: function data() {\n    return {\n      query: '',\n      focused: false,\n      focusIndex: 0\n    };\n  },\n  computed: {\n    showSuggestions: function showSuggestions() {\n      return this.focused && this.suggestions && this.suggestions.length;\n    },\n    suggestions: function suggestions() {\n      var query = this.query.trim().toLowerCase();\n\n      if (!query) {\n        return;\n      }\n\n      var _this$$site = this.$site,\n          pages = _this$$site.pages,\n          themeConfig = _this$$site.themeConfig;\n      var max = themeConfig.searchMaxSuggestions || 5;\n      var localePath = this.$localePath;\n\n      var matches = function matches(item) {\n        return item.title && item.title.toLowerCase().indexOf(query) > -1;\n      };\n\n      var res = [];\n\n      for (var i = 0; i < pages.length; i++) {\n        if (res.length >= max) break;\n        var p = pages[i]; // filter out results that do not match current locale\n\n        if (this.getPageLocalePath(p) !== localePath) {\n          continue;\n        }\n\n        if (matches(p)) {\n          res.push(p);\n        } else if (p.headers) {\n          for (var j = 0; j < p.headers.length; j++) {\n            if (res.length >= max) break;\n            var h = p.headers[j];\n\n            if (matches(h)) {\n              res.push(Object.assign({}, p, {\n                path: p.path + '#' + h.slug,\n                header: h\n              }));\n            }\n          }\n        }\n      }\n\n      return res;\n    },\n    // make suggestions align right when there are not enough items\n    alignRight: function alignRight() {\n      var navCount = (this.$site.themeConfig.nav || []).length;\n      var repo = this.$site.repo ? 1 : 0;\n      return navCount + repo <= 2;\n    }\n  },\n  methods: {\n    getPageLocalePath: function getPageLocalePath(page) {\n      for (var localePath in this.$site.locales || {}) {\n        if (localePath !== '/' && page.path.indexOf(localePath) === 0) {\n          return localePath;\n        }\n      }\n\n      return '/';\n    },\n    onUp: function onUp() {\n      if (this.showSuggestions) {\n        if (this.focusIndex > 0) {\n          this.focusIndex--;\n        } else {\n          this.focusIndex = this.suggestions.length - 1;\n        }\n      }\n    },\n    onDown: function onDown() {\n      if (this.showSuggestions) {\n        if (this.focusIndex < this.suggestions.length - 1) {\n          this.focusIndex++;\n        } else {\n          this.focusIndex = 0;\n        }\n      }\n    },\n    go: function go(i) {\n      if (!this.showSuggestions) {\n        return;\n      }\n\n      this.$router.push(this.suggestions[i].path);\n      this.query = '';\n      this.focusIndex = 0;\n    },\n    focus: function focus(i) {\n      this.focusIndex = i;\n    },\n    unfocus: function unfocus() {\n      this.focusIndex = -1;\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_SearchBoxvue_type_script_lang_js_ = (SearchBoxvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue\n\n\n\nfunction SearchBox_injectStyles (context) {\n  \n  var style0 = __webpack_require__(119)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar SearchBox_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_SearchBoxvue_type_script_lang_js_,\n  SearchBoxvue_type_template_id_a25c4144_render,\n  SearchBoxvue_type_template_id_a25c4144_staticRenderFns,\n  false,\n  SearchBox_injectStyles,\n  null,\n  \"41523f3a\"\n  \n)\n\nSearchBox_component.options.__file = \"SearchBox.vue\"\n/* harmony default export */ var SearchBox = (SearchBox_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?vue&type=template&id=2b07c402&\nvar NavLinksvue_type_template_id_2b07c402_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.userLinks.length || _vm.repoLink)?_c('nav',{staticClass:\"nav-links\"},[_vm._l((_vm.userLinks),function(item){return _vm._ssrNode(\"<div class=\\\"nav-item\\\">\",\"</div>\",[(item.type === 'links')?_c('DropdownLink',{attrs:{\"item\":item}}):_c('NavLink',{attrs:{\"item\":item}})],1)}),_vm._ssrNode(\" \"),(_vm.repoLink)?_vm._ssrNode(\"<a\"+(_vm._ssrAttr(\"href\",_vm.repoLink))+\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" class=\\\"repo-link\\\">\",\"</a>\",[_vm._ssrNode(_vm._ssrEscape(\"\\n    \"+_vm._s(_vm.repoLabel)+\"\\n    \")),_c('OutboundLink')],2):_vm._e()],2):_vm._e()}\nvar NavLinksvue_type_template_id_2b07c402_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?vue&type=template&id=2b07c402&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.constructor.js\nvar es6_regexp_constructor = __webpack_require__(120);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?vue&type=template&id=72e438d1&\nvar DropdownLinkvue_type_template_id_72e438d1_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dropdown-wrapper\",class:{ open: _vm.open }},[_vm._ssrNode(\"<a class=\\\"dropdown-title\\\"><span class=\\\"title\\\">\"+_vm._ssrEscape(_vm._s(_vm.item.text))+\"</span> <span\"+(_vm._ssrClass(\"arrow\",_vm.open ? 'down' : 'right'))+\"></span></a> \"),_c('DropdownTransition',[_c('ul',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.open),expression:\"open\"}],staticClass:\"nav-dropdown\"},_vm._l((_vm.item.items),function(subItem,index){return _c('li',{key:subItem.link || index,staticClass:\"dropdown-item\"},[(subItem.type === 'links')?_c('h4',[_vm._v(_vm._s(subItem.text))]):_vm._e(),_vm._v(\" \"),(subItem.type === 'links')?_c('ul',{staticClass:\"dropdown-subitem-wrapper\"},_vm._l((subItem.items),function(childSubItem){return _c('li',{key:childSubItem.link,staticClass:\"dropdown-subitem\"},[_c('NavLink',{attrs:{\"item\":childSubItem}})],1)})):_c('NavLink',{attrs:{\"item\":subItem}})],1)}))])],2)}\nvar DropdownLinkvue_type_template_id_72e438d1_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?vue&type=template&id=72e438d1&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?vue&type=template&id=9764533c&\nvar DropdownTransitionvue_type_template_id_9764533c_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"name\":\"dropdown\"},on:{\"enter\":_vm.setHeight,\"after-enter\":_vm.unsetHeight,\"before-leave\":_vm.setHeight}},[_vm._t(\"default\")],2)}\nvar DropdownTransitionvue_type_template_id_9764533c_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?vue&type=template&id=9764533c&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ var DropdownTransitionvue_type_script_lang_js_ = ({\n  name: 'DropdownTransition',\n  methods: {\n    setHeight: function setHeight(items) {\n      // explicitly set height so that it can be transitioned\n      items.style.height = items.scrollHeight + 'px';\n    },\n    unsetHeight: function unsetHeight(items) {\n      items.style.height = '';\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_DropdownTransitionvue_type_script_lang_js_ = (DropdownTransitionvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue\n\n\n\nfunction DropdownTransition_injectStyles (context) {\n  \n  var style0 = __webpack_require__(125)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar DropdownTransition_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_DropdownTransitionvue_type_script_lang_js_,\n  DropdownTransitionvue_type_template_id_9764533c_render,\n  DropdownTransitionvue_type_template_id_9764533c_staticRenderFns,\n  false,\n  DropdownTransition_injectStyles,\n  null,\n  \"424f379f\"\n  \n)\n\nDropdownTransition_component.options.__file = \"DropdownTransition.vue\"\n/* harmony default export */ var DropdownTransition = (DropdownTransition_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var DropdownLinkvue_type_script_lang_js_ = ({\n  components: {\n    NavLink: NavLink,\n    DropdownTransition: DropdownTransition\n  },\n  data: function data() {\n    return {\n      open: false\n    };\n  },\n  props: {\n    item: {\n      required: true\n    }\n  },\n  methods: {\n    toggle: function toggle() {\n      this.open = !this.open;\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_DropdownLinkvue_type_script_lang_js_ = (DropdownLinkvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue\n\n\n\nfunction DropdownLink_injectStyles (context) {\n  \n  var style0 = __webpack_require__(126)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar DropdownLink_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_DropdownLinkvue_type_script_lang_js_,\n  DropdownLinkvue_type_template_id_72e438d1_render,\n  DropdownLinkvue_type_template_id_72e438d1_staticRenderFns,\n  false,\n  DropdownLink_injectStyles,\n  null,\n  \"8e5aa578\"\n  \n)\n\nDropdownLink_component.options.__file = \"DropdownLink.vue\"\n/* harmony default export */ var DropdownLink = (DropdownLink_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var NavLinksvue_type_script_lang_js_ = ({\n  components: {\n    NavLink: NavLink,\n    DropdownLink: DropdownLink\n  },\n  computed: {\n    userNav: function userNav() {\n      return this.$themeLocaleConfig.nav || this.$site.themeConfig.nav || [];\n    },\n    nav: function nav() {\n      var _this = this;\n\n      var locales = this.$site.locales;\n\n      if (locales && Object.keys(locales).length > 1) {\n        var currentLink = this.$page.path;\n        var routes = this.$router.options.routes;\n        var themeLocales = this.$site.themeConfig.locales || {};\n        var languageDropdown = {\n          text: this.$themeLocaleConfig.selectText || 'Languages',\n          items: Object.keys(locales).map(function (path) {\n            var locale = locales[path];\n            var text = themeLocales[path] && themeLocales[path].label || locale.lang;\n            var link; // Stay on the current page\n\n            if (locale.lang === _this.$lang) {\n              link = currentLink;\n            } else {\n              // Try to stay on the same page\n              link = currentLink.replace(_this.$localeConfig.path, path); // fallback to homepage\n\n              if (!routes.some(function (route) {\n                return route.path === link;\n              })) {\n                link = path;\n              }\n            }\n\n            return {\n              text: text,\n              link: link\n            };\n          })\n        };\n        return _toConsumableArray(this.userNav).concat([languageDropdown]);\n      }\n\n      return this.userNav;\n    },\n    userLinks: function userLinks() {\n      return (this.nav || []).map(function (link) {\n        return Object.assign(resolveNavLinkItem(link), {\n          items: (link.items || []).map(resolveNavLinkItem)\n        });\n      });\n    },\n    repoLink: function repoLink() {\n      var repo = this.$site.themeConfig.repo;\n\n      if (repo) {\n        return /^https?:/.test(repo) ? repo : \"https://github.com/\".concat(repo);\n      }\n    },\n    repoLabel: function repoLabel() {\n      if (!this.repoLink) return;\n\n      if (this.$site.themeConfig.repoLabel) {\n        return this.$site.themeConfig.repoLabel;\n      }\n\n      var repoHost = this.repoLink.match(/^https?:\\/\\/[^/]+/)[0];\n      var platforms = ['GitHub', 'GitLab', 'Bitbucket'];\n\n      for (var i = 0; i < platforms.length; i++) {\n        var platform = platforms[i];\n\n        if (new RegExp(platform, 'i').test(repoHost)) {\n          return platform;\n        }\n      }\n\n      return 'Source';\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_NavLinksvue_type_script_lang_js_ = (NavLinksvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue\n\n\n\nfunction NavLinks_injectStyles (context) {\n  \n  var style0 = __webpack_require__(127)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar NavLinks_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_NavLinksvue_type_script_lang_js_,\n  NavLinksvue_type_template_id_2b07c402_render,\n  NavLinksvue_type_template_id_2b07c402_staticRenderFns,\n  false,\n  NavLinks_injectStyles,\n  null,\n  \"55847622\"\n  \n)\n\nNavLinks_component.options.__file = \"NavLinks.vue\"\n/* harmony default export */ var NavLinks = (NavLinks_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var Navbarvue_type_script_lang_js_ = ({\n  components: {\n    SidebarButton: SidebarButton,\n    NavLinks: NavLinks,\n    SearchBox: SearchBox,\n    AlgoliaSearchBox: noopModule\n  },\n  data: function data() {\n    return {\n      linksWrapMaxWidth: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var MOBILE_DESKTOP_BREAKPOINT = 719; // refer to config.styl\n\n    var NAVBAR_VERTICAL_PADDING = parseInt(css(this.$el, 'paddingLeft')) + parseInt(css(this.$el, 'paddingRight'));\n\n    var handleLinksWrapWidth = function handleLinksWrapWidth() {\n      if (document.documentElement.clientWidth < MOBILE_DESKTOP_BREAKPOINT) {\n        _this.linksWrapMaxWidth = null;\n      } else {\n        _this.linksWrapMaxWidth = _this.$el.offsetWidth - NAVBAR_VERTICAL_PADDING - (_this.$refs.siteName && _this.$refs.siteName.offsetWidth || 0);\n      }\n    };\n\n    handleLinksWrapWidth();\n    window.addEventListener('resize', handleLinksWrapWidth, false);\n  },\n  computed: {\n    algolia: function algolia() {\n      return this.$themeLocaleConfig.algolia || this.$site.themeConfig.algolia || {};\n    },\n    isAlgoliaSearch: function isAlgoliaSearch() {\n      return this.algolia && this.algolia.apiKey && this.algolia.indexName;\n    }\n  }\n});\n\nfunction css(el, property) {\n  // NOTE: Known bug, will return 'auto' if style value is 'auto'\n  var win = el.ownerDocument.defaultView; // null means not to return pseudo styles\n\n  return win.getComputedStyle(el, null)[property];\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_Navbarvue_type_script_lang_js_ = (Navbarvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue\n\n\n\nfunction Navbar_injectStyles (context) {\n  \n  var style0 = __webpack_require__(128)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar Navbar_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_Navbarvue_type_script_lang_js_,\n  Navbarvue_type_template_id_07d000ac_render,\n  Navbarvue_type_template_id_07d000ac_staticRenderFns,\n  false,\n  Navbar_injectStyles,\n  null,\n  \"b436682e\"\n  \n)\n\nNavbar_component.options.__file = \"Navbar.vue\"\n/* harmony default export */ var Navbar = (Navbar_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?vue&type=template&id=4f4e45d3&\nvar Pagevue_type_template_id_4f4e45d3_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page\"},[_vm._t(\"top\"),_vm._ssrNode(\" \"),_c('Content',{attrs:{\"custom\":false}}),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"page-edit\\\">\",\"</div>\",[(_vm.editLink)?_vm._ssrNode(\"<div class=\\\"edit-link\\\">\",\"</div>\",[_vm._ssrNode(\"<a\"+(_vm._ssrAttr(\"href\",_vm.editLink))+\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\"+_vm._ssrEscape(_vm._s(_vm.editLinkText))+\"</a> \"),_c('OutboundLink')],2):_vm._e(),_vm._ssrNode(\" \"+((_vm.lastUpdated)?(\"<div class=\\\"last-updated\\\"><span class=\\\"prefix\\\">\"+_vm._ssrEscape(_vm._s(_vm.lastUpdatedText)+\": \")+\"</span> <span class=\\\"time\\\">\"+_vm._ssrEscape(_vm._s(_vm.lastUpdated))+\"</span></div>\"):\"<!---->\"))],2),_vm._ssrNode(\" \"),(_vm.prev || _vm.next)?_vm._ssrNode(\"<div class=\\\"page-nav\\\">\",\"</div>\",[_vm._ssrNode(\"<p class=\\\"inner\\\">\",\"</p>\",[(_vm.prev)?_vm._ssrNode(\"<span class=\\\"prev\\\">\",\"</span>\",[_vm._ssrNode(\"\\n        ←\\n        \"),(_vm.prev)?_c('router-link',{staticClass:\"prev\",attrs:{\"to\":_vm.prev.path}},[_vm._v(\"\\n          \"+_vm._s(_vm.prev.title || _vm.prev.path)+\"\\n        \")]):_vm._e()],2):_vm._e(),_vm._ssrNode(\" \"),(_vm.next)?_vm._ssrNode(\"<span class=\\\"next\\\">\",\"</span>\",[(_vm.next)?_c('router-link',{attrs:{\"to\":_vm.next.path}},[_vm._v(\"\\n          \"+_vm._s(_vm.next.title || _vm.next.path)+\"\\n        \")]):_vm._e(),_vm._ssrNode(\"\\n        →\\n      \")],2):_vm._e()],2)]):_vm._e(),_vm._ssrNode(\" \"),_vm._t(\"bottom\")],2)}\nvar Pagevue_type_template_id_4f4e45d3_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?vue&type=template&id=4f4e45d3&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?vue&type=script&lang=js&\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var Pagevue_type_script_lang_js_ = ({\n  props: ['sidebarItems'],\n  computed: {\n    lastUpdated: function lastUpdated() {\n      if (this.$page.lastUpdated) {\n        return new Date(this.$page.lastUpdated).toLocaleString(this.$lang);\n      }\n    },\n    lastUpdatedText: function lastUpdatedText() {\n      if (typeof this.$themeLocaleConfig.lastUpdated === 'string') {\n        return this.$themeLocaleConfig.lastUpdated;\n      }\n\n      if (typeof this.$site.themeConfig.lastUpdated === 'string') {\n        return this.$site.themeConfig.lastUpdated;\n      }\n\n      return 'Last Updated';\n    },\n    prev: function prev() {\n      var prev = this.$page.frontmatter.prev;\n\n      if (prev === false) {\n        return;\n      } else if (prev) {\n        return resolvePage(this.$site.pages, prev, this.$route.path);\n      } else {\n        return resolvePrev(this.$page, this.sidebarItems);\n      }\n    },\n    next: function next() {\n      var next = this.$page.frontmatter.next;\n\n      if (next === false) {\n        return;\n      } else if (next) {\n        return resolvePage(this.$site.pages, next, this.$route.path);\n      } else {\n        return resolveNext(this.$page, this.sidebarItems);\n      }\n    },\n    editLink: function editLink() {\n      if (this.$page.frontmatter.editLink === false) {\n        return;\n      }\n\n      var _this$$site$themeConf = this.$site.themeConfig,\n          repo = _this$$site$themeConf.repo,\n          editLinks = _this$$site$themeConf.editLinks,\n          _this$$site$themeConf2 = _this$$site$themeConf.docsDir,\n          docsDir = _this$$site$themeConf2 === void 0 ? '' : _this$$site$themeConf2,\n          _this$$site$themeConf3 = _this$$site$themeConf.docsBranch,\n          docsBranch = _this$$site$themeConf3 === void 0 ? 'master' : _this$$site$themeConf3,\n          _this$$site$themeConf4 = _this$$site$themeConf.docsRepo,\n          docsRepo = _this$$site$themeConf4 === void 0 ? repo : _this$$site$themeConf4;\n      var path = normalize(this.$page.path);\n\n      if (endingSlashRE.test(path)) {\n        path += 'README.md';\n      } else {\n        path += '.md';\n      }\n\n      if (docsRepo && editLinks) {\n        return this.createEditLink(repo, docsRepo, docsDir, docsBranch, path);\n      }\n    },\n    editLinkText: function editLinkText() {\n      return this.$themeLocaleConfig.editLinkText || this.$site.themeConfig.editLinkText || \"Edit this page\";\n    }\n  },\n  methods: {\n    createEditLink: function createEditLink(repo, docsRepo, docsDir, docsBranch, path) {\n      var bitbucket = /bitbucket.org/;\n\n      if (bitbucket.test(repo)) {\n        var _base = outboundRE.test(docsRepo) ? docsRepo : repo;\n\n        return _base.replace(endingSlashRE, '') + \"/\".concat(docsBranch) + (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') + path + \"?mode=edit&spa=0&at=\".concat(docsBranch, \"&fileviewer=file-view-default\");\n      }\n\n      var base = outboundRE.test(docsRepo) ? docsRepo : \"https://github.com/\".concat(docsRepo);\n      return base.replace(endingSlashRE, '') + \"/edit/\".concat(docsBranch) + (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') + path;\n    }\n  }\n});\n\nfunction resolvePrev(page, items) {\n  return find(page, items, -1);\n}\n\nfunction resolveNext(page, items) {\n  return find(page, items, 1);\n}\n\nfunction find(page, items, offset) {\n  var res = [];\n  items.forEach(function (item) {\n    if (item.type === 'group') {\n      res.push.apply(res, _toConsumableArray(item.children || []));\n    } else {\n      res.push(item);\n    }\n  });\n\n  for (var i = 0; i < res.length; i++) {\n    var cur = res[i];\n\n    if (cur.type === 'page' && cur.path === page.path) {\n      return res[i + offset];\n    }\n  }\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_Pagevue_type_script_lang_js_ = (Pagevue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue\n\n\n\nfunction Page_injectStyles (context) {\n  \n  var style0 = __webpack_require__(129)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar Page_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_Pagevue_type_script_lang_js_,\n  Pagevue_type_template_id_4f4e45d3_render,\n  Pagevue_type_template_id_4f4e45d3_staticRenderFns,\n  false,\n  Page_injectStyles,\n  null,\n  \"20b31728\"\n  \n)\n\nPage_component.options.__file = \"Page.vue\"\n/* harmony default export */ var Page = (Page_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?vue&type=template&id=1819e340&\nvar Sidebarvue_type_template_id_1819e340_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar\"},[_c('NavLinks'),_vm._ssrNode(\" \"),_vm._t(\"top\"),_vm._ssrNode(\" \"),(_vm.items.length)?_vm._ssrNode(\"<ul class=\\\"sidebar-links\\\">\",\"</ul>\",_vm._l((_vm.items),function(item,i){return _vm._ssrNode(\"<li>\",\"</li>\",[(item.type === 'group')?_c('SidebarGroup',{attrs:{\"item\":item,\"first\":i === 0,\"open\":i === _vm.openGroupIndex,\"collapsable\":item.collapsable || item.collapsible},on:{\"toggle\":function($event){_vm.toggleGroup(i)}}}):_c('SidebarLink',{attrs:{\"item\":item}})],1)})):_vm._e(),_vm._ssrNode(\" \"),_vm._t(\"bottom\")],2)}\nvar Sidebarvue_type_template_id_1819e340_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?vue&type=template&id=1819e340&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?vue&type=template&id=5965c733&\nvar SidebarGroupvue_type_template_id_5965c733_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar-group\",class:{ first: _vm.first, collapsable: _vm.collapsable }},[_vm._ssrNode(\"<p\"+(_vm._ssrClass(\"sidebar-heading\",{ open: _vm.open }))+\"><span>\"+_vm._ssrEscape(_vm._s(_vm.item.title))+\"</span> \"+((_vm.collapsable)?(\"<span\"+(_vm._ssrClass(\"arrow\",_vm.open ? 'down' : 'right'))+\"></span>\"):\"<!---->\")+\"</p> \"),_c('DropdownTransition',[(_vm.open || !_vm.collapsable)?_c('ul',{ref:\"items\",staticClass:\"sidebar-group-items\"},_vm._l((_vm.item.children),function(child){return _c('li',[_c('SidebarLink',{attrs:{\"item\":child}})],1)})):_vm._e()])],2)}\nvar SidebarGroupvue_type_template_id_5965c733_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?vue&type=template&id=5965c733&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue?vue&type=script&lang=js&\n\n\n\n/* harmony default export */ var SidebarLinkvue_type_script_lang_js_ = ({\n  functional: true,\n  props: ['item'],\n  render: function render(h, _ref) {\n    var _ref$parent = _ref.parent,\n        $page = _ref$parent.$page,\n        $site = _ref$parent.$site,\n        $route = _ref$parent.$route,\n        item = _ref.props.item;\n    // use custom active class matching logic\n    // due to edge case of paths ending with / + hash\n    var selfActive = util_isActive($route, item.path); // for sidebar: auto pages, a hash link should be active if one of its child\n    // matches\n\n    var active = item.type === 'auto' ? selfActive || item.children.some(function (c) {\n      return util_isActive($route, item.basePath + '#' + c.slug);\n    }) : selfActive;\n    var link = renderLink(h, item.path, item.title || item.path, active);\n    var configDepth = $page.frontmatter.sidebarDepth != null ? $page.frontmatter.sidebarDepth : $site.themeConfig.sidebarDepth;\n    var maxDepth = configDepth == null ? 1 : configDepth;\n    var displayAllHeaders = !!$site.themeConfig.displayAllHeaders;\n\n    if (item.type === 'auto') {\n      return [link, renderChildren(h, item.children, item.basePath, $route, maxDepth)];\n    } else if ((active || displayAllHeaders) && item.headers && !hashRE.test(item.path)) {\n      var children = groupHeaders(item.headers);\n      return [link, renderChildren(h, children, item.path, $route, maxDepth)];\n    } else {\n      return link;\n    }\n  }\n});\n\nfunction renderLink(h, to, text, active) {\n  return h('router-link', {\n    props: {\n      to: to,\n      activeClass: '',\n      exactActiveClass: ''\n    },\n    class: {\n      active: active,\n      'sidebar-link': true\n    }\n  }, text);\n}\n\nfunction renderChildren(h, children, path, route, maxDepth) {\n  var depth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  if (!children || depth > maxDepth) return null;\n  return h('ul', {\n    class: 'sidebar-sub-headers'\n  }, children.map(function (c) {\n    var active = util_isActive(route, path + '#' + c.slug);\n    return h('li', {\n      class: 'sidebar-sub-header'\n    }, [renderLink(h, path + '#' + c.slug, c.title, active), renderChildren(h, c.children, path, route, maxDepth, depth + 1)]);\n  }));\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_SidebarLinkvue_type_script_lang_js_ = (SidebarLinkvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue\nvar SidebarLink_render, SidebarLink_staticRenderFns\n\n\nfunction SidebarLink_injectStyles (context) {\n  \n  var style0 = __webpack_require__(130)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar SidebarLink_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_SidebarLinkvue_type_script_lang_js_,\n  SidebarLink_render,\n  SidebarLink_staticRenderFns,\n  false,\n  SidebarLink_injectStyles,\n  null,\n  \"64467726\"\n  \n)\n\nSidebarLink_component.options.__file = \"SidebarLink.vue\"\n/* harmony default export */ var SidebarLink = (SidebarLink_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var SidebarGroupvue_type_script_lang_js_ = ({\n  name: 'SidebarGroup',\n  props: ['item', 'first', 'open', 'collapsable'],\n  components: {\n    SidebarLink: SidebarLink,\n    DropdownTransition: DropdownTransition\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_SidebarGroupvue_type_script_lang_js_ = (SidebarGroupvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue\n\n\n\nfunction SidebarGroup_injectStyles (context) {\n  \n  var style0 = __webpack_require__(131)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar SidebarGroup_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_SidebarGroupvue_type_script_lang_js_,\n  SidebarGroupvue_type_template_id_5965c733_render,\n  SidebarGroupvue_type_template_id_5965c733_staticRenderFns,\n  false,\n  SidebarGroup_injectStyles,\n  null,\n  \"0e6f83c8\"\n  \n)\n\nSidebarGroup_component.options.__file = \"SidebarGroup.vue\"\n/* harmony default export */ var SidebarGroup = (SidebarGroup_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var Sidebarvue_type_script_lang_js_ = ({\n  components: {\n    SidebarGroup: SidebarGroup,\n    SidebarLink: SidebarLink,\n    NavLinks: NavLinks\n  },\n  props: ['items'],\n  data: function data() {\n    return {\n      openGroupIndex: 0\n    };\n  },\n  created: function created() {\n    this.refreshIndex();\n  },\n  watch: {\n    '$route': function $route() {\n      this.refreshIndex();\n    }\n  },\n  methods: {\n    refreshIndex: function refreshIndex() {\n      var index = resolveOpenGroupIndex(this.$route, this.items);\n\n      if (index > -1) {\n        this.openGroupIndex = index;\n      }\n    },\n    toggleGroup: function toggleGroup(index) {\n      this.openGroupIndex = index === this.openGroupIndex ? -1 : index;\n    },\n    isActive: function isActive(page) {\n      return util_isActive(this.$route, page.path);\n    }\n  }\n});\n\nfunction resolveOpenGroupIndex(route, items) {\n  for (var i = 0; i < items.length; i++) {\n    var item = items[i];\n\n    if (item.type === 'group' && item.children.some(function (c) {\n      return util_isActive(route, c.path);\n    })) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_Sidebarvue_type_script_lang_js_ = (Sidebarvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue\n\n\n\nfunction Sidebar_injectStyles (context) {\n  \n  var style0 = __webpack_require__(132)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar Sidebar_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_Sidebarvue_type_script_lang_js_,\n  Sidebarvue_type_template_id_1819e340_render,\n  Sidebarvue_type_template_id_1819e340_staticRenderFns,\n  false,\n  Sidebar_injectStyles,\n  null,\n  \"f0665a5a\"\n  \n)\n\nSidebar_component.options.__file = \"Sidebar.vue\"\n/* harmony default export */ var Sidebar = (Sidebar_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?vue&type=template&id=6685e944&\nvar SWUpdatePopupvue_type_template_id_6685e944_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"name\":\"sw-update-popup\"}},[(_vm.enabled)?_c('div',{staticClass:\"sw-update-popup\"},[_vm._v(\"\\n    \"+_vm._s(_vm.message)),_c('br'),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.reload}},[_vm._v(_vm._s(_vm.buttonText))])]):_vm._e()])}\nvar SWUpdatePopupvue_type_template_id_6685e944_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?vue&type=template&id=6685e944&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/typeof.js\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ var SWUpdatePopupvue_type_script_lang_js_ = ({\n  props: {\n    updateEvent: {\n      type: Object,\n      default: null\n    }\n  },\n  computed: {\n    popupConfig: function popupConfig() {\n      var _arr = [this.$themeLocaleConfig, this.$site.themeConfig];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var config = _arr[_i];\n        var sw = config.serviceWorker;\n\n        if (sw && sw.updatePopup) {\n          return _typeof(sw.updatePopup) === 'object' ? sw.updatePopup : {};\n        }\n      }\n\n      return null;\n    },\n    enabled: function enabled() {\n      return Boolean(this.popupConfig && this.updateEvent);\n    },\n    message: function message() {\n      var c = this.popupConfig;\n      return c && c.message || 'New content is available.';\n    },\n    buttonText: function buttonText() {\n      var c = this.popupConfig;\n      return c && c.buttonText || 'Refresh';\n    }\n  },\n  methods: {\n    reload: function reload() {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(function () {\n          location.reload(true);\n        });\n        this.updateEvent = null;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_SWUpdatePopupvue_type_script_lang_js_ = (SWUpdatePopupvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue\n\n\n\nfunction SWUpdatePopup_injectStyles (context) {\n  \n  var style0 = __webpack_require__(133)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar SWUpdatePopup_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_SWUpdatePopupvue_type_script_lang_js_,\n  SWUpdatePopupvue_type_template_id_6685e944_render,\n  SWUpdatePopupvue_type_template_id_6685e944_staticRenderFns,\n  false,\n  SWUpdatePopup_injectStyles,\n  null,\n  \"a2ee8194\"\n  \n)\n\nSWUpdatePopup_component.options.__file = \"SWUpdatePopup.vue\"\n/* harmony default export */ var SWUpdatePopup = (SWUpdatePopup_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var Layoutvue_type_script_lang_js_ = ({\n  components: {\n    Home: Home,\n    Page: Page,\n    Sidebar: Sidebar,\n    Navbar: Navbar,\n    SWUpdatePopup: SWUpdatePopup\n  },\n  data: function data() {\n    return {\n      isSidebarOpen: false,\n      swUpdateEvent: null\n    };\n  },\n  computed: {\n    shouldShowNavbar: function shouldShowNavbar() {\n      var themeConfig = this.$site.themeConfig;\n      var frontmatter = this.$page.frontmatter;\n\n      if (frontmatter.navbar === false || themeConfig.navbar === false) {\n        return false;\n      }\n\n      return this.$title || themeConfig.logo || themeConfig.repo || themeConfig.nav || this.$themeLocaleConfig.nav;\n    },\n    shouldShowSidebar: function shouldShowSidebar() {\n      var frontmatter = this.$page.frontmatter;\n      return !frontmatter.layout && !frontmatter.home && frontmatter.sidebar !== false && this.sidebarItems.length;\n    },\n    sidebarItems: function sidebarItems() {\n      return resolveSidebarItems(this.$page, this.$route, this.$site, this.$localePath);\n    },\n    pageClasses: function pageClasses() {\n      var userPageClass = this.$page.frontmatter.pageClass;\n      return [{\n        'no-navbar': !this.shouldShowNavbar,\n        'sidebar-open': this.isSidebarOpen,\n        'no-sidebar': !this.shouldShowSidebar\n      }, userPageClass];\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    window.addEventListener('scroll', this.onScroll); // configure progress bar\n\n    nprogress_default.a.configure({\n      showSpinner: false\n    });\n    this.$router.beforeEach(function (to, from, next) {\n      if (to.path !== from.path && !external_vue_default.a.component(to.name)) {\n        nprogress_default.a.start();\n      }\n\n      next();\n    });\n    this.$router.afterEach(function () {\n      nprogress_default.a.done();\n      _this.isSidebarOpen = false;\n    });\n    this.$on('sw-updated', this.onSWUpdated);\n  },\n  methods: {\n    toggleSidebar: function toggleSidebar(to) {\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen;\n    },\n    // side swipe\n    onTouchStart: function onTouchStart(e) {\n      this.touchStart = {\n        x: e.changedTouches[0].clientX,\n        y: e.changedTouches[0].clientY\n      };\n    },\n    onTouchEnd: function onTouchEnd(e) {\n      var dx = e.changedTouches[0].clientX - this.touchStart.x;\n      var dy = e.changedTouches[0].clientY - this.touchStart.y;\n\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\n        if (dx > 0 && this.touchStart.x <= 80) {\n          this.toggleSidebar(true);\n        } else {\n          this.toggleSidebar(false);\n        }\n      }\n    },\n    onSWUpdated: function onSWUpdated(e) {\n      this.swUpdateEvent = e;\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_Layoutvue_type_script_lang_js_ = (Layoutvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue\n\n\n\nfunction Layout_injectStyles (context) {\n  \n  var style0 = __webpack_require__(134)\nif (style0.__inject__) style0.__inject__(context)\nvar style1 = __webpack_require__(135)\nif (style1.__inject__) style1.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar Layout_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_Layoutvue_type_script_lang_js_,\n  Layoutvue_type_template_id_3da207fc_render,\n  staticRenderFns,\n  false,\n  Layout_injectStyles,\n  null,\n  \"7238e3fa\"\n  \n)\n\nLayout_component.options.__file = \"Layout.vue\"\n/* harmony default export */ var Layout = (Layout_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?vue&type=template&id=07f7ea58&\nvar NotFoundvue_type_template_id_07f7ea58_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"theme-container\"},[_vm._ssrNode(\"<div class=\\\"content\\\">\",\"</div>\",[_vm._ssrNode(\"<h1>404</h1> <blockquote>\"+_vm._ssrEscape(_vm._s(_vm.getMsg()))+\"</blockquote> \"),_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Take me home.\")])],2)])}\nvar NotFoundvue_type_template_id_07f7ea58_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?vue&type=template&id=07f7ea58&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar msgs = [\"There's nothing here.\", \"How did we get here?\", \"That's a Four-Oh-Four.\", \"Looks like we've got some broken links.\"];\n/* harmony default export */ var NotFoundvue_type_script_lang_js_ = ({\n  methods: {\n    getMsg: function getMsg() {\n      return msgs[Math.floor(Math.random() * msgs.length)];\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?vue&type=script&lang=js&\n /* harmony default export */ var default_theme_NotFoundvue_type_script_lang_js_ = (NotFoundvue_type_script_lang_js_); \n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue\n\n\n\n\n\n/* normalize component */\n\nvar NotFound_component = Object(componentNormalizer[\"a\" /* default */])(\n  default_theme_NotFoundvue_type_script_lang_js_,\n  NotFoundvue_type_template_id_07f7ea58_render,\n  NotFoundvue_type_template_id_07f7ea58_staticRenderFns,\n  false,\n  null,\n  null,\n  \"7d6fe488\"\n  \n)\n\nNotFound_component.options.__file = \"NotFound.vue\"\n/* harmony default export */ var NotFound = (NotFound_component.exports);\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.iterator.js\nvar es6_string_iterator = __webpack_require__(136);\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.set.js\nvar es6_set = __webpack_require__(138);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/root-mixins/updateMeta.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var updateMeta = ({\n  created: function created() {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title;\n      this.$ssrContext.lang = this.$lang;\n      this.$ssrContext.description = this.$page.description || this.$description;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // update title / meta tags\n    this.currentMetaTags = new Set();\n\n    var updateMeta = function updateMeta() {\n      document.title = _this.$title;\n      document.documentElement.lang = _this.$lang;\n      var userMeta = _this.$page.frontmatter.meta || [];\n      var meta = userMeta.slice(0);\n      var useGlobalDescription = userMeta.filter(function (m) {\n        return m.name === 'description';\n      }).length === 0; // #665 Avoid duplicate description meta at runtime.\n\n      if (useGlobalDescription) {\n        meta.push({\n          name: 'description',\n          content: _this.$description\n        });\n      } // Including description meta coming from SSR.\n\n\n      var descriptionMetas = document.querySelectorAll('meta[name=\"description\"]');\n\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(function (m) {\n          return _this.currentMetaTags.add(m);\n        });\n      }\n\n      _this.currentMetaTags = new Set(updateMetaTags(meta, _this.currentMetaTags));\n    };\n\n    this.$watch('$page', updateMeta);\n    updateMeta();\n  },\n  beforeDestroy: function beforeDestroy() {\n    updateMetaTags(null, this.currentMetaTags);\n  }\n});\n\nfunction updateMetaTags(meta, current) {\n  if (current) {\n    _toConsumableArray(current).forEach(function (c) {\n      document.head.removeChild(c);\n    });\n  }\n\n  if (meta) {\n    return meta.map(function (m) {\n      var tag = document.createElement('meta');\n      Object.keys(m).forEach(function (key) {\n        tag.setAttribute(key, m[key]);\n      });\n      document.head.appendChild(tag);\n      return tag;\n    });\n  }\n}\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_lodash.throttle@4.1.1@lodash.throttle/index.js\nvar _lodash_throttle_4_1_1_lodash_throttle = __webpack_require__(89);\nvar _lodash_throttle_4_1_1_lodash_throttle_default = /*#__PURE__*/__webpack_require__.n(_lodash_throttle_4_1_1_lodash_throttle);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/root-mixins/activeHeaderLinks.js\n\n\n\n\n\n/* harmony default export */ var activeHeaderLinks = ({\n  mounted: function mounted() {\n    window.addEventListener('scroll', this.onScroll);\n  },\n  methods: {\n    onScroll: _lodash_throttle_4_1_1_lodash_throttle_default()(function () {\n      this.setActiveHash();\n    }, 300),\n    setActiveHash: function setActiveHash() {\n      var _this = this;\n\n      var sidebarLinks = [].slice.call(document.querySelectorAll('.sidebar-link'));\n      var anchors = [].slice.call(document.querySelectorAll('.header-anchor')).filter(function (anchor) {\n        return sidebarLinks.some(function (sidebarLink) {\n          return sidebarLink.hash === anchor.hash;\n        });\n      });\n      var scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);\n\n      for (var i = 0; i < anchors.length; i++) {\n        var anchor = anchors[i];\n        var nextAnchor = anchors[i + 1];\n        var isActive = i === 0 && scrollTop === 0 || scrollTop >= anchor.parentElement.offsetTop + 10 && (!nextAnchor || scrollTop < nextAnchor.parentElement.offsetTop - 10);\n\n        if (isActive && decodeURIComponent(this.$route.hash) !== decodeURIComponent(anchor.hash)) {\n          app_store.disableScrollBehavior = true;\n          this.$router.replace(decodeURIComponent(anchor.hash), function () {\n            // execute after scrollBehavior handler.\n            _this.$nextTick(function () {\n              app_store.disableScrollBehavior = false;\n            });\n          });\n          return;\n        }\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('scroll', this.onScroll);\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/root-mixins/index.js\n\n\n/* harmony default export */ var root_mixins = ([updateMeta, // required\nactiveHeaderLinks // optional\n]);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/.temp/routes.js\n\n\n\n\n\ninjectMixins(Layout, root_mixins);\ninjectMixins(NotFound, root_mixins);\nvar routes_routes = [{\n  name: \"v-5067e9249bd5\",\n  path: \"/\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 181)).then(function (comp) {\n      external_vue_default.a.component(\"v-5067e9249bd5\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/index.html\",\n  redirect: \"/\"\n}, {\n  name: \"v-fcdbfc2434362\",\n  path: \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 4).then(__webpack_require__.bind(null, 183)).then(function (comp) {\n      external_vue_default.a.component(\"v-fcdbfc2434362\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/CSS/CSS权重规则.html\",\n  redirect: \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\"\n}, {\n  name: \"v-f851df6bb2f4a\",\n  path: \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 5).then(__webpack_require__.bind(null, 184)).then(function (comp) {\n      external_vue_default.a.component(\"v-f851df6bb2f4a\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/CSS/CSS概念-BFC深入浅出.html\",\n  redirect: \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\"\n}, {\n  name: \"v-ddba404cf15bf\",\n  path: \"/accumulate/JS/Object.defineProperty.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 6).then(__webpack_require__.bind(null, 186)).then(function (comp) {\n      external_vue_default.a.component(\"v-ddba404cf15bf\", comp.default);\n      next();\n    });\n  }\n}, {\n  name: \"v-e2825bfa2222b\",\n  path: \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 7).then(__webpack_require__.bind(null, 187)).then(function (comp) {\n      external_vue_default.a.component(\"v-e2825bfa2222b\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/cookie和storage的使用以及区别.html\",\n  redirect: \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\"\n}, {\n  name: \"v-861b2503133db\",\n  path: \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 8).then(__webpack_require__.bind(null, 189)).then(function (comp) {\n      external_vue_default.a.component(\"v-861b2503133db\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/函数防抖和函数节流.html\",\n  redirect: \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\"\n}, {\n  name: \"v-c56419dc6ff32\",\n  path: \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 9).then(__webpack_require__.bind(null, 190)).then(function (comp) {\n      external_vue_default.a.component(\"v-c56419dc6ff32\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/多维数组展开.html\",\n  redirect: \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\"\n}, {\n  name: \"v-ae0f7f209d655\",\n  path: \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 10).then(__webpack_require__.bind(null, 192)).then(function (comp) {\n      external_vue_default.a.component(\"v-ae0f7f209d655\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/数组API解析合集.html\",\n  redirect: \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\"\n}, {\n  name: \"v-6e1792ede5fcb\",\n  path: \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 11).then(__webpack_require__.bind(null, 193)).then(function (comp) {\n      external_vue_default.a.component(\"v-6e1792ede5fcb\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/数组完全乱序.html\",\n  redirect: \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\"\n}, {\n  name: \"v-006523810eca4\",\n  path: \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 12).then(__webpack_require__.bind(null, 195)).then(function (comp) {\n      external_vue_default.a.component(\"v-006523810eca4\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/时间差与时区转换.html\",\n  redirect: \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\"\n}, {\n  name: \"v-c636a798fc84c\",\n  path: \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 13).then(__webpack_require__.bind(null, 197)).then(function (comp) {\n      external_vue_default.a.component(\"v-c636a798fc84c\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/随机数组成的数组.html\",\n  redirect: \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\"\n}, {\n  name: \"v-b4ca7c19c1015\",\n  path: \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 14).then(__webpack_require__.bind(null, 176)).then(function (comp) {\n      external_vue_default.a.component(\"v-b4ca7c19c1015\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/JS/高性能js.html\",\n  redirect: \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\"\n}, {\n  name: \"v-30d2467fc2b85\",\n  path: \"/accumulate/\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 15).then(__webpack_require__.bind(null, 194)).then(function (comp) {\n      external_vue_default.a.component(\"v-30d2467fc2b85\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/index.html\",\n  redirect: \"/accumulate/\"\n}, {\n  name: \"v-f00c5cdf8e94f\",\n  path: \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 16).then(__webpack_require__.bind(null, 191)).then(function (comp) {\n      external_vue_default.a.component(\"v-f00c5cdf8e94f\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/vue定义全局函数.html\",\n  redirect: \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\"\n}, {\n  name: \"v-1d2602c545ef1\",\n  path: \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 17).then(__webpack_require__.bind(null, 188)).then(function (comp) {\n      external_vue_default.a.component(\"v-1d2602c545ef1\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/vue小技巧.html\",\n  redirect: \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"\n}, {\n  name: \"v-5a3b5a269768f\",\n  path: \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 18).then(__webpack_require__.bind(null, 185)).then(function (comp) {\n      external_vue_default.a.component(\"v-5a3b5a269768f\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/vue钩子函数.html\",\n  redirect: \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\"\n}, {\n  name: \"v-585a57505dfdb\",\n  path: \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 19).then(__webpack_require__.bind(null, 182)).then(function (comp) {\n      external_vue_default.a.component(\"v-585a57505dfdb\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/你或许不知道Vue的这些小技巧.html\",\n  redirect: \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"\n}, {\n  name: \"v-edbf821b4d52d\",\n  path: \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 20).then(__webpack_require__.bind(null, 175)).then(function (comp) {\n      external_vue_default.a.component(\"v-edbf821b4d52d\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/弹窗.html\",\n  redirect: \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\"\n}, {\n  name: \"v-7b1586457f0ea\",\n  path: \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 21).then(__webpack_require__.bind(null, 174)).then(function (comp) {\n      external_vue_default.a.component(\"v-7b1586457f0ea\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/Vue/极简双向绑定.html\",\n  redirect: \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\"\n}, {\n  name: \"v-df387d5f9b155\",\n  path: \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 22).then(__webpack_require__.bind(null, 173)).then(function (comp) {\n      external_vue_default.a.component(\"v-df387d5f9b155\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/amateur/VsCode文件头部注释生成.html\",\n  redirect: \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\"\n}, {\n  name: \"v-f7886d61af2e6\",\n  path: \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 23).then(__webpack_require__.bind(null, 198)).then(function (comp) {\n      external_vue_default.a.component(\"v-f7886d61af2e6\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/amateur/推箱子.html\",\n  redirect: \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\"\n}, {\n  name: \"v-753f0f457426e\",\n  path: \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 24).then(__webpack_require__.bind(null, 171)).then(function (comp) {\n      external_vue_default.a.component(\"v-753f0f457426e\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/input的一些坑点分享.html\",\n  redirect: \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\"\n}, {\n  name: \"v-9e41ddce92d4\",\n  path: \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 25).then(__webpack_require__.bind(null, 170)).then(function (comp) {\n      external_vue_default.a.component(\"v-9e41ddce92d4\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/判断用户浏览器.html\",\n  redirect: \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\"\n}, {\n  name: \"v-8a6f72c2fb1a5\",\n  path: \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 26).then(__webpack_require__.bind(null, 146)).then(function (comp) {\n      external_vue_default.a.component(\"v-8a6f72c2fb1a5\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/前端弹幕效果实现思路.html\",\n  redirect: \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\"\n}, {\n  name: \"v-8af83ab67b198\",\n  path: \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 27).then(__webpack_require__.bind(null, 168)).then(function (comp) {\n      external_vue_default.a.component(\"v-8af83ab67b198\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/复制粘贴系列.html\",\n  redirect: \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\"\n}, {\n  name: \"v-c4482a800996d\",\n  path: \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 28).then(__webpack_require__.bind(null, 167)).then(function (comp) {\n      external_vue_default.a.component(\"v-c4482a800996d\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/显示隐藏密码.html\",\n  redirect: \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\"\n}, {\n  name: \"v-2498ab2f6b89f\",\n  path: \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 29).then(__webpack_require__.bind(null, 166)).then(function (comp) {\n      external_vue_default.a.component(\"v-2498ab2f6b89f\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/effect/正则表达式收集.html\",\n  redirect: \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\"\n}, {\n  name: \"v-655d85fad3386\",\n  path: \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 30).then(__webpack_require__.bind(null, 165)).then(function (comp) {\n      external_vue_default.a.component(\"v-655d85fad3386\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/interviewQuestion/树状数组结构转化.html\",\n  redirect: \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\"\n}, {\n  name: \"v-50b68c5c13978\",\n  path: \"/accumulate/template.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 31).then(__webpack_require__.bind(null, 164)).then(function (comp) {\n      external_vue_default.a.component(\"v-50b68c5c13978\", comp.default);\n      next();\n    });\n  }\n}, {\n  name: \"v-dc0db3daae59d\",\n  path: \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 32).then(__webpack_require__.bind(null, 163)).then(function (comp) {\n      external_vue_default.a.component(\"v-dc0db3daae59d\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/tool/http缓存.html\",\n  redirect: \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\"\n}, {\n  name: \"v-1f13035bfd7d\",\n  path: \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 33).then(__webpack_require__.bind(null, 162)).then(function (comp) {\n      external_vue_default.a.component(\"v-1f13035bfd7d\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/tool/js事件循环机制.html\",\n  redirect: \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\"\n}, {\n  name: \"v-f9c3508ae0515\",\n  path: \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 34).then(__webpack_require__.bind(null, 161)).then(function (comp) {\n      external_vue_default.a.component(\"v-f9c3508ae0515\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/tool/js垃圾回收机制.html\",\n  redirect: \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\"\n}, {\n  name: \"v-0cd437a0e79e2\",\n  path: \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 35).then(__webpack_require__.bind(null, 160)).then(function (comp) {\n      external_vue_default.a.component(\"v-0cd437a0e79e2\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/accumulate/tool/忍者秘籍定时器机制.html\",\n  redirect: \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\"\n}, {\n  name: \"v-b1a912bda55b7\",\n  path: \"/algorithm/\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 36).then(__webpack_require__.bind(null, 159)).then(function (comp) {\n      external_vue_default.a.component(\"v-b1a912bda55b7\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/index.html\",\n  redirect: \"/algorithm/\"\n}, {\n  name: \"v-88f1a7b4e2a33\",\n  path: \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 37).then(__webpack_require__.bind(null, 158)).then(function (comp) {\n      external_vue_default.a.component(\"v-88f1a7b4e2a33\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/induction/反转3位整数.html\",\n  redirect: \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\"\n}, {\n  name: \"v-941d166fbe5b7\",\n  path: \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 38).then(__webpack_require__.bind(null, 157)).then(function (comp) {\n      external_vue_default.a.component(\"v-941d166fbe5b7\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/induction/数组重复次数.html\",\n  redirect: \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\"\n}, {\n  name: \"v-617bfc99cfe53\",\n  path: \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 39).then(__webpack_require__.bind(null, 156)).then(function (comp) {\n      external_vue_default.a.component(\"v-617bfc99cfe53\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/induction/查找斐波纳契数列中第N个数.html\",\n  redirect: \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\"\n}, {\n  name: \"v-10e90f7f208e9\",\n  path: \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 40).then(__webpack_require__.bind(null, 155)).then(function (comp) {\n      external_vue_default.a.component(\"v-10e90f7f208e9\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/induction/水仙花数.html\",\n  redirect: \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\"\n}, {\n  name: \"v-3230f7010456a\",\n  path: \"/algorithm/simple/template.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 41).then(__webpack_require__.bind(null, 154)).then(function (comp) {\n      external_vue_default.a.component(\"v-3230f7010456a\", comp.default);\n      next();\n    });\n  }\n}, {\n  name: \"v-95edeed7f13a5\",\n  path: \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 42).then(__webpack_require__.bind(null, 153)).then(function (comp) {\n      external_vue_default.a.component(\"v-95edeed7f13a5\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/两数之和.html\",\n  redirect: \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\"\n}, {\n  name: \"v-4dbcc658b8b1e\",\n  path: \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 43).then(__webpack_require__.bind(null, 152)).then(function (comp) {\n      external_vue_default.a.component(\"v-4dbcc658b8b1e\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/中位数.html\",\n  redirect: \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\"\n}, {\n  name: \"v-e230cbbc1c881\",\n  path: \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 44).then(__webpack_require__.bind(null, 151)).then(function (comp) {\n      external_vue_default.a.component(\"v-e230cbbc1c881\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/分解质因数.html\",\n  redirect: \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\"\n}, {\n  name: \"v-fbe544b93fc62\",\n  path: \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 45).then(__webpack_require__.bind(null, 150)).then(function (comp) {\n      external_vue_default.a.component(\"v-fbe544b93fc62\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/反转整数.html\",\n  redirect: \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\"\n}, {\n  name: \"v-45f69dd67d2fe\",\n  path: \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 46).then(__webpack_require__.bind(null, 149)).then(function (comp) {\n      external_vue_default.a.component(\"v-45f69dd67d2fe\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/合并排序数组.html\",\n  redirect: \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\"\n}, {\n  name: \"v-ab2ae2491aa72\",\n  path: \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 47).then(__webpack_require__.bind(null, 148)).then(function (comp) {\n      external_vue_default.a.component(\"v-ab2ae2491aa72\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/回文.html\",\n  redirect: \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\"\n}, {\n  name: \"v-3affd9a30cddf\",\n  path: \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 48).then(__webpack_require__.bind(null, 147)).then(function (comp) {\n      external_vue_default.a.component(\"v-3affd9a30cddf\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/姓名去重.html\",\n  redirect: \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\"\n}, {\n  name: \"v-6307a16003a12\",\n  path: \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 49).then(__webpack_require__.bind(null, 196)).then(function (comp) {\n      external_vue_default.a.component(\"v-6307a16003a12\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/字符串密钥格式.html\",\n  redirect: \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\"\n}, {\n  name: \"v-ff10f4d51edc6\",\n  path: \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 50).then(__webpack_require__.bind(null, 180)).then(function (comp) {\n      external_vue_default.a.component(\"v-ff10f4d51edc6\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/搜索二维矩阵.html\",\n  redirect: \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\"\n}, {\n  name: \"v-17edd118e5fbc\",\n  path: \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 51).then(__webpack_require__.bind(null, 179)).then(function (comp) {\n      external_vue_default.a.component(\"v-17edd118e5fbc\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/最大子数组.html\",\n  redirect: \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\"\n}, {\n  name: \"v-0c2f4ba4fb476\",\n  path: \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 52).then(__webpack_require__.bind(null, 178)).then(function (comp) {\n      external_vue_default.a.component(\"v-0c2f4ba4fb476\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/比较字符串.html\",\n  redirect: \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\"\n}, {\n  name: \"v-0c7003aa95c94\",\n  path: \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 53).then(__webpack_require__.bind(null, 177)).then(function (comp) {\n      external_vue_default.a.component(\"v-0c7003aa95c94\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: \"/algorithm/simple/落单的数.html\",\n  redirect: \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\"\n}, {\n  name: \"v-68e2a94fbdb49\",\n  path: \"/algorithm/template.html\",\n  component: Layout,\n  beforeEnter: function beforeEnter(to, from, next) {\n    __webpack_require__.e(/* import() */ 54).then(__webpack_require__.bind(null, 169)).then(function (comp) {\n      external_vue_default.a.component(\"v-68e2a94fbdb49\", comp.default);\n      next();\n    });\n  }\n}, {\n  path: '*',\n  component: NotFound\n}];\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/.temp/siteData.js\nvar siteData_siteData = {\n  \"title\": \"OBKoro1前端积累\",\n  \"description\": \"种一棵树最好的时间是十年前，其次就是现在。\",\n  \"base\": \"/web_accumulate/\",\n  \"pages\": [{\n    \"key\": \"v-5067e9249bd5\",\n    \"path\": \"/\",\n    \"lastUpdated\": 1537113645000,\n    \"title\": \"Home\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"其他：\",\n      \"slug\": \"其他：\"\n    }],\n    \"frontmatter\": {\n      \"home\": true,\n      \"heroImage\": \"/logo.jpg\",\n      \"actionText\": \"开始阅读 →\",\n      \"actionLink\": \"/accumulate/\",\n      \"features\": [{\n        \"title\": \"积累\",\n        \"details\": \"平时的一些积累，一些上手即用的东西/知识点等内容，范围较广。\"\n      }, {\n        \"title\": \"算法\",\n        \"details\": \"刷算法题，是提升编程能力和逻辑能力比较有效的一种方式。文档将算法按照难度分级，代码中都有详细注释，且会提供多种解法。\"\n      }, {\n        \"title\": \"持续更新\",\n        \"details\": \"本文档将会持续更新，就像我的博客一样，当做一个长期项目来维护，期望这个文档在不久以后能够给大家带来帮助。\"\n      }],\n      \"footer\": \"MIT Licensed | Copyright © 2018-present OBKoro1\"\n    }\n  }, {\n    \"key\": \"v-fcdbfc2434362\",\n    \"path\": \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",\n    \"lastUpdated\": 1538292922000,\n    \"title\": \"CSS 权重规则\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"CSS 权重规则\",\n      \"slug\": \"css-权重规则\"\n    }, {\n      \"level\": 2,\n      \"title\": \"权重规则总结:\",\n      \"slug\": \"权重规则总结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"css 权重优先级用来干嘛？\",\n      \"slug\": \"css-权重优先级用来干嘛？\"\n    }, {\n      \"level\": 3,\n      \"title\": \"权重的五个等级及其权重\",\n      \"slug\": \"权重的五个等级及其权重\"\n    }, {\n      \"level\": 3,\n      \"title\": \"等级关系:\",\n      \"slug\": \"等级关系\"\n    }, {\n      \"level\": 2,\n      \"title\": \"权重规则：\",\n      \"slug\": \"权重规则：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"1.不推荐使用!important\",\n      \"slug\": \"_1-不推荐使用-important\"\n    }, {\n      \"level\": 3,\n      \"title\": \"2.行内样式总会覆盖外部样式表的任何样式,会被!important覆盖\",\n      \"slug\": \"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\"\n    }, {\n      \"level\": 3,\n      \"title\": \"3.单独使用一个选择器的时候，不能跨等级使 css 规则生效\",\n      \"slug\": \"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\"\n    }, {\n      \"level\": 3,\n      \"title\": \"4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效\",\n      \"slug\": \"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\"\n    }, {\n      \"level\": 3,\n      \"title\": \"5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.\",\n      \"slug\": \"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"6.权重相同时，与元素距离近的选择器生效\",\n      \"slug\": \"_6-权重相同时，与元素距离近的选择器生效\"\n    }, {\n      \"level\": 2,\n      \"title\": \"建议：\",\n      \"slug\": \"建议：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-f851df6bb2f4a\",\n    \"path\": \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",\n    \"lastUpdated\": 1537113645000,\n    \"title\": \"CSS 概念-BFC 深入浅出\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"CSS 概念-BFC 深入浅出\",\n      \"slug\": \"css-概念-bfc-深入浅出\"\n    }, {\n      \"level\": 2,\n      \"title\": \"BFC 是什么鬼？\",\n      \"slug\": \"bfc-是什么鬼？\"\n    }, {\n      \"level\": 3,\n      \"title\": \"关于 BFC 的定义：\",\n      \"slug\": \"关于-bfc-的定义：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"通俗的说:\",\n      \"slug\": \"通俗的说\"\n    }, {\n      \"level\": 3,\n      \"title\": \"触发条件\",\n      \"slug\": \"触发条件\"\n    }, {\n      \"level\": 3,\n      \"title\": \"BFC 布局规则：\",\n      \"slug\": \"bfc-布局规则：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"BFC 有哪些作用：\",\n      \"slug\": \"bfc-有哪些作用：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"BFC 的规则和作用介绍:\",\n      \"slug\": \"bfc-的规则和作用介绍\"\n    }, {\n      \"level\": 3,\n      \"title\": \"BFC 与 Layout\",\n      \"slug\": \"bfc-与-layout\"\n    }, {\n      \"level\": 3,\n      \"title\": \"有趣的文本:\",\n      \"slug\": \"有趣的文本\"\n    }]\n  }, {\n    \"key\": \"v-ddba404cf15bf\",\n    \"path\": \"/accumulate/JS/Object.defineProperty.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"一次弄懂 Object.defineProperty\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"一次弄懂 Object.defineProperty\",\n      \"slug\": \"一次弄懂-object-defineproperty\"\n    }, {\n      \"level\": 3,\n      \"title\": \"基本用法：\",\n      \"slug\": \"基本用法：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"设置get、set：\",\n      \"slug\": \"设置get、set：\"\n    }]\n  }, {\n    \"key\": \"v-e2825bfa2222b\",\n    \"path\": \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",\n    \"lastUpdated\": 1537686805000,\n    \"title\": \"cookie、localStorage 和 sessionStorage 的使用以及区别\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"cookie、localStorage 和 sessionStorage 的使用以及区别\",\n      \"slug\": \"cookie、localstorage-和-sessionstorage-的使用以及区别\"\n    }, {\n      \"level\": 3,\n      \"title\": \"localStorage 和 sessionStorage 的增删改查：\",\n      \"slug\": \"localstorage-和-sessionstorage-的增删改查：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"cookie 的增删改茶:\",\n      \"slug\": \"cookie-的增删改茶\"\n    }, {\n      \"level\": 3,\n      \"title\": \"三者的异同：\",\n      \"slug\": \"三者的异同：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"应用场景：\",\n      \"slug\": \"应用场景：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"浏览器支持情况：\",\n      \"slug\": \"浏览器支持情况：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"数据存放处：\",\n      \"slug\": \"数据存放处：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"番外：各浏览器Cookie大小、个数限制。\",\n      \"slug\": \"番外：各浏览器cookie大小、个数限制。\"\n    }]\n  }, {\n    \"key\": \"v-861b2503133db\",\n    \"path\": \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",\n    \"lastUpdated\": 1537113645000,\n    \"title\": \"防抖函数&节流函数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"防抖函数(debounce):\",\n      \"slug\": \"防抖函数-debounce\"\n    }, {\n      \"level\": 3,\n      \"title\": \"概念：\",\n      \"slug\": \"概念：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"生活中的栗子：\",\n      \"slug\": \"生活中的栗子：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码栗子：\",\n      \"slug\": \"代码栗子：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"机制：\",\n      \"slug\": \"机制：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"应用场景：\",\n      \"slug\": \"应用场景：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"节流函数(throttle):\",\n      \"slug\": \"节流函数-throttle\"\n    }, {\n      \"level\": 3,\n      \"title\": \"概念：\",\n      \"slug\": \"概念：-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"生活中的栗子：\",\n      \"slug\": \"生活中的栗子：-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码栗子：\",\n      \"slug\": \"代码栗子：-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"机制：\",\n      \"slug\": \"机制：-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"应用场景：\",\n      \"slug\": \"应用场景：-2\"\n    }, {\n      \"level\": 2,\n      \"title\": \"怎么给回调函数传参？\",\n      \"slug\": \"怎么给回调函数传参？\"\n    }, {\n      \"level\": 2,\n      \"title\": \"作用和本质：\",\n      \"slug\": \"作用和本质：\"\n    }]\n  }, {\n    \"key\": \"v-c56419dc6ff32\",\n    \"path\": \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",\n    \"lastUpdated\": 1536751480000,\n    \"title\": \"多维数组展开\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"原理：\",\n      \"slug\": \"原理：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }]\n  }, {\n    \"key\": \"v-ae0f7f209d655\",\n    \"path\": \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",\n    \"lastUpdated\": 1539001153000,\n    \"title\": \"数组API解析合集\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"数组API解析合集\",\n      \"slug\": \"数组api解析合集\"\n    }, {\n      \"level\": 3,\n      \"title\": \"创建一个数组:\",\n      \"slug\": \"创建一个数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6 Array.of()  返回由所有参数值组成的数组\",\n      \"slug\": \"es6-array-of-返回由所有参数值组成的数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6 Arrary.from() 将两类对象转为真正的数组\",\n      \"slug\": \"es6-arrary-from-将两类对象转为真正的数组\"\n    }, {\n      \"level\": 2,\n      \"title\": \"方法:\",\n      \"slug\": \"方法\"\n    }, {\n      \"level\": 3,\n      \"title\": \"改变原数组的方法(9个):\",\n      \"slug\": \"改变原数组的方法-9个\"\n    }, {\n      \"level\": 3,\n      \"title\": \"splice() 添加/删除数组元素\",\n      \"slug\": \"splice-添加-删除数组元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"sort() 数组排序\",\n      \"slug\": \"sort-数组排序\"\n    }, {\n      \"level\": 3,\n      \"title\": \"pop() 删除一个数组中的最后的一个元素\",\n      \"slug\": \"pop-删除一个数组中的最后的一个元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"shift() 删除数组的第一个元素\",\n      \"slug\": \"shift-删除数组的第一个元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"push() 向数组的末尾添加元素\",\n      \"slug\": \"push-向数组的末尾添加元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"unshift()\",\n      \"slug\": \"unshift\"\n    }, {\n      \"level\": 3,\n      \"title\": \"reverse() 颠倒数组中元素的顺序\",\n      \"slug\": \"reverse-颠倒数组中元素的顺序\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6: copyWithin() 指定位置的成员复制到其他位置\",\n      \"slug\": \"es6-copywithin-指定位置的成员复制到其他位置\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6: fill() 填充数组\",\n      \"slug\": \"es6-fill-填充数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"不改变原数组的方法(8个):\",\n      \"slug\": \"不改变原数组的方法-8个\"\n    }, {\n      \"level\": 3,\n      \"title\": \"slice() 浅拷贝数组的元素\",\n      \"slug\": \"slice-浅拷贝数组的元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"join()  数组转字符串\",\n      \"slug\": \"join-数组转字符串\"\n    }, {\n      \"level\": 3,\n      \"title\": \"toLocaleString() 数组转字符串\",\n      \"slug\": \"tolocalestring-数组转字符串\"\n    }, {\n      \"level\": 3,\n      \"title\": \"toString() 数组转字符串 不推荐\",\n      \"slug\": \"tostring-数组转字符串-不推荐\"\n    }, {\n      \"level\": 3,\n      \"title\": \"cancat\",\n      \"slug\": \"cancat\"\n    }, {\n      \"level\": 3,\n      \"title\": \"indexOf() 查找数组是否存在某个元素，返回下标\",\n      \"slug\": \"indexof-查找数组是否存在某个元素，返回下标\"\n    }, {\n      \"level\": 3,\n      \"title\": \"lastIndexOf() 查找指定元素在数组中的最后一个位置\",\n      \"slug\": \"lastindexof-查找指定元素在数组中的最后一个位置\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES7 includes() 查找数组是否包含某个元素 返回布尔\",\n      \"slug\": \"es7-includes-查找数组是否包含某个元素-返回布尔\"\n    }, {\n      \"level\": 3,\n      \"title\": \"遍历方法(12个):\",\n      \"slug\": \"遍历方法-12个\"\n    }, {\n      \"level\": 3,\n      \"title\": \"关于遍历：\",\n      \"slug\": \"关于遍历：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"forEach\",\n      \"slug\": \"foreach\"\n    }, {\n      \"level\": 3,\n      \"title\": \"下面类似语法同样适用这些规则\",\n      \"slug\": \"下面类似语法同样适用这些规则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"every 检测数组所有元素是否都符合判断条件\",\n      \"slug\": \"every-检测数组所有元素是否都符合判断条件\"\n    }, {\n      \"level\": 3,\n      \"title\": \"some 数组中的是否有满足判断条件的元素\",\n      \"slug\": \"some-数组中的是否有满足判断条件的元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"filter 过滤原始数组，返回新数组\",\n      \"slug\": \"filter-过滤原始数组，返回新数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"map 对数组中的每个元素进行处理，返回新的数组\",\n      \"slug\": \"map-对数组中的每个元素进行处理，返回新的数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"reduce 为数组提供累加器，合并为一个值\",\n      \"slug\": \"reduce-为数组提供累加器，合并为一个值\"\n    }, {\n      \"level\": 3,\n      \"title\": \"reduceRight  从右至左累加\",\n      \"slug\": \"reduceright-从右至左累加\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6：find()& findIndex() 根据条件找到数组成员\",\n      \"slug\": \"es6：find-findindex-根据条件找到数组成员\"\n    }, {\n      \"level\": 3,\n      \"title\": \"ES6 keys()&values()&entries() 遍历键名、遍历键值、遍历键名+键值\",\n      \"slug\": \"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-6e1792ede5fcb\",\n    \"path\": \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"数组完全乱序\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"真正意义上的乱序数组：\",\n      \"slug\": \"真正意义上的乱序数组：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"递归：\",\n      \"slug\": \"递归：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"循环(进阶)：\",\n      \"slug\": \"循环-进阶-：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"不开新数组（最终）：\",\n      \"slug\": \"不开新数组（最终）：\"\n    }]\n  }, {\n    \"key\": \"v-006523810eca4\",\n    \"path\": \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",\n    \"lastUpdated\": 1537686805000,\n    \"title\": \"计算两个时间的时间差&时区转换\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"计算两个时间的时间差&时区转换\",\n      \"slug\": \"计算两个时间的时间差-时区转换\"\n    }, {\n      \"level\": 3,\n      \"title\": \"计算两个时间的时间差：\",\n      \"slug\": \"计算两个时间的时间差：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"时区转换\",\n      \"slug\": \"时区转换\"\n    }]\n  }, {\n    \"key\": \"v-c636a798fc84c\",\n    \"path\": \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"随机数数组\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"原理\",\n      \"slug\": \"原理\"\n    }]\n  }, {\n    \"key\": \"v-b4ca7c19c1015\",\n    \"path\": \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",\n    \"lastUpdated\": 1537952771000,\n    \"title\": \"[读书笔记《高性能 JavaScript》\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"[读书笔记《高性能 JavaScript》\",\n      \"slug\": \"读书笔记《高性能-javascript》\"\n    }, {\n      \"level\": 3,\n      \"title\": \"缺陷\",\n      \"slug\": \"缺陷\"\n    }, {\n      \"level\": 3,\n      \"title\": \"前言\",\n      \"slug\": \"前言\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第一章-加载和执行\",\n      \"slug\": \"第一章-加载和执行\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第一章加载和执行小结：\",\n      \"slug\": \"第一章加载和执行小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第二章-数据存取\",\n      \"slug\": \"第二章-数据存取\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第二章数据存取小结：\",\n      \"slug\": \"第二章数据存取小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第三章 DOM 编程小结：\",\n      \"slug\": \"第三章-dom-编程小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第四章算法和流程控制小结：\",\n      \"slug\": \"第四章算法和流程控制小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第五章字符串和正则表达式小结：\",\n      \"slug\": \"第五章字符串和正则表达式小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第六章快速响应的用户界面小结：\",\n      \"slug\": \"第六章快速响应的用户界面小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第七章 AJAX 小结\",\n      \"slug\": \"第七章-ajax-小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第八章编程实践小结\",\n      \"slug\": \"第八章编程实践小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第九章 构建并部署高性能 js 应用小结\",\n      \"slug\": \"第九章-构建并部署高性能-js-应用小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"第十章 工具 小结：\",\n      \"slug\": \"第十章-工具-小结：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"后话\",\n      \"slug\": \"后话\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\",\n      \"slug\": \"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\"\n    }]\n  }, {\n    \"key\": \"v-30d2467fc2b85\",\n    \"path\": \"/accumulate/\",\n    \"lastUpdated\": 1536751480000,\n    \"title\": \"前端积累\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"前端积累\",\n      \"slug\": \"前端积累\"\n    }, {\n      \"level\": 2,\n      \"title\": \"前端算法\",\n      \"slug\": \"前端算法\"\n    }, {\n      \"level\": 3,\n      \"title\": \"公众号：\",\n      \"slug\": \"公众号：\"\n    }]\n  }, {\n    \"key\": \"v-f00c5cdf8e94f\",\n    \"path\": \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",\n    \"lastUpdated\": 1537360696000,\n    \"title\": \"Vue 定义全局函数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"Vue 定义全局函数\",\n      \"slug\": \"vue-定义全局函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"原理\",\n      \"slug\": \"原理\"\n    }, {\n      \"level\": 3,\n      \"title\": \"1. 在 main.js 里面直接写函数\",\n      \"slug\": \"_1-在-main-js-里面直接写函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"2. 写一个模块文件，挂载到 main.js 上面。\",\n      \"slug\": \"_2-写一个模块文件，挂载到-main-js-上面。\"\n    }]\n  }, {\n    \"key\": \"v-1d2602c545ef1\",\n    \"path\": \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n    \"lastUpdated\": 1537360696000,\n    \"title\": \"vue 小技巧&小问题1\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"vue 小技巧&小问题1\",\n      \"slug\": \"vue-小技巧-小问题1\"\n    }, {\n      \"level\": 3,\n      \"title\": \"路由变化页面数据不刷新问题\",\n      \"slug\": \"路由变化页面数据不刷新问题\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setTimeout/setInterval 无法用 this 访问 VUe 实例\",\n      \"slug\": \"settimeout-setinterval-无法用-this-访问-vue-实例\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setInterval 路由跳转继续运行并没有销毁\",\n      \"slug\": \"setinterval-路由跳转继续运行并没有销毁\"\n    }, {\n      \"level\": 3,\n      \"title\": \"vue 滚动行为(浏览器回退记忆位置)用法\",\n      \"slug\": \"vue-滚动行为-浏览器回退记忆位置-用法\"\n    }, {\n      \"level\": 3,\n      \"title\": \"vue 路由拦截浏览器后退实现草稿保存类似需求\",\n      \"slug\": \"vue-路由拦截浏览器后退实现草稿保存类似需求\"\n    }, {\n      \"level\": 3,\n      \"title\": \"v-once 只渲染元素和组件一次，优化更新渲染性能\",\n      \"slug\": \"v-once-只渲染元素和组件一次，优化更新渲染性能\"\n    }, {\n      \"level\": 3,\n      \"title\": \"vue 风格指南推荐：\",\n      \"slug\": \"vue-风格指南推荐：\"\n    }]\n  }, {\n    \"key\": \"v-5a3b5a269768f\",\n    \"path\": \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",\n    \"lastUpdated\": null,\n    \"title\": \"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",\n      \"slug\": \"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\"\n    }, {\n      \"level\": 2,\n      \"title\": \"Vue-Router导航守卫：\",\n      \"slug\": \"vue-router导航守卫：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"全局守卫\",\n      \"slug\": \"全局守卫\"\n    }, {\n      \"level\": 3,\n      \"title\": \"路由独享守卫\",\n      \"slug\": \"路由独享守卫\"\n    }, {\n      \"level\": 3,\n      \"title\": \"路由组件内的守卫：\",\n      \"slug\": \"路由组件内的守卫：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"关于钩子的一些知识：\",\n      \"slug\": \"关于钩子的一些知识：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"完整的路由导航解析流程(不包括其他生命周期)：\",\n      \"slug\": \"完整的路由导航解析流程-不包括其他生命周期-：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"你不知道的keep-alive[我猜你不知道]\",\n      \"slug\": \"你不知道的keep-alive-我猜你不知道\"\n    }, {\n      \"level\": 3,\n      \"title\": \"用法：\",\n      \"slug\": \"用法：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"生命周期钩子：\",\n      \"slug\": \"生命周期钩子：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"缓存你想缓存的路由：\",\n      \"slug\": \"缓存你想缓存的路由：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"组件生命周期钩子：\",\n      \"slug\": \"组件生命周期钩子：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"触发钩子的完整顺序：\",\n      \"slug\": \"触发钩子的完整顺序：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-585a57505dfdb\",\n    \"path\": \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n    \"lastUpdated\": 1539017559000,\n    \"title\": \"vue 小技巧&小问题2\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"vue 小技巧&小问题2\",\n      \"slug\": \"vue-小技巧-小问题2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"文章内容总结:\",\n      \"slug\": \"文章内容总结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"组件style的scoped:\",\n      \"slug\": \"组件style的scoped\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Vue 数组/对象更新 视图不更新\",\n      \"slug\": \"vue-数组-对象更新-视图不更新\"\n    }, {\n      \"level\": 3,\n      \"title\": \"vue filters 过滤器的使用:\",\n      \"slug\": \"vue-filters-过滤器的使用\"\n    }, {\n      \"level\": 3,\n      \"title\": \"列表渲染相关\",\n      \"slug\": \"列表渲染相关\"\n    }, {\n      \"level\": 3,\n      \"title\": \"深度watch与watch立即触发回调\",\n      \"slug\": \"深度watch与watch立即触发回调\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这些情况下不要使用箭头函数:\",\n      \"slug\": \"这些情况下不要使用箭头函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"路由懒加载写法:\",\n      \"slug\": \"路由懒加载写法\"\n    }, {\n      \"level\": 3,\n      \"title\": \"路由的项目启动页和404页面\",\n      \"slug\": \"路由的项目启动页和404页面\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Vue调试神器:vue-devtools\",\n      \"slug\": \"vue调试神器-vue-devtools\"\n    }, {\n      \"level\": 3,\n      \"title\": \"前几个月也写过一篇类似的:\",\n      \"slug\": \"前几个月也写过一篇类似的\"\n    }, {\n      \"level\": 2,\n      \"title\": \"结语\",\n      \"slug\": \"结语\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-edbf821b4d52d\",\n    \"path\": \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"简单的弹窗组件实现\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"简单的弹窗组件实现\",\n      \"slug\": \"简单的弹窗组件实现\"\n    }, {\n      \"level\": 3,\n      \"title\": \"组件最后实现的效果\",\n      \"slug\": \"组件最后实现的效果\"\n    }, {\n      \"level\": 2,\n      \"title\": \"实现步骤\",\n      \"slug\": \"实现步骤\"\n    }, {\n      \"level\": 3,\n      \"title\": \"1.搭建组件的html和css样式。\",\n      \"slug\": \"_1-搭建组件的html和css样式。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"2. 通过slot定制弹窗内容\",\n      \"slug\": \"_2-通过slot定制弹窗内容\"\n    }, {\n      \"level\": 3,\n      \"title\": \"3.通过props控制弹窗显隐&&定制弹窗style\",\n      \"slug\": \"_3-通过props控制弹窗显隐-定制弹窗style\"\n    }, {\n      \"level\": 3,\n      \"title\": \"4.$emit触发父组件事件修改数据，关闭弹窗\",\n      \"slug\": \"_4-emit触发父组件事件修改数据，关闭弹窗\"\n    }, {\n      \"level\": 3,\n      \"title\": \"弹窗组件代码\",\n      \"slug\": \"弹窗组件代码\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结：\",\n      \"slug\": \"小结：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"参考资料：\",\n      \"slug\": \"参考资料：\"\n    }]\n  }, {\n    \"key\": \"v-7b1586457f0ea\",\n    \"path\": \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"仿Vue极简双向绑定\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"仿Vue极简双向绑定\",\n      \"slug\": \"仿vue极简双向绑定\"\n    }, {\n      \"level\": 2,\n      \"title\": \"效果GIF：\",\n      \"slug\": \"效果gif：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"demo地址：\",\n      \"slug\": \"demo地址：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"了解Object.defineProperty()：\",\n      \"slug\": \"了解object-defineproperty-：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"使用方式：\",\n      \"slug\": \"使用方式：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"示例demo：\",\n      \"slug\": \"示例demo：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"画一下重点：\",\n      \"slug\": \"画一下重点：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"实现思路：\",\n      \"slug\": \"实现思路：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"mvvm系列的双向绑定，关键步骤：\",\n      \"slug\": \"mvvm系列的双向绑定，关键步骤：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"流程图：\",\n      \"slug\": \"流程图：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"具体代码实现：\",\n      \"slug\": \"具体代码实现：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"html结构：\",\n      \"slug\": \"html结构：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"调用方法：\",\n      \"slug\": \"调用方法：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"创建myVue函数：\",\n      \"slug\": \"创建myvue函数：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Watcher函数:\",\n      \"slug\": \"watcher函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"实现数据监听器_observer()：\",\n      \"slug\": \"实现数据监听器-observer-：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"实现Compile 模板编译\",\n      \"slug\": \"实现compile-模板编译\"\n    }, {\n      \"level\": 2,\n      \"title\": \"完整代码&demo地址\",\n      \"slug\": \"完整代码-demo地址\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"参考资料：\",\n      \"slug\": \"参考资料：\"\n    }]\n  }, {\n    \"key\": \"v-df387d5f9b155\",\n    \"path\": \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\",\n    \"lastUpdated\": 1538187537000,\n    \"title\": \"VsCode文件头部注释生成\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"VsCode文件头部注释生成\",\n      \"slug\": \"vscode文件头部注释生成\"\n    }, {\n      \"level\": 2,\n      \"title\": \"language\",\n      \"slug\": \"language\"\n    }, {\n      \"level\": 2,\n      \"title\": \"简介\",\n      \"slug\": \"简介\"\n    }, {\n      \"level\": 2,\n      \"title\": \"安装\",\n      \"slug\": \"安装\"\n    }, {\n      \"level\": 2,\n      \"title\": \"使用\",\n      \"slug\": \"使用\"\n    }, {\n      \"level\": 2,\n      \"title\": \"注释模板\",\n      \"slug\": \"注释模板\"\n    }, {\n      \"level\": 3,\n      \"title\": \"默认注释模板\",\n      \"slug\": \"默认注释模板\"\n    }, {\n      \"level\": 3,\n      \"title\": \"推荐模板参数\",\n      \"slug\": \"推荐模板参数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"自定义注释模板\",\n      \"slug\": \"自定义注释模板\"\n    }, {\n      \"level\": 2,\n      \"title\": \"自动更新编辑时间 示例:\",\n      \"slug\": \"自动更新编辑时间-示例\"\n    }]\n  }, {\n    \"key\": \"v-f7886d61af2e6\",\n    \"path\": \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"推箱子\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"推箱子\",\n      \"slug\": \"推箱子\"\n    }, {\n      \"level\": 3,\n      \"title\": \"demo：推箱子小游戏\",\n      \"slug\": \"demo：推箱子小游戏\"\n    }, {\n      \"level\": 2,\n      \"title\": \"步骤解析：\",\n      \"slug\": \"步骤解析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"1. 渲染地图\",\n      \"slug\": \"_1-渲染地图\"\n    }, {\n      \"level\": 3,\n      \"title\": \"2. 捕获键盘事件,判断是否可以移动\",\n      \"slug\": \"_2-捕获键盘事件-判断是否可以移动\"\n    }, {\n      \"level\": 3,\n      \"title\": \"3.胜利判断：\",\n      \"slug\": \"_3-胜利判断：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码地址](https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html)、[demo地址\",\n      \"slug\": \"代码地址、demo地址\"\n    }]\n  }, {\n    \"key\": \"v-753f0f457426e\",\n    \"path\": \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",\n    \"lastUpdated\": 1537952771000,\n    \"title\": \"input 的一些坑点分享\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"input 的一些坑点分享\",\n      \"slug\": \"input-的一些坑点分享\"\n    }, {\n      \"level\": 2,\n      \"title\": \"本文内容包括：\",\n      \"slug\": \"本文内容包括：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"移动端底部 input 被弹出的键盘遮挡\",\n      \"slug\": \"移动端底部-input-被弹出的键盘遮挡\"\n    }, {\n      \"level\": 3,\n      \"title\": \"控制 input 显/隐密码\",\n      \"slug\": \"控制-input-显-隐密码\"\n    }, {\n      \"level\": 3,\n      \"title\": \"在 input 中输入 emoji 表情导致请求失败\",\n      \"slug\": \"在-input-中输入-emoji-表情导致请求失败\"\n    }, {\n      \"level\": 3,\n      \"title\": \"textarea 多行回车换行，显示的时候换行设置：\",\n      \"slug\": \"textarea-多行回车换行，显示的时候换行设置：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"输入框首尾清除空格-trim()\",\n      \"slug\": \"输入框首尾清除空格-trim\"\n    }, {\n      \"level\": 3,\n      \"title\": \"在 input 中监听键盘事件\",\n      \"slug\": \"在-input-中监听键盘事件\"\n    }]\n  }, {\n    \"key\": \"v-9e41ddce92d4\",\n    \"path\": \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",\n    \"lastUpdated\": 1537203231000,\n    \"title\": \"判断用户浏览器\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"navigator.userAgent\",\n      \"slug\": \"navigator-useragent\"\n    }, {\n      \"level\": 3,\n      \"title\": \"判断方式：\",\n      \"slug\": \"判断方式：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"示例:判断QQ和微信内置浏览器\",\n      \"slug\": \"示例-判断qq和微信内置浏览器\"\n    }]\n  }, {\n    \"key\": \"v-8a6f72c2fb1a5\",\n    \"path\": \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",\n    \"lastUpdated\": 1537952771000,\n    \"title\": \"前端弹幕效果实现思路\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"前端弹幕效果实现思路\",\n      \"slug\": \"前端弹幕效果实现思路\"\n    }, {\n      \"level\": 2,\n      \"title\": \"实现效果：\",\n      \"slug\": \"实现效果：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"实现原理：\",\n      \"slug\": \"实现原理：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"实现步骤：\",\n      \"slug\": \"实现步骤：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"1. 首先看一下html的结构。\",\n      \"slug\": \"_1-首先看一下html的结构。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"2.获取弹幕所需要的数据。\",\n      \"slug\": \"_2-获取弹幕所需要的数据。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"3.执行弹幕的函数。\",\n      \"slug\": \"_3-执行弹幕的函数。\"\n    }]\n  }, {\n    \"key\": \"v-8af83ab67b198\",\n    \"path\": \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",\n    \"lastUpdated\": 1536751480000,\n    \"title\": \"复制粘贴系列\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"API 介绍:\",\n      \"slug\": \"api-介绍\"\n    }, {\n      \"level\": 2,\n      \"title\": \"应用:\",\n      \"slug\": \"应用\"\n    }, {\n      \"level\": 3,\n      \"title\": \"实现类知乎/掘金复制大段文本添加版权信息:\",\n      \"slug\": \"实现类知乎-掘金复制大段文本添加版权信息\"\n    }, {\n      \"level\": 3,\n      \"title\": \"实现类起点网的防复制功能:\",\n      \"slug\": \"实现类起点网的防复制功能\"\n    }, {\n      \"level\": 3,\n      \"title\": \"点击复制功能：\",\n      \"slug\": \"点击复制功能：\"\n    }]\n  }, {\n    \"key\": \"v-c4482a800996d\",\n    \"path\": \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"显示隐藏密码\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"显示隐藏密码\",\n      \"slug\": \"显示隐藏密码\"\n    }]\n  }, {\n    \"key\": \"v-2498ab2f6b89f\",\n    \"path\": \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",\n    \"lastUpdated\": 1537203231000,\n    \"title\": \"常见正则表达式合集\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"常见正则表达式合集\",\n      \"slug\": \"常见正则表达式合集\"\n    }, {\n      \"level\": 3,\n      \"title\": \"如何验证？\",\n      \"slug\": \"如何验证？\"\n    }, {\n      \"level\": 3,\n      \"title\": \"身份证号码正则表达式：\",\n      \"slug\": \"身份证号码正则表达式：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"手机号码正则表达式：\",\n      \"slug\": \"手机号码正则表达式：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"邮箱正则表达式：\",\n      \"slug\": \"邮箱正则表达式：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"用户名正则:\",\n      \"slug\": \"用户名正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"密码正则:\",\n      \"slug\": \"密码正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"QQ 号码正则:\",\n      \"slug\": \"qq-号码正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"微信号码正则:\",\n      \"slug\": \"微信号码正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"特殊字符检测正则:\",\n      \"slug\": \"特殊字符检测正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"域名正则:\",\n      \"slug\": \"域名正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"车牌号码正则:\",\n      \"slug\": \"车牌号码正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"包含中文正则:\",\n      \"slug\": \"包含中文正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"护照正则:\",\n      \"slug\": \"护照正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"固定电话正则：\",\n      \"slug\": \"固定电话正则：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"IP 地址正则:\",\n      \"slug\": \"ip-地址正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"邮政编码正则:\",\n      \"slug\": \"邮政编码正则\"\n    }, {\n      \"level\": 3,\n      \"title\": \"经纬度正则\",\n      \"slug\": \"经纬度正则\"\n    }]\n  }, {\n    \"key\": \"v-655d85fad3386\",\n    \"path\": \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"树状数组结构转化\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"树状数组结构转化\",\n      \"slug\": \"树状数组结构转化\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目如下：\",\n      \"slug\": \"题目如下：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"传进去的数组：\",\n      \"slug\": \"传进去的数组：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"输出的数组：\",\n      \"slug\": \"输出的数组：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"建议大家好好想想，争取能够自己解出来\",\n      \"slug\": \"建议大家好好想想，争取能够自己解出来\"\n    }, {\n      \"level\": 3,\n      \"title\": \"参考一下我的解题方法：\",\n      \"slug\": \"参考一下我的解题方法：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"通关秘籍\",\n      \"slug\": \"通关秘籍\"\n    }]\n  }, {\n    \"key\": \"v-50b68c5c13978\",\n    \"path\": \"/accumulate/template.html\",\n    \"lastUpdated\": 1539080756000,\n    \"title\": \"标题\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"标题\",\n      \"slug\": \"标题\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-dc0db3daae59d\",\n    \"path\": \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",\n    \"lastUpdated\": 1539017559000,\n    \"title\": \"谈论HTTP缓存时我们在谈论什么\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"谈论HTTP缓存时我们在谈论什么\",\n      \"slug\": \"谈论http缓存时我们在谈论什么\"\n    }, {\n      \"level\": 3,\n      \"title\": \"当我们在谈论HTTP缓存时我们在谈论什么:\",\n      \"slug\": \"当我们在谈论http缓存时我们在谈论什么\"\n    }, {\n      \"level\": 3,\n      \"title\": \"缓存流程：\",\n      \"slug\": \"缓存流程：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"强缓存与弱缓存的区别：\",\n      \"slug\": \"强缓存与弱缓存的区别：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"强缓存：\",\n      \"slug\": \"强缓存：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Cache-Control\",\n      \"slug\": \"cache-control\"\n    }, {\n      \"level\": 3,\n      \"title\": \"http1.0时代的缓存 Expires+Pragma\",\n      \"slug\": \"http1-0时代的缓存-expires-pragma\"\n    }, {\n      \"level\": 3,\n      \"title\": \"强缓存命中 from memory cache & from disk cache\",\n      \"slug\": \"强缓存命中-from-memory-cache-from-disk-cache\"\n    }, {\n      \"level\": 3,\n      \"title\": \"弱缓存：\",\n      \"slug\": \"弱缓存：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Etag/lastModified过程如下:\",\n      \"slug\": \"etag-lastmodified过程如下\"\n    }, {\n      \"level\": 3,\n      \"title\": \"同时使用两个报文头:\",\n      \"slug\": \"同时使用两个报文头\"\n    }, {\n      \"level\": 3,\n      \"title\": \"Etag 主要为了解决 Last-Modified 无法解决的一些问题：\",\n      \"slug\": \"etag-主要为了解决-last-modified-无法解决的一些问题：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"用户操作行为与缓存\",\n      \"slug\": \"用户操作行为与缓存\"\n    }, {\n      \"level\": 3,\n      \"title\": \"如何设置？\",\n      \"slug\": \"如何设置？\"\n    }, {\n      \"level\": 3,\n      \"title\": \"没有设置强缓存，返回200\",\n      \"slug\": \"没有设置强缓存，返回200\"\n    }, {\n      \"level\": 3,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-1f13035bfd7d\",\n    \"path\": \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",\n    \"lastUpdated\": 1539080756000,\n    \"title\": \"事件循环(Event Loop)机制以及实例\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"事件循环(Event Loop)机制以及实例\",\n      \"slug\": \"事件循环-event-loop-机制以及实例\"\n    }, {\n      \"level\": 3,\n      \"title\": \"为什么js是单线程？\",\n      \"slug\": \"为什么js是单线程？\"\n    }, {\n      \"level\": 2,\n      \"title\": \"执行栈与任务队列\",\n      \"slug\": \"执行栈与任务队列\"\n    }, {\n      \"level\": 3,\n      \"title\": \"执行栈\",\n      \"slug\": \"执行栈\"\n    }, {\n      \"level\": 3,\n      \"title\": \"主线程\",\n      \"slug\": \"主线程\"\n    }, {\n      \"level\": 3,\n      \"title\": \"js 异步执行的运行机制。\",\n      \"slug\": \"js-异步执行的运行机制。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"宏任务与微任务:\",\n      \"slug\": \"宏任务与微任务\"\n    }, {\n      \"level\": 2,\n      \"title\": \"Event Loop(事件循环)：\",\n      \"slug\": \"event-loop-事件循环-：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"面试题实践\",\n      \"slug\": \"面试题实践\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-f9c3508ae0515\",\n    \"path\": \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",\n    \"lastUpdated\": null,\n    \"title\": \"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",\n      \"slug\": \"js高程中的垃圾回收机制与常见内存泄露的解决方法\"\n    }, {\n      \"level\": 3,\n      \"title\": \"内存的生命周期：\",\n      \"slug\": \"内存的生命周期：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"垃圾回收机制：\",\n      \"slug\": \"垃圾回收机制：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"垃圾收集机制的原理：\",\n      \"slug\": \"垃圾收集机制的原理：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"标记清除：当前采用的垃圾收集策略\",\n      \"slug\": \"标记清除：当前采用的垃圾收集策略\"\n    }, {\n      \"level\": 3,\n      \"title\": \"引用计数略：被废弃的垃圾收集策略\",\n      \"slug\": \"引用计数略：被废弃的垃圾收集策略\"\n    }, {\n      \"level\": 2,\n      \"title\": \"哪些情况会引起内存泄漏？\",\n      \"slug\": \"哪些情况会引起内存泄漏？\"\n    }, {\n      \"level\": 3,\n      \"title\": \"意外的全局变量：\",\n      \"slug\": \"意外的全局变量：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"被遗忘的定时器和回调函数\",\n      \"slug\": \"被遗忘的定时器和回调函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"闭包：\",\n      \"slug\": \"闭包：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"循环引用问题\",\n      \"slug\": \"循环引用问题\"\n    }, {\n      \"level\": 3,\n      \"title\": \"没有清理DOM元素引用：\",\n      \"slug\": \"没有清理dom元素引用：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"console保存大量数据在内存中。\",\n      \"slug\": \"console保存大量数据在内存中。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"如何避免内存泄漏：\",\n      \"slug\": \"如何避免内存泄漏：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"关于内存泄漏：\",\n      \"slug\": \"关于内存泄漏：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-0cd437a0e79e2\",\n    \"path\": \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",\n    \"lastUpdated\": null,\n    \"title\": \"JS忍者秘籍中的定时器机制详解\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"JS忍者秘籍中的定时器机制详解\",\n      \"slug\": \"js忍者秘籍中的定时器机制详解\"\n    }, {\n      \"level\": 3,\n      \"title\": \"准备\",\n      \"slug\": \"准备\"\n    }, {\n      \"level\": 3,\n      \"title\": \"定时器解决的问题：\",\n      \"slug\": \"定时器解决的问题：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"设置和清除定时器：\",\n      \"slug\": \"设置和清除定时器：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"注意：\",\n      \"slug\": \"注意：\"\n    }, {\n      \"level\": 2,\n      \"title\": \"执行线程中的定时器执行\",\n      \"slug\": \"执行线程中的定时器执行\"\n    }, {\n      \"level\": 3,\n      \"title\": \"事件排队。\",\n      \"slug\": \"事件排队。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"先进先出(先排队的先执行)\",\n      \"slug\": \"先进先出-先排队的先执行\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setInterval调用被废弃\",\n      \"slug\": \"setinterval调用被废弃\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setTimeout/setInterval无法保证准时执行回调函数\",\n      \"slug\": \"settimeout-setinterval无法保证准时执行回调函数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setInterval的连续执行\",\n      \"slug\": \"setinterval的连续执行\"\n    }, {\n      \"level\": 3,\n      \"title\": \"setTimeout按照一定的间隔周期性的触发定时器。\",\n      \"slug\": \"settimeout按照一定的间隔周期性的触发定时器。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"忍者秘籍中关于定时器的其他知识：\",\n      \"slug\": \"忍者秘籍中关于定时器的其他知识：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"任务队列只有排队这么简单吗？\",\n      \"slug\": \"任务队列只有排队这么简单吗？\"\n    }, {\n      \"level\": 2,\n      \"title\": \"小结\",\n      \"slug\": \"小结\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-b1a912bda55b7\",\n    \"path\": \"/algorithm/\",\n    \"lastUpdated\": 1536751480000,\n    \"title\": \"前端算法\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"前端算法\",\n      \"slug\": \"前端算法\"\n    }, {\n      \"level\": 2,\n      \"title\": \"前端积累\",\n      \"slug\": \"前端积累\"\n    }, {\n      \"level\": 3,\n      \"title\": \"公众号：\",\n      \"slug\": \"公众号：\"\n    }]\n  }, {\n    \"key\": \"v-88f1a7b4e2a33\",\n    \"path\": \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",\n    \"lastUpdated\": 1536751480000,\n    \"title\": \"反转一个 3 位整数\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"转数组操作:\",\n      \"slug\": \"转数组操作\"\n    }, {\n      \"level\": 3,\n      \"title\": \"取余数，逐个颠倒\",\n      \"slug\": \"取余数，逐个颠倒\"\n    }, {\n      \"level\": 3,\n      \"title\": \"拼接字符串：\",\n      \"slug\": \"拼接字符串：\"\n    }]\n  }, {\n    \"key\": \"v-941d166fbe5b7\",\n    \"path\": \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",\n    \"lastUpdated\": 1537360696000,\n    \"title\": \"找出数组重复次数最多的元素\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"找出数组重复次数最多的元素\",\n      \"slug\": \"找出数组重复次数最多的元素\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }]\n  }, {\n    \"key\": \"v-617bfc99cfe53\",\n    \"path\": \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",\n    \"lastUpdated\": 1537203231000,\n    \"title\": \"查找斐波纳契数列中第 N 个数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"查找斐波纳契数列中第 N 个数\",\n      \"slug\": \"查找斐波纳契数列中第-n-个数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述\",\n      \"slug\": \"描述\"\n    }, {\n      \"level\": 3,\n      \"title\": \"怎样算解成功：\",\n      \"slug\": \"怎样算解成功：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"code:\",\n      \"slug\": \"code\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码地址\",\n      \"slug\": \"代码地址\"\n    }]\n  }, {\n    \"key\": \"v-10e90f7f208e9\",\n    \"path\": \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",\n    \"lastUpdated\": 1537203231000,\n    \"title\": \"水仙花数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"水仙花数\",\n      \"slug\": \"水仙花数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"水仙花数的定义：\",\n      \"slug\": \"水仙花数的定义：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析:\",\n      \"slug\": \"题目分析\"\n    }, {\n      \"level\": 3,\n      \"title\": \"判断一个数是否为水仙花数：\",\n      \"slug\": \"判断一个数是否为水仙花数：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"找出所有的n位十进制水仙花数\",\n      \"slug\": \"找出所有的n位十进制水仙花数\"\n    }]\n  }, {\n    \"key\": \"v-3230f7010456a\",\n    \"path\": \"/algorithm/simple/template.html\",\n    \"lastUpdated\": 1539001153000,\n    \"title\": \"标题\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"标题\",\n      \"slug\": \"标题\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-95edeed7f13a5\",\n    \"path\": \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",\n    \"lastUpdated\": 1538209050000,\n    \"title\": \"两数之和\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"两数之和\",\n      \"slug\": \"两数之和\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-4dbcc658b8b1e\",\n    \"path\": \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",\n    \"lastUpdated\": 1538290595000,\n    \"title\": \"中位数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"中位数\",\n      \"slug\": \"中位数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-e230cbbc1c881\",\n    \"path\": \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",\n    \"lastUpdated\": 1537692909000,\n    \"title\": \"分解质因数\",\n    \"headers\": [{\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"质因数的定义：\",\n      \"slug\": \"质因数的定义：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }]\n  }, {\n    \"key\": \"v-fbe544b93fc62\",\n    \"path\": \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"反转整数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"反转整数\",\n      \"slug\": \"反转整数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述\",\n      \"slug\": \"描述\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"解法：\",\n      \"slug\": \"解法：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"提示:\",\n      \"slug\": \"提示\"\n    }, {\n      \"level\": 3,\n      \"title\": \"code:\",\n      \"slug\": \"code\"\n    }, {\n      \"level\": 3,\n      \"title\": \"转数组操作运行效率也更高点：\",\n      \"slug\": \"转数组操作运行效率也更高点：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"github 算法仓库地址\",\n      \"slug\": \"github-算法仓库地址\"\n    }]\n  }, {\n    \"key\": \"v-45f69dd67d2fe\",\n    \"path\": \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",\n    \"lastUpdated\": 1537686805000,\n    \"title\": \"合并排序数组\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"合并排序数组\",\n      \"slug\": \"合并排序数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"sort排序\",\n      \"slug\": \"sort排序\"\n    }, {\n      \"level\": 3,\n      \"title\": \"先对比完一个数组：\",\n      \"slug\": \"先对比完一个数组：\"\n    }]\n  }, {\n    \"key\": \"v-ab2ae2491aa72\",\n    \"path\": \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"删除一个字母的回文\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"删除一个字母的回文\",\n      \"slug\": \"删除一个字母的回文\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述\",\n      \"slug\": \"描述\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"code:\",\n      \"slug\": \"code\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码地址\",\n      \"slug\": \"代码地址\"\n    }, {\n      \"level\": 3,\n      \"title\": \"github 算法仓库地址\",\n      \"slug\": \"github-算法仓库地址\"\n    }]\n  }, {\n    \"key\": \"v-3affd9a30cddf\",\n    \"path\": \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",\n    \"lastUpdated\": 1536303293000,\n    \"title\": \"姓名去重\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"姓名去重\",\n      \"slug\": \"姓名去重\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述\",\n      \"slug\": \"描述\"\n    }, {\n      \"level\": 3,\n      \"title\": \"说明：\",\n      \"slug\": \"说明：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"这题很简单,自己想一下！\",\n      \"slug\": \"这题很简单-自己想一下！-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"code:\",\n      \"slug\": \"code\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目比较简单，就不放代码(上面就是)了。\",\n      \"slug\": \"题目比较简单，就不放代码-上面就是-了。\"\n    }, {\n      \"level\": 3,\n      \"title\": \"github 算法仓库地址\",\n      \"slug\": \"github-算法仓库地址\"\n    }]\n  }, {\n    \"key\": \"v-6307a16003a12\",\n    \"path\": \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",\n    \"lastUpdated\": 1538187537000,\n    \"title\": \"字符串密钥格式\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"字符串密钥格式\",\n      \"slug\": \"字符串密钥格式\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }]\n  }, {\n    \"key\": \"v-ff10f4d51edc6\",\n    \"path\": \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",\n    \"lastUpdated\": 1537692909000,\n    \"title\": \"搜索二维矩阵\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"搜索二维矩阵\",\n      \"slug\": \"搜索二维矩阵\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"题目分析：\",\n      \"slug\": \"题目分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }]\n  }, {\n    \"key\": \"v-17edd118e5fbc\",\n    \"path\": \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",\n    \"lastUpdated\": 1538050772000,\n    \"title\": \"最大子数组\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"最大子数组\",\n      \"slug\": \"最大子数组\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"最大和的数组：\",\n      \"slug\": \"最大和的数组：\"\n    }]\n  }, {\n    \"key\": \"v-0c2f4ba4fb476\",\n    \"path\": \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n    \"lastUpdated\": 1538187537000,\n    \"title\": \"比较字符串\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"比较字符串\",\n      \"slug\": \"比较字符串\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-0c7003aa95c94\",\n    \"path\": \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",\n    \"lastUpdated\": 1539017559000,\n    \"title\": \"落单的数\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"落单的数\",\n      \"slug\": \"落单的数\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }, {\n    \"key\": \"v-68e2a94fbdb49\",\n    \"path\": \"/algorithm/template.html\",\n    \"lastUpdated\": 1538209050000,\n    \"title\": \"标题\",\n    \"headers\": [{\n      \"level\": 2,\n      \"title\": \"标题\",\n      \"slug\": \"标题\"\n    }, {\n      \"level\": 3,\n      \"title\": \"难度：简单\",\n      \"slug\": \"难度：简单\"\n    }, {\n      \"level\": 3,\n      \"title\": \"描述：\",\n      \"slug\": \"描述：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"样例：\",\n      \"slug\": \"样例：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"思路分析：\",\n      \"slug\": \"思路分析：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码模板：\",\n      \"slug\": \"代码模板：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-2\"\n    }, {\n      \"level\": 3,\n      \"title\": \"想一想再看答案\",\n      \"slug\": \"想一想再看答案-3\"\n    }, {\n      \"level\": 3,\n      \"title\": \"代码：\",\n      \"slug\": \"代码：\"\n    }, {\n      \"level\": 3,\n      \"title\": \"鼓励我一下：\",\n      \"slug\": \"鼓励我一下：\"\n    }]\n  }],\n  \"themeConfig\": {\n    \"nav\": [{\n      \"text\": \"前端积累\",\n      \"link\": \"/accumulate/\"\n    }, {\n      \"text\": \"前端算法\",\n      \"link\": \"/algorithm/\"\n    }, {\n      \"text\": \"博客\",\n      \"link\": \"http://obkoro1.com/\"\n    }, {\n      \"text\": \"GitHub\",\n      \"items\": [{\n        \"text\": \"GitHub地址\",\n        \"link\": \"https://github.com/OBKoro1\"\n      }, {\n        \"text\": \"算法仓库\",\n        \"link\": \"https://github.com/OBKoro1/Brush_algorithm\"\n      }, {\n        \"text\": \"积累仓库\",\n        \"link\": \"https://github.com/OBKoro1/web_accumulate\"\n      }, {\n        \"text\": \"VsCode插件仓库\",\n        \"link\": \"https://github.com/OBKoro1/koro1FileHeader/blob/b03ef6c8c5c61bd1276c45fe5f108ad92f3ee7b8/README_zh-cn.md\"\n      }]\n    }],\n    \"sidebar\": {\n      \"/accumulate/\": [\"/accumulate/\", {\n        \"title\": \"JS\",\n        \"children\": [\"/accumulate/JS/数组API解析合集\", \"/accumulate/JS/时间差与时区转换\", \"/accumulate/JS/Object.defineProperty\", \"/accumulate/JS/函数防抖和函数节流\", \"/accumulate/JS/数组完全乱序\", \"/accumulate/JS/多维数组展开\", \"/accumulate/JS/高性能js\", \"/accumulate/JS/cookie和storage的使用以及区别\", \"/accumulate/JS/随机数组成的数组\"]\n      }, {\n        \"title\": \"Vue\",\n        \"children\": [\"/accumulate/Vue/vue钩子函数\", \"/accumulate/Vue/你或许不知道Vue的这些小技巧\", \"/accumulate/Vue/vue小技巧\", \"/accumulate/Vue/vue定义全局函数\", \"/accumulate/Vue/极简双向绑定\", \"/accumulate/Vue/弹窗\"]\n      }, {\n        \"title\": \"功能\",\n        \"children\": [\"/accumulate/effect/input的一些坑点分享\", \"/accumulate/effect/前端弹幕效果实现思路\", \"/accumulate/effect/正则表达式收集\", \"/accumulate/effect/复制粘贴系列\", \"/accumulate/effect/判断用户浏览器\", \"/accumulate/effect/显示隐藏密码\"]\n      }, {\n        \"title\": \"工具/浏览器/机制\",\n        \"children\": [\"/accumulate/tool/js垃圾回收机制\", \"/accumulate/tool/忍者秘籍定时器机制\", \"/accumulate/tool/js事件循环机制\", \"/accumulate/tool/http缓存\"]\n      }, {\n        \"title\": \"面试题\",\n        \"children\": [\"/accumulate/interviewQuestion/树状数组结构转化\"]\n      }, {\n        \"title\": \"CSS\",\n        \"children\": [\"/accumulate/CSS/CSS权重规则\", \"/accumulate/CSS/CSS概念-BFC深入浅出\"]\n      }, {\n        \"title\": \"其他\",\n        \"children\": [\"/accumulate/amateur/VsCode文件头部注释生成\", \"/accumulate/amateur/推箱子\"]\n      }],\n      \"/algorithm/\": [\"/algorithm/\", {\n        \"title\": \"入门\",\n        \"children\": [\"/algorithm/induction/查找斐波纳契数列中第N个数\", \"/algorithm/induction/数组重复次数\", \"/algorithm/induction/水仙花数\", \"/algorithm/induction/反转3位整数\"]\n      }, {\n        \"title\": \"简单\",\n        \"children\": [\"/algorithm/simple/落单的数\", \"/algorithm/simple/中位数\", \"/algorithm/simple/两数之和\", \"/algorithm/simple/比较字符串\", \"/algorithm/simple/最大子数组\", \"/algorithm/simple/字符串密钥格式\", \"/algorithm/simple/搜索二维矩阵\", \"/algorithm/simple/合并排序数组\", \"/algorithm/simple/分解质因数\", \"/algorithm/simple/姓名去重\", \"/algorithm/simple/反转整数\", \"/algorithm/simple/回文\"]\n      }]\n    },\n    \"sidebarDepth\": 2,\n    \"lastUpdated\": \"Last Updated\"\n  }\n};\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/.temp/enhanceApp.js\n\n/* harmony default export */ var enhanceApp = (function () {});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/.temp/themeEnhanceApp.js\n/* harmony default export */ var themeEnhanceApp = (function () {});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/Content.js\n/* harmony default export */ var Content = ({\n  functional: true,\n  props: {\n    custom: {\n      type: Boolean,\n      default: true\n    }\n  },\n  render: function render(h, _ref) {\n    var parent = _ref.parent,\n        props = _ref.props,\n        data = _ref.data;\n    return h(parent.$page.key, {\n      class: [props.custom ? 'custom' : '', data.class, data.staticClass],\n      style: data.style\n    });\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue?vue&type=template&id=38c6e7a6&functional=true&\nvar OutboundLinkvue_type_template_id_38c6e7a6_functional_true_render = function (_h,_vm) {var _c=_vm._c;return _c('svg',{staticClass:\"icon outbound\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"aria-hidden\":\"true\",\"x\":\"0px\",\"y\":\"0px\",\"viewBox\":\"0 0 100 100\",\"width\":\"15\",\"height\":\"15\"}},[_vm._ssrNode(\"<path fill=\\\"currentColor\\\" d=\\\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\\\"></path> <polygon fill=\\\"currentColor\\\" points=\\\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\\\"></polygon>\")])}\nvar OutboundLinkvue_type_template_id_38c6e7a6_functional_true_staticRenderFns = []\n\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue?vue&type=template&id=38c6e7a6&functional=true&\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue\n\nvar OutboundLink_script = {}\nfunction OutboundLink_injectStyles (context) {\n  \n  var style0 = __webpack_require__(141)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar OutboundLink_component = Object(componentNormalizer[\"a\" /* default */])(\n  OutboundLink_script,\n  OutboundLinkvue_type_template_id_38c6e7a6_functional_true_render,\n  OutboundLinkvue_type_template_id_38c6e7a6_functional_true_staticRenderFns,\n  true,\n  OutboundLink_injectStyles,\n  null,\n  \"3ba4d5be\"\n  \n)\n\nOutboundLink_component.options.__file = \"OutboundLink.vue\"\n/* harmony default export */ var OutboundLink = (OutboundLink_component.exports);\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/ClientOnly.js\n/* harmony default export */ var ClientOnly = ({\n  functional: true,\n  render: function render(h, _ref) {\n    var parent = _ref.parent,\n        children = _ref.children;\n\n    if (parent._isMounted) {\n      return children;\n    } else {\n      parent.$once('hook:mounted', function () {\n        parent.$forceUpdate();\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/app.js\n\n\n\n\n\n\n\n\n // generated from user config\n\n__webpack_require__.e(/* import() */ 1).then(__webpack_require__.t.bind(null, 145, 7)); // built-in components\n\n\n\n // suggest dev server restart on base change\n\nif (false) { var prevBase; }\n\nexternal_vue_default.a.config.productionTip = false;\nexternal_vue_default.a.use(external_vue_router_default.a); // mixin for exposing $site and $page\n\nexternal_vue_default.a.mixin(dataMixin(siteData_siteData)); // component for rendering markdown content and setting title etc.\n\nexternal_vue_default.a.component('Content', Content);\nexternal_vue_default.a.component('OutboundLink', OutboundLink);\nexternal_vue_default.a.component('Badge', function () {\n  return __webpack_require__.e(/* import() */ 2).then(__webpack_require__.bind(null, 172));\n}); // component for client-only content\n\nexternal_vue_default.a.component('ClientOnly', ClientOnly); // global helper for adding base path to absolute urls\n\nexternal_vue_default.a.prototype.$withBase = function (path) {\n  var base = this.$site.base;\n\n  if (path.charAt(0) === '/') {\n    return base + path.slice(1);\n  } else {\n    return path;\n  }\n};\n\nfunction createApp() {\n  var router = new external_vue_router_default.a({\n    base: siteData_siteData.base,\n    mode: 'history',\n    fallback: false,\n    routes: routes_routes,\n    scrollBehavior: function scrollBehavior(to, from, saved) {\n      if (saved) {\n        return saved;\n      } else if (to.hash) {\n        if (app_store.disableScrollBehavior) {\n          return false;\n        }\n\n        return {\n          selector: to.hash\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0\n        };\n      }\n    }\n  }); // redirect /foo to /foo/\n\n  router.beforeEach(function (to, from, next) {\n    if (!/(\\/|\\.html)$/.test(to.path)) {\n      next(Object.assign({}, to, {\n        path: to.path + '/'\n      }));\n    } else {\n      next();\n    }\n  });\n  var options = {};\n  themeEnhanceApp({\n    Vue: external_vue_default.a,\n    options: options,\n    router: router,\n    siteData: siteData_siteData\n  });\n  enhanceApp({\n    Vue: external_vue_default.a,\n    options: options,\n    router: router,\n    siteData: siteData_siteData\n  });\n  var app = new external_vue_default.a(Object.assign(options, {\n    router: router,\n    render: function render(h) {\n      return h('div', {\n        attrs: {\n          id: 'app'\n        }\n      }, [h('router-view', {\n        ref: 'layout'\n      })]);\n    }\n  }));\n  return {\n    app: app,\n    router: router\n  };\n}\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/serverEntry.js\n\n\n/* harmony default export */ var serverEntry = __webpack_exports__[\"default\"] = (function (context) {\n  return new Promise(function (resolve, reject) {\n    var _createApp = createApp(),\n        app = _createApp.app,\n        router = _createApp.router;\n\n    var url = context.url;\n    var fullPath = router.resolve(url).route.fullPath;\n\n    if (fullPath !== url) {\n      return reject({\n        url: fullPath\n      });\n    }\n\n    router.push(url);\n    router.onReady(function () {\n      return resolve(app);\n    });\n  });\n});\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=server-bundle.js.map",
    "2.server-bundle.js": "exports.ids = [2];\nexports.modules = {\n\n/***/ 143:\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n\n/***/ 144:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(143);\n/* harmony import */ var _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_0_28_11_css_loader_locals_js_ref_13_oneOf_1_0_node_modules_vue_loader_15_4_1_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_2_1_6_postcss_loader_lib_index_js_ref_13_oneOf_1_1_node_modules_stylus_loader_3_0_2_stylus_loader_index_js_ref_13_oneOf_1_2_node_modules_cache_loader_1_2_2_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_15_4_1_vue_loader_lib_index_js_vue_loader_options_Badge_vue_vue_type_style_index_0_id_f9f5240a_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n/***/ }),\n\n/***/ 172:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!/usr/local/lib/node_modules/vuepress/node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib??ref--3-1!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??vue-loader-options!/usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue?vue&type=script&lang=js&\n/* harmony default export */ var Badgevue_type_script_lang_js_ = ({\n  functional: true,\n  props: {\n    type: {\n      type: String,\n      default: 'tip'\n    },\n    text: String,\n    vertical: {\n      type: String,\n      default: 'top'\n    }\n  },\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        slots = _ref.slots;\n    return h('span', {\n      class: ['badge', props.type, props.vertical]\n    }, props.text || slots().default);\n  }\n});\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_Badgevue_type_script_lang_js_ = (Badgevue_type_script_lang_js_); \n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue\nvar render, staticRenderFns\n\n\nfunction injectStyles (context) {\n  \n  var style0 = __webpack_require__(144)\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  components_Badgevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"f9f5240a\",\n  \"dfda29c2\"\n  \n)\n\ncomponent.options.__file = \"Badge.vue\"\n/* harmony default export */ var Badge = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=2.server-bundle.js.map",
    "3.server-bundle.js": "exports.ids = [3];\nexports.modules = {\n\n/***/ 181:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/README.md?vue&type=template&id=0bef33da&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"其他：\\\"><a href=\\\"#其他：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 其他：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)])]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>社区求关注：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"掘金\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/u/obkoro1/articles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"segmentfault\"),_c('OutboundLink')],2)])],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>VsCode插件了解一下:</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/koro1FileHeader\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"VsCode文件头部注释生成插件\"),_c('OutboundLink')],2)])],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2)])],2),_vm._ssrNode(\" <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">最新更新都在公众号上</p> <p>本文档的最新更新，以及新的文章，算法题，面试题等都会第一时间发布在公众号上。</p></div> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/about/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"关于我\"),_c('OutboundLink')],2)])])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/README.md?vue&type=template&id=0bef33da&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/README.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"7af0d7d2\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\n/* harmony default export */ var README = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=3.server-bundle.js.map",
    "4.server-bundle.js": "exports.ids = [4];\nexports.modules = {\n\n/***/ 183:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/CSS/CSS权重规则.md?vue&type=template&id=419f8fde&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"css-权重规则\\\"><a href=\\\"#css-权重规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 权重规则</h2> <p>日常开发中，或多或少都会遇到css规则不生效的问题，为了让我们能够减少调试css规则的时间，深刻理解css权重，就十分关键了.</p> <h2 id=\\\"权重规则总结\\\"><a href=\\\"#权重规则总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重规则总结:</h2> <ol><li>!important 优先级最高，但也会被权重高的 important 所覆盖</li> <li>行内样式总会覆盖外部样式表的任何样式(除了!important)</li> <li>单独使用一个选择器的时候，不能跨等级使 css 规则生效</li> <li>如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</li> <li>如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</li> <li>权重相同时，与元素距离近的选择器生效</li></ol> <hr> <h3 id=\\\"css-权重优先级用来干嘛？\\\"><a href=\\\"#css-权重优先级用来干嘛？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> css 权重优先级用来干嘛？</h3> <p>在同一个元素使用不同的方式，声明了相同的一条或多条 css 规则，<strong>浏览器会通过权重来判断哪一种方式的声明，与这个元素最为相关，从而在该元素上应用这个声明方式声明的所有 css 规则</strong>。</p> <h3 id=\\\"权重的五个等级及其权重\\\"><a href=\\\"#权重的五个等级及其权重\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重的五个等级及其权重</h3> <ul><li><p>!important;</p></li> <li><p>行内样式;</p></li> <li><p>ID 选择器, 权重:100;</p></li> <li><p>class,属性选择器和伪类选择器，权重:10;</p> <p>属性选择器指的是:根据元素的属性及属性值来选择元素，比如button的type属性等。\\n伪类选择器: :active :focus等选项.</p></li> <li><p>标签选择器和伪元素选择器，权重:1;</p> <p>伪元素选择器： :before :after</p></li></ul> <h3 id=\\\"等级关系\\\"><a href=\\\"#等级关系\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 等级关系:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">!</span>important<span class=\\\"token operator\\\">&gt;</span>行内样式<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token constant\\\">ID</span>选择器 <span class=\\\"token operator\\\">&gt;</span> 类选择器 <span class=\\\"token operator\\\">|</span> 属性选择器 <span class=\\\"token operator\\\">|</span> 伪类选择器 <span class=\\\"token operator\\\">&gt;</span> 元素选择器\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><hr> <h2 id=\\\"权重规则：\\\"><a href=\\\"#权重规则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重规则：</h2> <h3 id=\\\"_1-不推荐使用-important\\\"><a href=\\\"#_1-不推荐使用-important\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1.不推荐使用!important</h3> <p>不推荐使用<code>!important</code>，因为<code>!important</code>根本没有结构与上下文可言，并且很多时候权重的问题，就是因为不知道在哪里定义了一个<code>!important</code>而导致的。</p> <h4 id=\\\"覆盖-important\\\"><a href=\\\"#覆盖-important\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 覆盖 important:</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"虽然我们应该尽量避免使用!important，但你应该知道如何覆盖 important，加点权重就可以实现，codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/ZoVxgQ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">//!important 优先级最高，但也会被权重高的important所覆盖\\n&lt;button id=&quot;a&quot; class=&quot;a&quot;&gt;aaa&lt;/button&gt;\\n#a</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> blue  <span class=\\\"token important\\\">!important</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">/* id的important覆盖class的important*/</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.a</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> red  <span class=\\\"token important\\\">!important</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\\\"><a href=\\\"#_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2.行内样式总会覆盖外部样式表的任何样式,会被<code>!important</code>覆盖</h3> <h3 id=\\\"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\\\"><a href=\\\"#_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.单独使用一个选择器的时候，不能跨等级使 css 规则生效</h3> <p><strong>无论多少个 class 组成的选择器，都没有一个 ID 选择器权重高</strong>。类似的，无论多少个元素组成的选择器，都没有一个 class 选择器权重高、无论多少个 ID 组成的选择器，都没有行内样式权重高。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/ZoVxgQ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\";\")],2),_vm._ssrNode(\" <pre><code>    在demo中使用了11个class组成一个选择器，最后还是一个ID选择器，设置的样式生效。\\n</code></pre> <h4 id=\\\"可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\\\"><a href=\\\"#可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。</h4> <p>所以权重是在双方处于同一等级的情况下，才开始对比。</p> <h3 id=\\\"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\\\"><a href=\\\"#_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</h3> <p>选择器可能会包含一个或者多个与权重相关的计算点，若经过权重值计算得到的权重值越大，则认为这个选择器的权重高。举一个简单的栗子:</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.test #test</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span> // id 100+class 10=110<span class=\\\"token selector\\\">;\\n.test #test span</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> // id 100+class 10+span 1=111<span class=\\\"token selector\\\">;\\n.test #test .sonClass</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> // id 100+class 10+class 10=120<span class=\\\"token punctuation\\\">;</span> //生效\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\\\"><a href=\\\"#_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/jxXKez\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">&lt;div id=&quot;app&quot;&gt;\\n    &lt;div class=&quot;test&quot; id=&quot;test&quot;&gt;\\n    &lt;span &gt;啦啦啦&lt;/span&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n#test span</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">#app span</span><span class=\\\"token punctuation\\\">{</span> // 生效 因为后面出现\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h3 id=\\\"_6-权重相同时，与元素距离近的选择器生效\\\"><a href=\\\"#_6-权重相同时，与元素距离近的选择器生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 6.权重相同时，与元素距离近的选择器生效</h3> <p>比如不同的 style 表，head 头部等,来看下面的栗子：</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">#content h1</span> <span class=\\\"token punctuation\\\">{</span> // css样式表中\\n    <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 5px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">&lt;style type=&quot;text/css&quot;&gt;\\n    #content h1</span> <span class=\\\"token punctuation\\\">{</span> // html头部 因为html头部离元素更近一点，所以生效\\n    <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 10px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n&lt;/style&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h2 id=\\\"建议：\\\"><a href=\\\"#建议：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 建议：</h2> <ol><li>避免使用<code>!important</code>;</li> <li>利用 id 增加选择器权重;</li> <li>减少选择器的个数（避免层层嵌套）;</li></ol> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/CSS/CSS权重规则.md?vue&type=template&id=419f8fde&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/CSS/CSS权重规则.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"6a175957\"\n  \n)\n\ncomponent.options.__file = \"CSS权重规则.md\"\n/* harmony default export */ var CSS_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=4.server-bundle.js.map",
    "5.server-bundle.js": "exports.ids = [5];\nexports.modules = {\n\n/***/ 184:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/CSS/CSS概念-BFC深入浅出.md?vue&type=template&id=b9779558&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"css-概念-bfc-深入浅出\\\"><a href=\\\"#css-概念-bfc-深入浅出\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 概念-BFC 深入浅出</h3> <p>好记性不如烂笔头，研究了一下 BFC，发现里面比较细的东西也是很多的！关于 BFC，很多人可能都听说过 BFC 这个东西，大概知道这是个啥东西，相信很多人对此并没有一个非常细致的了解，本文预计篇幅较长，认真，耐着性子看，应该都能够比较深入的理解 BFC 这个概念的规则、作用以及用法。希望喜欢的朋友可以点个赞，或者关注一波本人，谢谢。</p> <h2 id=\\\"bfc-是什么鬼？\\\"><a href=\\\"#bfc-是什么鬼？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 是什么鬼？</h2> <p><strong>所谓的 BFC 就是 css 布局的一个概念，是一块区域，一个环境。</strong></p> <p>先稳住别懵逼，接着往下走。</p> <h3 id=\\\"关于-bfc-的定义：\\\"><a href=\\\"#关于-bfc-的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于 BFC 的定义：</h3> <p>BFC(Block formatting context)直译为&quot;块级格式化上下文&quot;。它<strong>是一个独立的渲染区域</strong>，只有<strong>Block-level box</strong>参与（在下面有解释）， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p> <h3 id=\\\"通俗的说\\\"><a href=\\\"#通俗的说\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通俗的说:</h3> <p>BFC 可以简单的理解为<strong>某个元素的一个 CSS 属性</strong>，拥有这个属性的元素<strong>对内部元素和外部元素会表现出一些特性，这就是 BFC</strong>。</p> <h3 id=\\\"触发条件\\\"><a href=\\\"#触发条件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 触发条件</h3> <p><strong>满足下列条件之一就可触发 BFC</strong></p> <ol><li><p>根元素，即 HTML 元素</p></li> <li><p><code>float</code>的值不为<code>none</code></p></li> <li><p><code>overflow</code>的值不为<code>visible</code></p></li> <li><p><code>display</code>的值为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code></p></li> <li><p><code>position</code>的值为<code>absolute</code>或<code>fixed</code></p></li></ol> <h3 id=\\\"bfc-布局规则：\\\"><a href=\\\"#bfc-布局规则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则：</h3> <ol><li><p>内部的 Box 会在垂直方向，一个接一个地放置。</p></li> <li><p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p></li> <li><p>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p></li> <li><p>BFC 的区域不会与 float box 重叠。</p></li> <li><p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p></li> <li><p>计算 BFC 的高度时，浮动元素也参与计算</p></li></ol> <h3 id=\\\"bfc-有哪些作用：\\\"><a href=\\\"#bfc-有哪些作用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 有哪些作用：</h3> <ol><li>自适应两栏布局</li> <li>可以阻止元素被浮动元素覆盖</li> <li>可以包含浮动元素——清除内部浮动</li> <li>分属于不同的 BFC 时可以阻止 margin 重叠</li></ol> <hr> <h2 id=\\\"bfc-的规则和作用介绍\\\"><a href=\\\"#bfc-的规则和作用介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 的规则和作用介绍:</h2> <h4 id=\\\"bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\\\"><a href=\\\"#bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 1：内部的 Box 会在垂直方向，一个接一个地放置。</h4> <p>上文定义中提到过的块级盒：block-level box，在这里解析一波：</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/b80801d8707be24ecbc0\\\" alt=\\\"这个就是我们平常操作盒子的组成\\\"></p> <p>我们平常说的盒子是由 margin、border、padding、content 组成的，实际上每种类型的四条边定义了一个盒子，分别是分别是<strong>content box、padding box、border box、margin box</strong>，这四种类型的盒子一直存在，即使他们的值为 0.决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。</p> <p><strong>提示</strong>：Box 之间的距离虽然也可以使用 padding 来控制，但是此时实际上还是属于 box 内部里面，而且使用 padding 来控制的话就不能再使用 border 属性了。</p> <p>布局规则 1 就是我们<strong>平常 div 一行一行块级放置的样式</strong>，大家想一下就知道了，这里就不展开了。</p> <h4 id=\\\"bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\\\"><a href=\\\"#bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 2：Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</h4> <p><img src=\\\"https://lc-gold-cdn.xitu.io/6b0fc0e3d34f94875d35.gif\\\" alt></p> <p>上文提到过，决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。，上面的栗子就是这种情况。</p> <p><strong>演示中 css 属性设置</strong>：上面的 box：margin-bottom: 100px;下面的 box：margin-top: 100px;（他们是同一侧的 margin，所以会发生 margin 重叠的情况，两个 div 的距离实际上只有 100px。）</p> <h4 id=\\\"bfc-的作用-4：阻止-margin-重叠\\\"><a href=\\\"#bfc-的作用-4：阻止-margin-重叠\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 的作用 4：阻止 margin 重叠:</h4> <p>当两个相邻块级子元素<strong>分属于不同的 BFC</strong>时可以<strong>阻止 margin 重叠</strong></p> <p><strong>操作方法</strong>:给其中一个 div 外面包一个 div，然后通过触发外面这个 div 的 BFC，就可以阻止这两个 div 的 margin 重叠</p> <p>下面是代码：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>aside<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!-- css代码 --&gt;</span>\\n.aside {\\n  margin-bottom: 100px; //margin属性\\n  width: 100px;\\n  height: 150px;\\n  background: #f66;\\n}\\n.main {\\n  margin-top: 100px; //margin属性\\n  height: 200px;\\n  background: #fcc;\\n}\\n.text {\\n  /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/\\n  overflow: hidden; //此时已经触发了BFC属性。\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br></div></div><p><strong>ps</strong>:触发方式可以参考上文给出的触发条件。</p> \"),_vm._ssrNode(\"<h4 id=\\\"这里有一个网址可以在线演示，通过演示，可以更直观一点：\\\">\",\"</h4>\",[_vm._ssrNode(\"<a href=\\\"#这里有一个网址可以在线演示，通过演示，可以更直观一点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这里有一个网址可以在\"),_vm._ssrNode(\"<a href=\\\"http://www.cnblogs.com/xiaohuochai/p/5248536.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"线演示\"),_c('OutboundLink')],2),_vm._ssrNode(\"，通过演示，可以更直观一点：\")],2),_vm._ssrNode(\" <p><img src=\\\"https://lc-gold-cdn.xitu.io/6daeb3cbf5f82d1f6db8.gif\\\" alt=\\\"这里面也是一篇好文章，关于BFC的\\\"></p> <h4 id=\\\"bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\\\"><a href=\\\"#bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 3：每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>par<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>child<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    //给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，但还是在父div的范围之内。\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>child<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><strong>解析</strong>：给这两个子 div 加浮动，浮动的结果，如果没有清除浮动的话，父 div 不会将下面两个 div 包裹，但还是在父 div 的范围之内，<strong>左浮是子 div 的左边接触父 div 的 borderbox 的左边，右浮是子 div 接触父 div 的 borderbox 右边</strong>，除非设置 margin 来撑开距离，否则一直是这个规则。</p> <h4 id=\\\"bfc-作用-3：可以包含浮动元素——清除内部浮动\\\"><a href=\\\"#bfc-作用-3：可以包含浮动元素——清除内部浮动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 作用 3：可以包含浮动元素——清除内部浮动</h4> <p>给父 divpar 加上 <code>overflow: hidden;</code></p> <p><strong>清除浮动原理</strong>:触发父 div 的 BFC 属性，使下面的子 div 都<strong>处在父 div 的同一个 BFC 区域之内</strong>，此时已成功清除浮动。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/dfe63a3d19cae8adf5fa.gif\\\" alt></p> <p>还可以向同一个方向浮动来达到清除浮动的目的，清除浮动的原理是两个 div 都位于同一个浮动的 BFC 区域之中。</p> <h4 id=\\\"bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\\\"><a href=\\\"#bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 4：BFC 的区域不会与 float box 重叠：</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>aside<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n.aside {\\n  width: 100px;\\n  height: 150px;\\n  float: left;\\n  background: #f66;\\n}\\n.main {\\n  height: 200px;\\n  overflow: hidden; //触发main盒子的BFC\\n  background: #fcc;\\n}\\n.text {\\n  width: 500px;\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div><p>上面 aside 盒子有一个浮动属性，覆盖了 main 盒子的内容，main 盒子没有清除 aside 盒子的浮动。只做了一个动作，就是<strong>触发自身的 BFC</strong>，然后就<strong>不再被 aside 盒子覆盖</strong>了。所以：<strong>BFC 的区域不会与 float box 重叠</strong>。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/0e2c7b710c4a13111120.gif\\\" alt></p> <h4 id=\\\"bfc-作用：自适应两栏布局。\\\"><a href=\\\"#bfc-作用：自适应两栏布局。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 作用：自适应两栏布局。</h4> <p><img src=\\\"https://lc-gold-cdn.xitu.io/304255779293ba4c2082.gif\\\" alt></p> <p>还是上面的代码，此时 BFC 的区域不会与 float box 重叠，因此<strong>会根据包含块（父 div）的宽度，和 aside 的宽度，自适应宽度。</strong></p> <hr> <h3 id=\\\"bfc-与-layout\\\"><a href=\\\"#bfc-与-layout\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 与 Layout</h3> <p>IE 作为浏览器中的奇葩，当然不可能按部就班的支持 BFC 标准，于是乎 IE 中有了 Layout 这个东西。<strong>Layout 和 BFC 基本是等价的</strong>，为了处理 IE 的兼容性，在需要触发 BFC 时，我们除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对 IE 浏览器使用 zoom: 1 来触发 IE 浏览器的 Layout。</p> <h3 id=\\\"有趣的文本\\\"><a href=\\\"#有趣的文本\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 有趣的文本:</h3> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.par</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">margin-top</span><span class=\\\"token punctuation\\\">:</span> 3rem<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 5px solid #fcc<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 300px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.child</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 5px solid #f66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">float</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p><img src=\\\"https://lc-gold-cdn.xitu.io/216207666aa8bef15115\\\" alt></p> <p><strong>原因：</strong></p> <p>这里两个 div 被撑开，是因为父 div 被 p 标签撑开了，并不是因为清除浮动的原因，从下面这张图片可以清楚的知道。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/5f7dc07585ae6c512bb8\\\" alt></p> <p>其实以上的几个例子都体现了 BFC 布局规则第五条————</p> <h4 id=\\\"bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\\\"><a href=\\\"#bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 5：BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</h4> <p><strong>文本环绕 float</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">float</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> #000<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 200px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> #AAA<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"> <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 30px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 30px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><img src=\\\"https://lc-gold-cdn.xitu.io/c02b2396d987f4d7439a\\\" alt></p> <p>问题：为什么 div 的左上角被覆盖了，而文本却没有被覆盖，float 不是应该跟普通流不在一个层级吗？是因为 float 属性不生效吗？</p> <p><strong>解决</strong>：</p> <p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在 CSS 中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/5994ed11ebc3e4b971db.gif\\\" alt></p> <p>从上图可以看到，float 属性确实生效，将 float 隐藏后，下面还有一个红色的 div，这个 div 是被黑色 div 所覆盖掉的。<strong>div 会被 float 覆盖，而文本却没有被 float 覆盖</strong>，是因为<strong>float 当初设计的时候</strong>就是为了<strong>使文本围绕在浮动对象的周围</strong>。</p> <p>以上。2017.5.4.</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/CSS/CSS概念-BFC深入浅出.md?vue&type=template&id=b9779558&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/CSS/CSS概念-BFC深入浅出.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1c3e2cb0\"\n  \n)\n\ncomponent.options.__file = \"CSS概念-BFC深入浅出.md\"\n/* harmony default export */ var CSS_BFC_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=5.server-bundle.js.map",
    "6.server-bundle.js": "exports.ids = [6];\nexports.modules = {\n\n/***/ 186:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/Object.defineProperty.md?vue&type=template&id=2e38b287&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"一次弄懂-object-defineproperty\\\"><a href=\\\"#一次弄懂-object-defineproperty\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一次弄懂 Object.defineProperty</h2> <h3 id=\\\"基本用法：\\\"><a href=\\\"#基本用法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本用法：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'周杰伦'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'青花瓷'</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'music'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token comment\\\">// music的值</span>\\n  <span class=\\\"token comment\\\">// configurable: false, // music默认不能删除 要删除须设置为true 设为true 可删除</span>\\n  <span class=\\\"token comment\\\">// writable: false,  // 默认不能修改music 设为true 可修改</span>\\n  <span class=\\\"token comment\\\">// enumerable: false, // music默认是不能被枚举(遍历) 设为true 可遍历</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷 删除无效</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'听妈妈的话'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷 修改无效</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// music 没有被遍历</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div><h4 id=\\\"默认不能修改、不能删除、不能遍历\\\"><a href=\\\"#默认不能修改、不能删除、不能遍历\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 默认不能修改、不能删除、不能遍历</h4> <p>通过栗子可以发现：通过 defineProperty 设置的属性，<strong>默认不能修改，不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</p> <h4 id=\\\"object-defineproperty的作用：\\\"><a href=\\\"#object-defineproperty的作用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>Object.defineProperty</code>的作用：</h4> <p><strong>完全掌控</strong>对象的某个属性，增删改查全都可以设定！</p> <h3 id=\\\"设置get、set：\\\"><a href=\\\"#设置get、set：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置<code>get</code>、<code>set</code>：</h3> <div class=\\\"danger custom-block\\\"><p class=\\\"custom-block-title\\\">不能同时设置</p> <p>get,set 设置时不能同时设置 writable 和 value, 他们是一对情侣的存在，交叉设置或同时存在,会报错</p></div> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'周杰伦'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'青花瓷'</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'music'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 设置可枚举</span>\\n  <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\\\"token comment\\\">// let value = &quot;强行设置get的返回值&quot;; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// value = val; // 将修改的值重新赋给song</span>\\n    value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'强行设置修改的值'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除无效</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'听妈妈的话'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 强行设置修改的值</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer, music 上面设置了enumerable可枚举</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br></div></div><p>这个<code>Object.defineProperty</code>的用法就是上面两个栗子中所展示的那样，可以将栗子<code>copy</code>到本地自己玩一下。</p>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/Object.defineProperty.md?vue&type=template&id=2e38b287&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/Object.defineProperty.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"99d884f8\"\n  \n)\n\ncomponent.options.__file = \"Object.defineProperty.md\"\n/* harmony default export */ var Object_defineProperty = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=6.server-bundle.js.map",
    "7.server-bundle.js": "exports.ids = [7];\nexports.modules = {\n\n/***/ 187:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/cookie和storage的使用以及区别.md?vue&type=template&id=0832f5ea&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"cookie、localstorage-和-sessionstorage-的使用以及区别\\\"><a href=\\\"#cookie、localstorage-和-sessionstorage-的使用以及区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cookie、localStorage 和 sessionStorage 的使用以及区别</h2> <h3 id=\\\"localstorage-和-sessionstorage-的增删改查：\\\"><a href=\\\"#localstorage-和-sessionstorage-的增删改查：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> localStorage 和 sessionStorage 的增删改查：</h3> <ol><li><p><strong>存储数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'key'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'sessionStorage的值'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 存储数据</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li> <li><p><strong>获取指定键名数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataSession<span class=\\\"token operator\\\">=</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'key'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取指定键名数据</span>\\n<span class=\\\"token keyword\\\">let</span> dataSession2<span class=\\\"token operator\\\">=</span>sessionStorage<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//sessionStorage是js对象，也可以使用key的方式来获取值</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>dataSession<span class=\\\"token punctuation\\\">,</span>dataSession2<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'获取指定键名数据'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div></li> <li><p><strong>获取sessionStorage全部数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataAll <span class=\\\"token operator\\\">=</span> sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">valueOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取全部数据</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>dataAll<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'获取全部数据'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div></li> <li><p><strong>清空sessionStorage数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清空</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li></ol> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">localStorage</p> <p>只要将<code>sessionStorage</code>替换成<code>localStorage</code>即可，他们两个的使用方法完全是一样的。</p></div> <h3 id=\\\"cookie-的增删改茶\\\"><a href=\\\"#cookie-的增删改茶\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cookie 的增删改茶:</h3> <ol><li><p><strong>保存 cookie 值：</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataCookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'110'</span><span class=\\\"token punctuation\\\">;</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>cookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'token'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'='</span> <span class=\\\"token operator\\\">+</span> dataCookie<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div></li> <li><p><strong>获取指定名称的 cookie 值</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> cookieData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 获取指定名称的cookie值</span>\\n  <span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'(^| )'</span> <span class=\\\"token operator\\\">+</span> name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'=([^;]*)(;|$)'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用正则匹配 对应cookie，返回数组</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">unescape</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> cookieData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// cookie赋值给变量。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div></li> <li><p>保存 cookie 并且设置过期时间：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'cookie的值'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span>value<span class=\\\"token punctuation\\\">,</span>expiresDays<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//存储 cookie 值并且设置 cookie 过期时间</span>\\n    <span class=\\\"token keyword\\\">let</span> date<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span>expiresDays<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">24</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">3600</span>\\\\<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token operator\\\">=</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>value<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">; expires=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toGMTString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'存储 cookie 值并且设置 cookie 过期时间'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div></li> <li><p>删除 cookie:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">delCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">delCookie</span><span class=\\\"token punctuation\\\">(</span>cookieName1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//删除cookie</span>\\n  <span class=\\\"token keyword\\\">let</span> date2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//把时间设置为过去的时间，会自动删除</span>\\n  document<span class=\\\"token punctuation\\\">.</span>cookie <span class=\\\"token operator\\\">=</span> cookieName1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'=v; expires='</span> <span class=\\\"token operator\\\">+</span> date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toGMTString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'删除cookie'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div></li></ol> <hr> <h3 id=\\\"三者的异同：\\\"><a href=\\\"#三者的异同：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 三者的异同：</h3> <p>这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别：</p> <p><strong>生命周期</strong>：</p> <p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p> <p>localStorage：除非被手动清除，否则将会永久保存。</p> <p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p> <p><strong>存放数据大小</strong>：</p> <p>cookie：4KB左右</p> <p>localStorage和sessionStorage：可以保存5MB的信息。</p> <p><strong>http请求</strong>：</p> <p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p> <p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p> <p><strong>易用性</strong>：</p> <p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p> <p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p> <hr> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <p>从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p> <p>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</p> <p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p> <h3 id=\\\"浏览器支持情况：\\\"><a href=\\\"#浏览器支持情况：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器支持情况：</h3> <p>localStorage和sessionStorage是html5才应用的新特性，可能有些浏览器并不支持，这里要注意。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2017/11/25/15ff2d54764e53af?w=861&h=113&f=png&s=9592\\\" alt></p> <p>cookie的浏览器支持没有找到，可以通过下面这段代码来判断所使用的浏览器是否支持cookie：</p> <pre><code>if(navigator.cookieEnabled) {\\n  alert(&quot;你的浏览器支持cookie功能&quot;);//提示浏览器支持cookie  \\n} else {\\n  alert(&quot;你的浏览器不支持cookie&quot;);//提示浏览器不支持cookie   }\\n</code></pre> <h3 id=\\\"数据存放处：\\\"><a href=\\\"#数据存放处：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数据存放处：</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2017/11/25/15ff2f727028f37b?w=1028&h=378&f=png&s=28065\\\" alt=\\\"Cookie、localStorage、sessionStorage数据存放处\\\"></p> <h3 id=\\\"番外：各浏览器cookie大小、个数限制。\\\"><a href=\\\"#番外：各浏览器cookie大小、个数限制。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 番外：各浏览器Cookie大小、个数限制。</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"cookie 使用起来还是需要小心一点，有兴趣的可以看一下这个\"),_vm._ssrNode(\"<a href=\\\"https://www.cnblogs.com/henryhappier/archive/2011/03/03/1969564.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"链接\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/cookie和storage的使用以及区别.md?vue&type=template&id=0832f5ea&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/cookie和storage的使用以及区别.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5623be33\"\n  \n)\n\ncomponent.options.__file = \"cookie和storage的使用以及区别.md\"\n/* harmony default export */ var cookie_storage_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=7.server-bundle.js.map",
    "8.server-bundle.js": "exports.ids = [8];\nexports.modules = {\n\n/***/ 189:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/函数防抖和函数节流.md?vue&type=template&id=1590e63f&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"防抖函数-节流函数\\\"><a href=\\\"#防抖函数-节流函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数&amp;节流函数</h1> <p>节流函数和防抖函数是 JS 比较重要的概念，应用好了可以提高很大的性能，在面试中也是很高频的一个考点。下面一起来看看这两种方法是如何使用的：</p> <h2 id=\\\"防抖函数-debounce\\\"><a href=\\\"#防抖函数-debounce\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数(debounce):</h2> <h3 id=\\\"概念：\\\"><a href=\\\"#概念：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时</strong>。</p> <h3 id=\\\"生活中的栗子：\\\"><a href=\\\"#生活中的栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>如果有人进电梯（触发事件），那电梯将在 10 秒钟后出发（执行事件），这时如果又有人进电梯了（在 10 秒内再次触发该事件），我们又得等 10 秒再出发（重新计时）。</p> <h3 id=\\\"代码栗子：\\\"><a href=\\\"#代码栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 防抖函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果有一个函数在等待执行 清除定时器 下面重新计时</span>\\n      <span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// wait时间后(期间不能再触发debounce) 执行回调</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次在1500ms后触发，之后每1000ms触发一次</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 还没执行就一直重复触发,不会执行</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br></div></div><div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">可以这样理解</p> <p>函数触发停止一段时间后(期间不能再触发debounce，否则将重新计时)，再执行回调函数</p></div> <h3 id=\\\"机制：\\\"><a href=\\\"#机制：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>防抖函数主要利用定时器的延迟执行特性，根据是否有定时器在等待执行：</p> <ul><li>触发了一个事件后：如果有一个定时任务待执行，就清除定时器，重新计时。</li> <li>如果没有任务待执行，就定时执行这个事件。</li></ul> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>表单的连续点击，防止重复提交。比如重复发送一篇文章。</li> <li>类百度的搜索，连续输入等输入停止后再搜索。</li> <li>一直拖动浏览器窗口，只想触发一次事件等。</li></ol> <h2 id=\\\"节流函数-throttle\\\"><a href=\\\"#节流函数-throttle\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节流函数(throttle):</h2> <h3 id=\\\"概念：-2\\\"><a href=\\\"#概念：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行(单位时间内有事件被多次触发则，只生效一次)</strong>。</p> <h3 id=\\\"生活中的栗子：-2\\\"><a href=\\\"#生活中的栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>漏水的自来水水龙头，尽管水龙头里面有很多水(一直在触发事件)，但还是一滴一滴的往下滴(单位事件内只生效一次)。</p> <h3 id=\\\"代码栗子：-2\\\"><a href=\\\"#代码栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 节流函数 每隔一定时间就执行</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// !_lastTime 第一次进入</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 当前时间- 上次执行的时间 超过 给定时间间隔 就执行回调</span>\\n      _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 触发后，上次执行时间赋值为当前时间</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// 每隔10毫秒都会触发一次throttle，每隔一秒触发一次actionFn回调(1秒内再次触发被丢弃)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><ul><li>一开始_lastTime 没有值，触发回调,保存当前触发的时间为_lastTime</li> <li>10毫秒触发一次,每次触发 用_nowTime-_lastTime 超过给定的时间(1秒)，就再次触发回调</li></ul> <h3 id=\\\"机制：-2\\\"><a href=\\\"#机制：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>节流函数根据时间差是否超过给定时间(gapTime)来决定是否触发回调。</p> <h3 id=\\\"应用场景：-2\\\"><a href=\\\"#应用场景：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>自动保存草稿功能，当用户在输入的时候(一直触发事件),单位时间内只保存一次草稿。</li> <li>游戏中的刷新率</li></ol> <h2 id=\\\"怎么给回调函数传参？\\\"><a href=\\\"#怎么给回调函数传参？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 怎么给回调函数传参？</h2> <p><strong>通过ES6的<code>...</code>扩展符来保存回调函数的参数，并传给回调函数</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>      <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// !_lastTime 一开始的时候没有值为true     </span>\\n                    <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n            console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;执行函数&quot;</span><span class=\\\"token punctuation\\\">,</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// arr是个数组 接收不定数量的参数 没有参数是个空数组</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'执行函数参数1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'执行函数参数2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 节流 </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><h2 id=\\\"作用和本质：\\\"><a href=\\\"#作用和本质：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 作用和本质：</h2> <ul><li><p>防抖函数和节流函数主要解决的问题是：<strong>防止函数”短时间“的重复执行</strong>。</p></li> <li><p>它们本质上是：<strong>在时间轴上控制函数的执行次数</strong>。</p></li></ul>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/函数防抖和函数节流.md?vue&type=template&id=1590e63f&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/函数防抖和函数节流.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ed12f5c\"\n  \n)\n\ncomponent.options.__file = \"函数防抖和函数节流.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=8.server-bundle.js.map",
    "9.server-bundle.js": "exports.ids = [9];\nexports.modules = {\n\n/***/ 190:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/多维数组展开.md?vue&type=template&id=4e6a07a0&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"多维数组展开\\\"><a href=\\\"#多维数组展开\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多维数组展开</h1> <h3 id=\\\"原理：\\\"><a href=\\\"#原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理：</h3> <ul><li>利用reduce累加，将数组平铺。</li> <li>判断每次传入的第二个参数是否为数组，如果是数组的话，递归。</li> <li>然后每层都平铺，一层一层用<code>concat</code>连接成一个数组</li></ul> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flatten</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>flat<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>flat<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// flat:初始值或累加的值 next:当前值</span>\\n    <span class=\\\"token keyword\\\">return</span> flat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 判断当前元素是否为数组 决定是否递归 将值返回到下次循环</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 运行示例：</span>\\n<span class=\\\"token keyword\\\">let</span> nestedArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 四维数组 展开</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>nestedArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,7]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/多维数组展开.md?vue&type=template&id=4e6a07a0&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/多维数组展开.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"51fb18ee\"\n  \n)\n\ncomponent.options.__file = \"多维数组展开.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=9.server-bundle.js.map",
    "10.server-bundle.js": "exports.ids = [10];\nexports.modules = {\n\n/***/ 192:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/数组API解析合集.md?vue&type=template&id=50bf80b1&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"数组api解析合集\\\"><a href=\\\"#数组api解析合集\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组API解析合集</h2> <p>数组的使用场景非常多，平日中也涉及到很多数组的<code>api</code>/相关操作，一直也没有对这块内容进行一块整理总结，所以这次对这块内容做一个较为系统的总结，方便自己、也方便他人。</p> <h3 id=\\\"创建一个数组\\\"><a href=\\\"#创建一个数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建一个数组:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 字面量方式:</span>\\n<span class=\\\"token comment\\\">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// [3,11,8];</span>\\n<span class=\\\"token comment\\\">// 构造器:</span>\\n<span class=\\\"token comment\\\">// 实际上 new Array === Array,加不加new 一点影响都没有。</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// []</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [,,]</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [ 3,11,8 ]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"es6-array-of-返回由所有参数值组成的数组\\\"><a href=\\\"#es6-array-of-返回由所有参数值组成的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 Array.of()  返回由所有参数值组成的数组</h3> <p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p> <p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3,11,8]</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"es6-arrary-from-将两类对象转为真正的数组\\\"><a href=\\\"#es6-arrary-from-将两类对象转为真正的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 Arrary.from() 将两类对象转为真正的数组</h3> <p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p> <p>参数：</p> <p>第一个参数(必需):要转化为真正数组的对象。</p> <p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p> <p>第三个参数(可选): 用来绑定this。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 1. 对象拥有length属性</span>\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['a','b','c'];</span>\\n<span class=\\\"token comment\\\">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['h','e','l','l','o']</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['a','b']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><hr> <h2 id=\\\"方法\\\"><a href=\\\"#方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法:</h2> <p>数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p> <h3 id=\\\"改变原数组的方法-9个\\\"><a href=\\\"#改变原数组的方法-9个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 改变原数组的方法(9个):</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token constant\\\">ES5</span><span class=\\\"token punctuation\\\">:</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span>  a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token constant\\\">ES6</span><span class=\\\"token punctuation\\\">:</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span>fill\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p> <h3 id=\\\"splice-添加-删除数组元素\\\"><a href=\\\"#splice-添加-删除数组元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> splice() 添加/删除数组元素</h3> <p>定义： splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p> <p>语法： <code>array.splice(index,howmany,item1,.....,itemX)</code></p> <p>参数:</p> <ol><li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li> <li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li> <li>item1, ..., itemX： 可选。向数组添加的新项目。</li></ol> <p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p> <p>eg1:删除元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [4,5,6,7]</span>\\n<span class=\\\"token comment\\\">// 从数组下标0开始，删除3个元素</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [7]</span>\\n<span class=\\\"token comment\\\">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>eg2: 删除并添加</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['添加',4,5,6,7]</span>\\n<span class=\\\"token comment\\\">// 从数组下标0开始，删除3个元素，并添加元素'添加'</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [6,7]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,'添加1','添加2']</span>\\n<span class=\\\"token comment\\\">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>eg3: 不删除只添加:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['添加1','添加2',1,2,3,4,5,6,7]</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>从上述三个栗子可以得出:</p> <ol><li>数组如果元素不够，会删除到最后一个元素为止</li> <li>操作的元素，包括开始的那个元素</li> <li>可以添加很多个元素</li> <li>添加是在开始的元素前面添加的</li></ol> <h3 id=\\\"sort-数组排序\\\"><a href=\\\"#sort-数组排序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> sort() 数组排序</h3> <p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p> <p>参数可选: 规定排序顺序的比较函数。</p> <p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 字符串排列 看起来很正常</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;Banana&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Orange&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Apple&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Mango&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span>\\n<span class=\\\"token comment\\\">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span>\\n<span class=\\\"token keyword\\\">let</span>\\ta <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [1,10,20,25,3,8];</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>比较函数的两个参数：</strong></p> <p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p> <ul><li>若比较函数返回值&lt;0，那么a将排到b的前面;</li> <li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li> <li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li></ul> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"对于sort()方法更深层级的内部实现以及处理机制可以看一下这篇文章\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/entry/59f7f3346fb9a04514635552\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"深入了解javascript的sort方法\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><strong>sort排序常见用法</strong>：</p> <ol><li>数组元素为数字的升序、降序:</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 </span>\\n<span class=\\\"token comment\\\">// 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   </span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,3,4,4,8,10,20,25];</span>\\n<span class=\\\"token comment\\\">// 降序 被减数和减数调换了  20-10&gt;0 被减数b(20)在减数a(10)的前面</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token operator\\\">-</span>a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [25,20,10,8,4,4,3,1];</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><ol start=\\\"2\\\"><li>数组多条件排序</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 如果id的值相等，按照age的值降序</span>\\n        <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">.</span>age\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果id的值不相等，按照id的值升序</span>\\n        <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>id\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [{&quot;id&quot;:2,&quot;age&quot;:8},{&quot;id&quot;:5,&quot;age&quot;:4},{&quot;id&quot;:6,&quot;age&quot;:10},{&quot;id&quot;:9,&quot;age&quot;:6},{&quot;id&quot;:10,&quot;age&quot;:9},{&quot;id&quot;:10,&quot;age&quot;:2}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><ol start=\\\"3\\\"><li>自定义比较函数，天空才是你的极限</li></ol> <p>类似的：<strong>运用好返回值，我们可以写出任意符合自己需求的比较函数</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 如果name是'Koro1' 返回-1 ，-1&lt;0 a排在b的前面</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果不是的话，a排在b的后面</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;OB&quot;},{&quot;name&quot;:&quot;OB&quot;},{&quot;name&quot;:&quot;OB&quot;}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h3 id=\\\"pop-删除一个数组中的最后的一个元素\\\"><a href=\\\"#pop-删除一个数组中的最后的一个元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> pop() 删除一个数组中的最后的一个元素</h3> <p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p> <p>参数: 无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 3</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"shift-删除数组的第一个元素\\\"><a href=\\\"#shift-删除数组的第一个元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> shift() 删除数组的第一个元素</h3> <p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p> <p>参数: 无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [2,3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"push-向数组的末尾添加元素\\\"><a href=\\\"#push-向数组的末尾添加元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> push() 向数组的末尾添加元素</h3> <p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p> <p>参数:  item1, item2, ..., itemX ,要添加到数组末尾的元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'末尾'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 4</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,'末尾']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"unshift\\\"><a href=\\\"#unshift\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> unshift()</h3> <p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p> <p>参数:  item1, item2, ..., itemX ,要添加到数组开头的元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'开头'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 4</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['开头',1,2,3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"reverse-颠倒数组中元素的顺序\\\"><a href=\\\"#reverse-颠倒数组中元素的顺序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reverse() 颠倒数组中元素的顺序</h3> <p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p> <p>参数: 无</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3,2,1]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"es6-copywithin-指定位置的成员复制到其他位置\\\"><a href=\\\"#es6-copywithin-指定位置的成员复制到其他位置\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6: copyWithin() 指定位置的成员复制到其他位置</h3> <p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> start <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> end <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>三个参数都是数值，如果不是，会自动转为数值.</p> <ol><li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li> <li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li> <li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li></ol> <p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// -2相当于3号位，-1相当于4号位</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [4, 2, 3, 4, 5]</span>\\n<span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB4'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro4'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB5'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro5'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">// 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [&quot;OB1&quot;,&quot;Koro1&quot;,&quot;Koro2&quot;,&quot;OB3&quot;,&quot;OB3&quot;,&quot;Koro3&quot;,&quot;OB4&quot;,&quot;Koro4&quot;,&quot;OB5&quot;,&quot;Koro5&quot;] </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>从上述栗子:</p> <ol><li>第一个参数是开始被替换的元素位置</li> <li>要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取</li> <li>数组的长度不会改变</li> <li><strong>读了几个元素就从开始被替换的地方替换几个元素</strong></li></ol> <h3 id=\\\"es6-fill-填充数组\\\"><a href=\\\"#es6-fill-填充数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6: fill() 填充数组</h3> <p>定义:  使用给定值，填充一个数组。</p> <p>参数:</p> <p>第一个元素(必须): 要填充数组的值</p> <p>第二个元素(可选): 填充的开始位置,默认值为0</p> <p>第三个元素(可选)：填充的结束位置，默认是为<code>this.length</code></p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN浏览器兼容\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [7, 7, 7]</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ['a', 7, 'c']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><hr> <h3 id=\\\"不改变原数组的方法-8个\\\"><a href=\\\"#不改变原数组的方法-8个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不改变原数组的方法(8个):</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token constant\\\">ES5</span>：\\nslice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、\\n<span class=\\\"token constant\\\">ES7</span>：\\nincludes\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"slice-浅拷贝数组的元素\\\"><a href=\\\"#slice-浅拷贝数组的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> slice() 浅拷贝数组的元素</h3> <p>定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p> <p><strong>注意</strong>：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>begin<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p> <p>end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['hello']</span>\\na<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'改变原数组'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['改变原数组','world'] ['hello']</span>\\nb<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'改变拷贝的数组'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['改变原数组','world'] ['改变拷贝的数组']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p> <p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [{&quot;name&quot;:&quot;OBKoro1&quot;}]  [{&quot;name&quot;:&quot;OBKoro1&quot;}]</span>\\n<span class=\\\"token comment\\\">// a[0].name='改变原数组';</span>\\n<span class=\\\"token comment\\\">// console.log(b,a); // [{&quot;name&quot;:&quot;改变原数组&quot;}] [{&quot;name&quot;:&quot;改变原数组&quot;}]</span>\\n<span class=\\\"token comment\\\">// b[0].name='改变拷贝数组',b[0].koro='改变拷贝数组';</span>\\n<span class=\\\"token comment\\\">//  [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;}] [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p> <h3 id=\\\"join-数组转字符串\\\"><a href=\\\"#join-数组转字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> join()  数组转字符串</h3> <p>定义:  join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'hello,world'</span>\\n<span class=\\\"token keyword\\\">let</span> str2<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'+'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'hello+world'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'23'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str1<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OBKoro1,23,test</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'23'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str2 <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [object Object],test</span>\\n<span class=\\\"token comment\\\">// 对象转字符串推荐JSON.stringify(obj);</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>所以，<code>join()/toString()</code>方法在数组元素是数组的时候，会将里面的数组也调用<code>join()/toString()</code>,如果是对象的话，对象会被转为<code>[object Object]</code>字符串。</p> <h3 id=\\\"tolocalestring-数组转字符串\\\"><a href=\\\"#tolocalestring-数组转字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> toLocaleString() 数组转字符串</h3> <p>定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLocaleString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'abcd'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLocaleString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [object Object],23,abcd,2018/5/28 下午1:52:20 </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>如上述栗子：调用数组的<code>toLocaleString</code>方法，数组中的每个元素都会调用自身的<code>toLocaleString</code>方法，对象调用对象的<code>toLocaleString</code>,Date调用Date的<code>toLocaleString</code>。</p> <h3 id=\\\"tostring-数组转字符串-不推荐\\\"><a href=\\\"#tostring-数组转字符串-不推荐\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> toString() 数组转字符串 不推荐</h3> <p>定义: toString() 方法可把数组转换为由逗号链接起来的字符串。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数: 无。</p> <p>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。</p> <p><strong>值得注意的是</strong>：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'toString'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'演示'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// toString,演示</span>\\n<span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'调用toString'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'连接在我后面'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'啦啦啦'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用toString,连接在我后面啦啦啦</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"cancat\\\"><a href=\\\"#cancat\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cancat</h3> <p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span>oldArray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>arrayX<span class=\\\"token punctuation\\\">,</span>arrayX<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span>arrayX<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p> <p>eg1:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//连接两个数组</span>\\n<span class=\\\"token keyword\\\">let</span> newVal<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6]</span>\\n<span class=\\\"token comment\\\">// 连接三个数组</span>\\n<span class=\\\"token keyword\\\">let</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> newVal2 <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,7,8,9]</span>\\n<span class=\\\"token comment\\\">// 添加元素</span>\\n<span class=\\\"token keyword\\\">let</span> newVal3 <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'添加元素'</span><span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'再加一个'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// [1,2,3,&quot;添加元素&quot;,4,5,6,7,8,9,&quot;再加一个&quot;]</span>\\n<span class=\\\"token comment\\\">// 合并嵌套数组  会浅拷贝嵌套数组</span>\\n<span class=\\\"token keyword\\\">let</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> newVal4 <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,[4]]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p><strong>ES6扩展运算符<code>...</code>合并数组</strong>：</p> <p>因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用<code>...</code>来处理，<code>...</code>运算符可以实现<code>cancat</code>的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更多关于扩展符的详细内容移步阮一峰大神的\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ECMAScript 6 入门\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"indexof-查找数组是否存在某个元素，返回下标\\\"><a href=\\\"#indexof-查找数组是否存在某个元素，返回下标\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> indexOf() 查找数组是否存在某个元素，返回下标</h3> <p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>searchElement(必须):被查找的元素</p> <p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p> <p>严格相等的搜索:</p> <p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p> <p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'啦啦'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">24</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'啦'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// -1 </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'NaN'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// -1 </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'啦啦'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>使用场景：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5aad40e4f265da237f1e12ed#heading-10\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"数组去重\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <li>根据获取的数组下标执行操作，改变数组中的值等。</li> <li>判断是否存在，执行操作。</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"lastindexof-查找指定元素在数组中的最后一个位置\\\"><a href=\\\"#lastindexof-查找指定元素在数组中的最后一个位置\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> lastIndexOf() 查找指定元素在数组中的最后一个位置</h3> <p>定义:  方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lastIndexOf</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>searchElement(必须): 被查找的元素</p> <p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p> <p>关于fromIndex有三个规则:</p> <ol><li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li> <li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li> <li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度为10</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',4); // 从下标4开始往前找 返回下标2</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',100); //  大于或数组的长度 查找整个数组 返回9</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',-11); // -1 数组不会被查找</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lastIndexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 从第二个元素4往前查找，没有找到 返回-1</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"es7-includes-查找数组是否包含某个元素-返回布尔\\\"><a href=\\\"#es7-includes-查找数组是否包含某个元素-返回布尔\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES7 includes() 查找数组是否包含某个元素 返回布尔</h3> <p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>searchElement(必须):被查找的元素</p> <p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p> <p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p> <ol><li>indexOf方法不能识别<code>NaN</code></li> <li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// let b=a.includes(NaN); // true 识别NaN</span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',100); // false 超过数组长度 不搜索</span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',-3);  // true 从倒数第三个元素开始搜索 </span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',-100);  // true 负值绝对值超过数组长度，搜索整个数组</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。</p> <hr> <h3 id=\\\"遍历方法-12个\\\"><a href=\\\"#遍历方法-12个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 遍历方法(12个):</h3> <p>js中遍历数组并不会改变原始数组的方法总共有12个:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token constant\\\">ES5</span>：\\nforEach、every 、some、 filter、map、reduce、reduceRight、\\n<span class=\\\"token constant\\\">ES6</span>：\\nfind、findIndex、keys、values、entries\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"关于遍历：\\\"><a href=\\\"#关于遍历：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于遍历：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"关于遍历的效率，可以看一下这篇\"),_vm._ssrNode(\"<a href=\\\"http://louiszhai.github.io/2015/12/18/traverse/#%E6%B5%8B%E8%AF%95%E5%90%84%E6%96%B9%E6%B3%95%E6%95%88%E7%8E%87\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"详解JS遍历\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <li>尽量不要在遍历的时候，修改后面要遍历的值</li> <li>尽量不要在遍历的时候修改数组的长度（删除/添加）</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"foreach\\\"><a href=\\\"#foreach\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> forEach</h3> <p>定义: 按升序为数组中含有效值的每一项执行一次回调函数。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 回调函数的参数</span>\\n<span class=\\\"token number\\\">1.</span> <span class=\\\"token function\\\">currentValue</span><span class=\\\"token punctuation\\\">(</span>必须<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>数组当前元素的值\\n<span class=\\\"token number\\\">2.</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>可选<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> 当前元素的索引值\\n<span class=\\\"token number\\\">3.</span> <span class=\\\"token function\\\">arr</span><span class=\\\"token punctuation\\\">(</span>可选<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>数组对象本身\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p><strong>关于forEach()你要知道</strong>：</p> <ul><li>无法中途退出循环，只能用<code>return</code>退出本次回调，进行下一次回调。</li> <li>它总是返回 undefined值,即使你return了一个值。</li></ul> <h3 id=\\\"下面类似语法同样适用这些规则\\\"><a href=\\\"#下面类似语法同样适用这些规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 下面类似语法同样适用这些规则</h3> <ol><li>对于空数组是不会执行回调函数的</li> <li>对于已在迭代过程中删除的元素，或者空元素会跳过回调函数</li> <li>遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。</li> <li>如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最后第二个元素是空的，不会遍历(undefined、null会遍历)</span>\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    a<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'改变元素'</span><span class=\\\"token punctuation\\\">;</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'添加到尾端，不会被遍历'</span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'forEach传递的第一个参数'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 分别打印 1 ,2 ,改变元素</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OBKoro1 打印三次 this绑定在obj对象上</span>\\n    <span class=\\\"token comment\\\">// break; // break会报错</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// return只能结束本次回调 会执行下次回调</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'不会执行，因为return 会执行下一次循环回调'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 即使return了一个值,也还是返回undefined</span>\\n<span class=\\\"token comment\\\">// 回调函数也接受接头函数写法</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"every-检测数组所有元素是否都符合判断条件\\\"><a href=\\\"#every-检测数组所有元素是否都符合判断条件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> every 检测数组所有元素是否都符合判断条件</h3> <p>定义: 方法用于检测数组所有元素是否都符合函数定义的条件</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><strong>参数:(这几个方法的参数，语法都类似)</strong></p> <p>function(必须): 数组中<strong>每个元素需要调用的函数</strong>。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>方法返回值规则:</p> <ol><li>如果数组中检测到<strong>有一个元素不满足，则整个表达式返回 false</strong>，且剩余的元素不会再进行检测。</li> <li>如果所有元素<strong>都满足条件，则返回 true</strong>。=</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isBigEnough</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token keyword\\\">return</span> element <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 判断数组中的所有元素是否都大于10</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// 接受箭头函数写法 </span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=&gt;</span> x <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=&gt;</span> x <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"some-数组中的是否有满足判断条件的元素\\\"><a href=\\\"#some-数组中的是否有满足判断条件的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> some 数组中的是否有满足判断条件的元素</h3> <p>定义：数组中的是否有满足判断条件的元素</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p><strong>方法返回值规则</strong>：</p> <ol><li>如果<strong>有一个元素满足条件，则表达式返回true</strong>, 剩余的元素不会再执行检测。</li> <li>如果<strong>没有满足条件的元素，则返回false</strong>。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isBigEnough</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>element <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//数组中是否有一个元素大于 10</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"filter-过滤原始数组，返回新数组\\\"><a href=\\\"#filter-过滤原始数组，返回新数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> filter 过滤原始数组，返回新数组</h3> <p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> new_array <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回a数组中所有大于18的元素</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// [32,33,40] [32,33,16,40]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"map-对数组中的每个元素进行处理，返回新的数组\\\"><a href=\\\"#map-对数组中的每个元素进行处理，返回新的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> map 对数组中的每个元素进行处理，返回新的数组</h3> <p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> new_array <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'新数组的新元素'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// [&quot;1新数组的新元素&quot;,&quot;2新数组的新元素&quot;,&quot;3新数组的新元素&quot;,&quot;4新数组的新元素&quot;] [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"reduce-为数组提供累加器，合并为一个值\\\"><a href=\\\"#reduce-为数组提供累加器，合并为一个值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reduce 为数组提供累加器，合并为一个值</h3> <p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> currentValue<span class=\\\"token punctuation\\\">,</span> currentIndex<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> initialValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>total(必须)，初始值, 或者上一次调用回调返回的值</li> <li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>initialValue(可选): 指定第一次回调 的第一个参数。</p> <p><strong>回调第一次执行时</strong>:</p> <ul><li>如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；</li> <li>如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li> <li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</li></ul> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 数组求和 </span>\\n<span class=\\\"token keyword\\\">let</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 6</span>\\n<span class=\\\"token comment\\\">// 将二维数组转化为一维 将数组元素展开</span>\\n<span class=\\\"token keyword\\\">let</span> flattened <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// [0, 1, 2, 3, 4, 5]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h3 id=\\\"reduceright-从右至左累加\\\"><a href=\\\"#reduceright-从右至左累加\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reduceRight  从右至左累加</h3> <p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p> <h3 id=\\\"es6：find-findindex-根据条件找到数组成员\\\"><a href=\\\"#es6：find-findindex-根据条件找到数组成员\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6：find()&amp; findIndex() 根据条件找到数组成员</h3> <p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。</p> <p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p> <p>这两个方法</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">let</span> index <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>这两个方法都可以识别<code>NaN</code>,弥补了<code>indexOf</code>的不足.</p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// find</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回元素-5</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 返回元素NaN</span>\\n<span class=\\\"token comment\\\">// findIndex</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回索引2</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 返回索引4</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,</p> <h3 id=\\\"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\\\"><a href=\\\"#es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h3> <p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>参数：无。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"遍历栗子(摘自\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-entries%EF%BC%8Ckeys-%E5%92%8C-values\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ECMAScript 6 入门\"),_c('OutboundLink')],2),_vm._ssrNode(\")：\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 0</span>\\n<span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> elem <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>elem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 'a'</span>\\n<span class=\\\"token comment\\\">// 'b'</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> elem<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> elem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 0 &quot;a&quot;</span>\\n<span class=\\\"token comment\\\">// 1 &quot;b&quot;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><p>在<code>for..of</code>中如果遍历中途要退出，可以使用<code>break</code>退出循环。</p> <p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的next方法，进行遍历:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> letter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> entries <span class=\\\"token operator\\\">=</span> letter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [0, 'a']</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 'b']</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [2, 'c']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>entries()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 7.1</p> <p>keys()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 8,</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/数组API解析合集.md?vue&type=template&id=50bf80b1&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/数组API解析合集.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"a546b29c\"\n  \n)\n\ncomponent.options.__file = \"数组API解析合集.md\"\n/* harmony default export */ var _API_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=10.server-bundle.js.map",
    "11.server-bundle.js": "exports.ids = [11];\nexports.modules = {\n\n/***/ 193:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/数组完全乱序.md?vue&type=template&id=62fdd8ea&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数组完全乱序\\\"><a href=\\\"#数组完全乱序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组完全乱序</h1> <p>一提到数组乱序，大家可能就会想到<code>sort</code>方法，也就是下面这种实现方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token number\\\">0.5</span> <span class=\\\"token operator\\\">-</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>但是<code>sort</code>并不是真正意义上的乱序，一些元素间并没有机会相互比较(也就没有了随机交换的可能性)，<strong>所有数组元素在大概率上还停留在自己初始位置</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这里不再展开了，省的懵逼，如果对此有兴趣的话，看这篇\"),_vm._ssrNode(\"<a href=\\\"https://github.com/HOUCe/shuffle-array\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"来解惑。\")],2),_vm._ssrNode(\" <h2 id=\\\"真正意义上的乱序数组：\\\"><a href=\\\"#真正意义上的乱序数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 真正意义上的乱序数组：</h2> <h3 id=\\\"递归：\\\"><a href=\\\"#递归：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 递归：</h3> <p><strong>原理</strong>：</p> <ul><li>取数组长度的随机数，获取这个数组元素</li> <li>删除原数组的元素，将值添加到新数组中</li> <li>递归将数组再传入函数(重复上述两步)，直到旧数组的元素清空为止</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> oldArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomFn</span> <span class=\\\"token operator\\\">=</span> actionArr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomArr</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> ranDomNum <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 随机数</span>\\n    newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>ranDomNum<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除原数组元素 将删除的值添加到新数组</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">randomArr</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组清空 退出递归</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">randomArr</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">randomFn</span><span class=\\\"token punctuation\\\">(</span>oldArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'新数组'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><h3 id=\\\"循环-进阶-：\\\"><a href=\\\"#循环-进阶-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 循环(进阶)：</h3> <p>原理都一样，将递归换成了循环，这种方式无疑是更优雅的(虽然上面才是我写的...)。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomFn</span> <span class=\\\"token operator\\\">=</span> actionArr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    n <span class=\\\"token operator\\\">=</span> actionArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span>\\n    i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    i <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> n<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取随机数(0~数组的长度-1)</span>\\n    newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除原数组元素 将删除的值添加到新数组</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"不开新数组（最终）：\\\"><a href=\\\"#不开新数组（最终）：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不开新数组（最终）：</h3> <p>上述方法创建了一个新数组，开辟了新的内存空间。</p> <p><strong>原理</strong>：</p> <ul><li>因为每次循环，数组的长度都要减去1，数组长度的最大值是一个一个减少的</li> <li><strong>把当前找到的随机元素，保存在每次循环的最大值的位置</strong></li> <li><strong>再把最后一个被替换的元素，放到随机元素原来的位置</strong></li> <li>就是把这两个元素交换变量</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shuffle</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> m <span class=\\\"token operator\\\">=</span> array<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span>\\n    t<span class=\\\"token punctuation\\\">,</span>\\n    i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    i <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> m<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">[</span>array<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>array<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 交换变量 ES6的写法</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/数组完全乱序.md?vue&type=template&id=62fdd8ea&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/数组完全乱序.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"7bce5099\"\n  \n)\n\ncomponent.options.__file = \"数组完全乱序.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=11.server-bundle.js.map",
    "12.server-bundle.js": "exports.ids = [12];\nexports.modules = {\n\n/***/ 195:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/时间差与时区转换.md?vue&type=template&id=7ae13ad3&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"计算两个时间的时间差-时区转换\\\"><a href=\\\"#计算两个时间的时间差-时区转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 计算两个时间的时间差&amp;时区转换</h2> <h3 id=\\\"计算两个时间的时间差：\\\"><a href=\\\"#计算两个时间的时间差：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 计算两个时间的时间差：</h3> <ol><li><p>获取两个时间数据，通常这两个时间是：后端给的时间数据和当前时间</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'2018/08/28 04:56:38'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始时间</span>\\ndateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>dateBegin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Mon Aug 28 2017 04:56:38 GMT+0800 (中国标准时间)</span>\\n<span class=\\\"token comment\\\">// 上面是Date对象的数据形式</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第二个数据通常是当前时间</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li> <li><p>使用<code>getTime()</code>返回与固定的 1970 年 1 月 1 日的时间差，再用大的时间减去短的时间即可得出双方相差的毫秒数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dateDiff <span class=\\\"token operator\\\">=</span> dateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> dateBegin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li> <li><p>换算成你想要的时间单位，得出两个时间的时间差。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 计算出相差天数</span>\\n<span class=\\\"token keyword\\\">let</span> dayDiff <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>dateDiff <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 计算天数后剩余的毫秒数 利用这个时间去计算小时</span>\\n<span class=\\\"token keyword\\\">let</span> leave1 <span class=\\\"token operator\\\">=</span> dateDiff <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算出小时数</span>\\n<span class=\\\"token keyword\\\">let</span> hours <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>leave1 <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算相差分钟数</span>\\n<span class=\\\"token keyword\\\">let</span> leave2 <span class=\\\"token operator\\\">=</span> leave1 <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算小时数后剩余的毫秒数</span>\\n<span class=\\\"token keyword\\\">let</span> minutes <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>leave2 <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">60</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算相差分钟数</span>\\n<span class=\\\"token comment\\\">// 计算相差秒数</span>\\n<span class=\\\"token keyword\\\">let</span> leave3 <span class=\\\"token operator\\\">=</span> leave2 <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">60</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算分钟数后剩余的毫秒数</span>\\n<span class=\\\"token keyword\\\">let</span> seconds <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">round</span><span class=\\\"token punctuation\\\">(</span>leave3 <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 结果</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`相差</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>dayDiff<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">天</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>hours<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">小时</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>minutes<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">分钟</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>seconds<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">秒`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div></li></ol> <p>如果你只想计算相差的小时数，不想管天数：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dayDiff <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>dateDiff <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 其他的同理，倍数正确即可</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"时区转换\\\"><a href=\\\"#时区转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 时区转换</h3> <p><strong>需求</strong>：</p> <p>拿到这么一串字符串：<code>2018-09-17</code>，要与当前的日期比较，求出日期差。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><strong>东八区的时间</strong>：</p> <p>上面<code>new Date(time)</code>之后拿到的是零时区 0 点的时间，在东八区也就是北京时间<code>08:00:00</code>。</p> <p>而我们第二个时间设置的是北京时间<code>00:00:00</code>，这里面就出现了八个小时的误差。</p> <p><strong>转换时区的三种方法</strong>：</p> <ol><li><p>设置世界时为当前时区的时间：</p> <p>设置具体的时间，传进<code>new Date()</code>的时候会自动转成北京时间<code>00:00:00</code>，然后两个时间就可以同步了。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\ntime <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>time<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> 00:00:00`</span></span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 后面加上具体时间</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>也可以使用<code>setHours</code>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndateBegin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// new Date()之后 设为0点 两个时间同步</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div></li> <li><p>当前时区与世界时同步：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置为八点与世界时一致</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li> <li><p>你可能不知道当前时区与世界时相差多少</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setUTCHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置为世界时的0点 也就是北京时间八点</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li></ol> <p>以上：2018.09.21</p>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/时间差与时区转换.md?vue&type=template&id=7ae13ad3&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/时间差与时区转换.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1e9bd92f\"\n  \n)\n\ncomponent.options.__file = \"时间差与时区转换.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=12.server-bundle.js.map",
    "13.server-bundle.js": "exports.ids = [13];\nexports.modules = {\n\n/***/ 197:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/随机数组成的数组.md?vue&type=template&id=56befa3b&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"随机数数组\\\"><a href=\\\"#随机数数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 随机数数组</h1> <p>所谓的随机数数组就是：由随机数组成的数组（数组的长度和随机数的范围可自定义）</p> <p>当然有很多方法，只是用下面这个API只用一行代码就可以实现这个功能，见猎心喜，然后放了上来。</p> <h2 id=\\\"原理\\\"><a href=\\\"#原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理</h2> <ol><li>先创建一个类似数组的对象(即对象拥有<code>length</code>属性)</li> <li>利用<code>Array.from</code>的第二个参数，对每个元素进行处理(生成随机数)。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * 由随机数组成的数组：长度和随机数范围可自定义\\n * @param {number} length 数组的长度\\n * @param {number} limit 随机数的范围\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">genNumArr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Array.from第二个参数 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组</span>\\n  <span class=\\\"token keyword\\\">return</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> length <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> limit<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">genNumArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度为1000，每个元素的范围在0-99之间</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/MBOQMX\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"CodePen\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/随机数组成的数组.md?vue&type=template&id=56befa3b&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/随机数组成的数组.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"44915900\"\n  \n)\n\ncomponent.options.__file = \"随机数组成的数组.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=13.server-bundle.js.map",
    "14.server-bundle.js": "exports.ids = [14];\nexports.modules = {\n\n/***/ 176:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/JS/高性能js.md?vue&type=template&id=084ebfe7&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"读书笔记《高性能-javascript》\\\"><a href=\\\"#读书笔记《高性能-javascript》\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> [读书笔记《高性能 JavaScript》</h2> <h3 id=\\\"缺陷\\\"><a href=\\\"#缺陷\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缺陷</h3> <p>这本书是 2010 年出版的，这本书谈性能是有时效性的，现在已经是 2018 年了，这几年前端发展的速度是飞快的，书里面还有一些内容考虑 IE6、7、8 的东西，殊不知现在这些都已经不再考虑了，所以不可避免的有一些知识是比较老的。有些解决方法现在已经不是最好的解决方式，比如工具那一章。</p> <h3 id=\\\"前言\\\"><a href=\\\"#前言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前言</h3> <p><strong>总的来说，这本书整体给出的性能优化建议，以及作者耐心的实践，对我们开发优化的启发和帮助还是很大的</strong>，因为它里边的很多知识，都是作者通过实践总结出来的，都是经验的积累，这在一般的教科书上是学不到的。特别是对于 js 基础比较差一点的，里面有很多知识点尽管在现在还是非常有必要的。</p> <p><strong>下面我就将各章节的一些重要的知识点总结写出来，争取将干货都提取出来</strong>。</p> <hr> <h3 id=\\\"第一章-加载和执行\\\"><a href=\\\"#第一章-加载和执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第一章-加载和执行</h3> <ol><li>js 的阻塞特性：</li></ol> <p>当浏览器在执行 js 代码的时候，不能同时做其他事情。（界面 ui 线程和 js 线程用的是同一进程，所以 js 执行越久，网页的响应时间越长。）</p> <ol start=\\\"2\\\"><li>脚本的位置</li></ol> <p><strong>如果把脚本<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>中，页面会等 js 文件全部下载并执行完成后才开始渲染</strong>，在这些文件下载和执行的过程中：会导致访问网站的时候有明显的延迟，表现为：页面空白。</p> <p>性能提升：<strong>推荐将所有的<code>&lt;script&gt;</code>标签尽可能的放到<code>&lt;body&gt;</code>标签的底部</strong>，优先渲染页面，减少页面空白时间。</p> <ol start=\\\"3\\\"><li>组件脚本。</li></ol> <p>每个<code>&lt;script&gt;</code>标签初始下载的时候都会阻塞页面的渲染。性能提升做法：\\n<strong>减少内嵌脚本：减少内嵌的<code>&lt;script&gt;</code>标签</strong>，将代码写在一个标签中。</p> <p><strong>合并外链的 js 文件</strong>：http 请求会带来额外的性能开销，栗子：下载一个 100KB 的 js 文件比下载 4 个 25kb 的 js 文件更快。具体操作方法自行搜索。</p> <ol start=\\\"4\\\"><li>无阻塞脚本的方法</li></ol> <p><strong>script 标签的 aync 属性</strong>：</p> <p>async 属性规定一旦脚本可用，则会异步执行。async 属性仅适用于外部脚本（只有在使用 src 属性时）。如果 async=&quot;async&quot;：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</p> <p><strong>script 标签的 defer 属性</strong>：</p> <p>js 文件在页面解析到 script 标签的时候开始下载，但并不会执行，dom 加载完成执行。<strong>这两个属性的区别在于执行时机</strong>。</p> <p><strong>动态脚本元素</strong>。</p> <p>js 操作 dom 创建<code>&lt;script&gt;</code>标签，自定义生成标签的 type、src 属性。文件会在该元素被添加到页面的时候开始下载。ps：如果文件顺序很重要的话，最好按照顺序合成一个文件。然后再添加到页面中。这样：无论何时启动下载。文件的下载和执行过程不会阻塞页面的其他进程。</p> <h5 id=\\\"_3-xhr-ajax-脚本注入、\\\"><a href=\\\"#_3-xhr-ajax-脚本注入、\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. XHR ajax 脚本注入、</h5> <p>用 get 请求一个文件，请求好了。然后创建动态脚本，最后添加进去。\\n缺陷：文件要再请求页面的同一个域。不能从 cdn 下载</p> <h3 id=\\\"第一章加载和执行小结：\\\"><a href=\\\"#第一章加载和执行小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第一章加载和执行小结：</h3> <ol><li>把文件放在 body 标签签名，</li> <li>合并脚本，减少<code>&lt;script&gt;</code>标签。</li> <li>采用无阻塞下载 js。使用 script 的 defer 和 async 属性 异步下载。动态创建 script 标签和执行代码。</li></ol> <h3 id=\\\"第二章-数据存取\\\"><a href=\\\"#第二章-数据存取\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第二章-数据存取</h3> <ol><li><strong>js 四种基本的数据存取位置</strong>。\\n1、字面量：字符串、数字、布尔、对象、数组、函数、正则、null、undefined，字面量只代表自身，没有存储位置。 2、局部变量。 let var 声明的变量。3、数组元素。4、对象成员。</li></ol> <p>性能：<strong>访问字面量和局部变量的速度是最快的，访问数组和对象成员相对较慢</strong></p> <ol start=\\\"2\\\"><li><strong>变量标识符解析过程</strong>：</li></ol> <p>搜索执行环境的作用域链，查找同名标识符。搜索过程从作用域链头部开始，也就是当前运行函数的活动对象。如果找到，就使用这个标识符，对应的变量；如果没有找到，继续搜索下面的对象。搜索过程会持续进行，直到找到标识符，若无法搜索到匹配的对象，那么标识符被视为未定义、</p> <p><strong>性能问题：一个标识符所在的位置越深，它的读写速度也就越慢</strong>。因此，函数中读写局部变量总是最快的，而读写全局变量通常是最慢的。</p> <p><strong>建议：将全局变量存储到局部变量，加快读写速度。</strong></p> <ol start=\\\"2\\\"><li>闭包，原型，嵌套对象。</li></ol> <p><strong>优化建议：将常用的跨作用域变量存储到局部变量，然后直接访问局部变量</strong>。理由如上，变量标识符解析过程。</p> <h3 id=\\\"第二章数据存取小结：\\\"><a href=\\\"#第二章数据存取小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第二章数据存取小结：</h3> <ol><li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li> <li>由于局部变量存在于作用域链的起始位置，因为<strong>访问局部变量比访问跨作用域变量更快。这个道理同样适用于数组，对象，跨作用域变量</strong>。</li> <li>把常用的对象，数组，跨域变量保存在局部变量可以改善 js 性能，局部变量访问速度更快。</li></ol> <h3 id=\\\"第三章-dom-编程小结：\\\"><a href=\\\"#第三章-dom-编程小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第三章 DOM 编程小结：</h3> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li><strong>dom 操作天生就慢，尽量减少 dom 操作</strong>，减少访问 dom 的次数。</li> <li>使用 document.querySelect 来做选择器，比其他方式快。</li> <li>需要多次访问某个 dom 节点，使用局部变量存储。</li> <li>html 集合，把集合长度缓存到一个变量中，然后遍历使用这个变量，如果经常操作集合，建议拷到一个数组中。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"要留意浏览器的重绘和重排；批量修改样式的时候，‘离线’操作 DOM 树，使用缓存，并减少访问布局信息的次数。\\n重绘和重排是 DOM 编程优化的一个相当重要概念：\"),_vm._ssrNode(\"<a href=\\\"http://web.jobbole.com/83164/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"重绘和重排\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <li>动画中使用绝对定义，使用拖放处理。</li> <li>使用事件委托来减少事件处理器的数量。</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"第四章算法和流程控制小结：\\\"><a href=\\\"#第四章算法和流程控制小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第四章算法和流程控制小结：</h3> <ol><li><p>for、while 和 do-while 循环性能差不多，<strong>for-in 循环速度只有前面几种类型的 1/7</strong>，所以尽量避免使用 for-in 循环，除非你需要遍历一个属性数量未知的对象。</p> <p>forEach 比 for 慢，如果运行速度要求严格，不建议使用。</p></li> <li><p>改善循环性能的最佳方式是<strong>减少每次迭代的工作量和减少循环迭代的次数</strong>。</p></li></ol> <p>减少迭代工作量：减少属性查找和倒序循环，循环次数越多，性能优化越明显。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">&lt;</span>items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>代码<span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">//正序循环</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i<span class=\\\"token operator\\\">=</span>items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>代码<span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">//倒序循环</span>\\n<span class=\\\"token comment\\\">//减少属性查找：查找一次属性，把值存在局部变量，在控制条件里面使用这个变量</span>\\n\\n倒序循环在i<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token number\\\">0</span>的时候会自动转换为<span class=\\\"token boolean\\\">true</span>，等于<span class=\\\"token number\\\">0</span>的时候为<span class=\\\"token boolean\\\">false</span>。\\n<span class=\\\"token comment\\\">//倒序循环：控制条件从（迭代数少于总数吗？它是否为true？）变为（它是否为true）</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>减少迭代的次数：&quot;Duff's Device&quot;循环体展开技术，有兴趣的可以看一下，迭代工作量大于 1000 的时候适用。</p> <ol start=\\\"3\\\"><li><p>if-else 与 switch：条件数量越大，越倾向于使用 switch。</p> <p>优化 if-else：</p> <ul><li>把最可能出现的条件放在首位.</li> <li>使用二分法把值域分成一系列的区间。</li></ul></li> <li><p>浏览器的调用栈大小限制了递归算法在 js 中的应用；栈溢出错误会导致其他代码中断运行。</p> <pre><code>小心使用递归，现在es6递归可以尾递归，在es6中只要使用尾递归就不会发生栈溢出，相对节省性能。\\n</code></pre></li></ol> <h3 id=\\\"第五章字符串和正则表达式小结：\\\"><a href=\\\"#第五章字符串和正则表达式小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第五章字符串和正则表达式小结：</h3> <ol><li>字符串合并的时候使用简单的'+'和'+='操作符。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">+=</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span>'efg<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>str<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//推荐，提速10%~40%</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<ol start=\\\"2\\\">\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"书里面讲的<strong>正则原理和回溯原理，这个很重要</strong>，找个篇\"),_vm._ssrNode(\"<a href=\\\"http://blog.csdn.net/c_kite/article/details/77875328\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"：跟书里面讲的差不多，但还是建议大家可以去找找 PDF 好好看看正则表达式这节。\")],2)]),_vm._ssrNode(\" <li><p>提高正则表达式效率的方法：</p> <ul><li>最重要的是：具体化正则表达式！具体化正则表达式！具体化正则表达式！</li> <li>关注如何让匹配更快失败，找出一些必需，特殊的字符</li> <li>正则表达式以简单的、必需的字元开始。</li> <li>使用量词模式，使它们后面的字元互斥。</li> <li>较少分支数量，缩小分支范围</li> <li>使用合适的量词</li> <li>把正则表达式赋值给变量并重用</li> <li>将复杂的正则拆分为简单的片段\\n//事实上，书里面讲的方法不止这么几个，而且每一个都有详细的解析 大佬们 还是去看看这一章节吧</li></ul></li> <li><p>正则表达式并不总是最好的解决方案，当你只是搜索字面字符串或者你事先知道字符串的哪一部分将要被查找时：</p> <ul><li>使用 indexOf()和 lastIndexOf()更适合查找特定字符串的位置或者判断它们是否存在\\n//例如：判断当前浏览器之类。</li></ul></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"第六章快速响应的用户界面小结：\\\"><a href=\\\"#第六章快速响应的用户界面小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第六章快速响应的用户界面小结：</h3> <p>js 和用户界面更新在同一个进程中运行，因此一次只能处理一件事情。高效的管理 UI 线程就是要确保 js 不能运行太长时间，以免影响用户体验。</p> <ol><li><p>浏览器限制了 js 任务的运行时间，这种限制很有必要，它确保某些恶意代码不能通过永不停止的密集操作锁住用户的浏览器。此限制分为两种：调用栈的大小和长时间运行脚本。</p></li> <li><p>任何 js 任务都不应当执行超过 100 毫秒。过长的运行时间会导致 UI 更新出现明显延迟，从而对用户体验造成负面影响。</p></li> <li><p>定时器可用来安排代码延迟执行，它使得你可以把长时间运行脚本分解成一系列的小任务。</p></li></ol> <h3 id=\\\"第七章-ajax-小结\\\"><a href=\\\"#第七章-ajax-小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第七章 AJAX 小结</h3> <p>这一章节貌似东西都比较老一点。。</p> <ol><li><p>post 更适合发送大量数据到服务器。</p></li> <li><p>get 请求能够被浏览器缓存，Expires 头信息设置浏览器缓存请求多久。可用于从不改变的图片或者其他静态数据集（js、css 等）</p></li> <li><p>JSON 是一种使用 js 对象和数组直接量编写的轻量级且易于解析的数据格式，它不仅传输尺寸小，而且解析速度快。JSON 是高性能 AJAX 的基础，尤其在使用动态脚本注入时。</p></li></ol> <p>json 应该是近几年一直在用的。。。</p> <ol start=\\\"4\\\"><li>减少请求数，通过合并 js 和 css 文件。</li> <li>缩短页面的加载时间，页面主要内容加载完成后，用 AJAX 获取那些次要的文件。</li></ol> <h3 id=\\\"第八章编程实践小结\\\"><a href=\\\"#第八章编程实践小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第八章编程实践小结</h3> <ol><li>避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span>构造函数<span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">和setInterval</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><ol start=\\\"2\\\"><li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。</li> <li>避免做重复工作，能节省的步骤就节省。</li> <li>js 原生方法总会比你写的任何代码都要快。</li></ol> <h3 id=\\\"第九章-构建并部署高性能-js-应用小结\\\"><a href=\\\"#第九章-构建并部署高性能-js-应用小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第九章 构建并部署高性能 js 应用小结</h3> <p>构建和部署的过程对基于 js 的 web 应用的性能有着巨大影响。这个过程中最重要的步骤有：</p> <ol><li>合并、压缩 js 文件。<strong>可使用 Gzip 压缩，能够减少约 70%的体积</strong>！</li></ol> <p>这些都是在构建过程中完成的工作，不要等到运行时去做，webpack 也是在构建过程中，完成的工作。</p> <ol start=\\\"2\\\"><li>通过正确设置 HTTP 响应头来缓存 js 文件，通过向文件名增加时间戳来避免缓存问题。</li> <li>使用 CDN 提供 js 文件；CDN 不仅可以提升性能，它也为你管理文件的压缩与缓存，。</li></ol> <h3 id=\\\"第十章-工具-小结：\\\"><a href=\\\"#第十章-工具-小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第十章 工具 小结：</h3> <p>当网页变慢时，分析从网络下载的资源以及分析的资源以及分析脚本的运行性能能让你专注于那些最需要优化的地方。</p> <ol><li><p>使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定那些脚本需要延迟加载，或者需要进一步分析。</p> <ul><li>检查图片、样式表和脚本的加载过程，以及它们对页面整体加载和渲染的影响。</li> <li>针对性的做出优化</li></ul></li> <li><p>把脚本尽可能延迟加载，这样做可以加快页面渲染速度，给用户带来更好的体验。</p></li> <li><p>确认脚本和其他资源文件的加载过程已经被优化</p> <ul><li>这里主要是说文件从服务器的下载速度，比如服务器那边的配置问题之类的。</li> <li>栗子：我就被后端坑过。一个js文件就200k ，下载下来需要50秒钟！</li> <li>后面发现原来是后端那边nginx没有开启加速配置什么的，导致出现的问题，找问题找半天。</li></ul></li> <li><p>测试脚本的运行时间,用一个 Date 实例减去另一个 Date 实例，得到的时间差就是脚本运行消耗的时间。</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> start <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//你的代码</span>\\n<span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ol start=\\\"5\\\"><li><strong>chrome ,火狐 等主流浏览器的控制面板，已经能够反映很多性能问题</strong>。仔细分析就能找出很多问题。例如：资源加载，断点等</li></ol> <h2 id=\\\"后话\\\"><a href=\\\"#后话\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 后话</h2> <p>事实上，<strong>自认为这本书最宝贵的就是一些提到的细节</strong>，比如：</p> <p>1、字符串合并的时候使用简单的'+'和'+='操作符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">+=</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>str<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//推荐，提速10%~40%</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>2、避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span>构造函数<span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">和setInterval</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\\\"><a href=\\\"#这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。</h3> <p>书不太厚，如果对里面的内容感兴趣，还是建议买一本回家看一看。</p> <p>以上 2018.1.9</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/高性能js.md?vue&type=template&id=084ebfe7&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/JS/高性能js.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"a9551d68\"\n  \n)\n\ncomponent.options.__file = \"高性能js.md\"\n/* harmony default export */ var _js = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=14.server-bundle.js.map",
    "15.server-bundle.js": "exports.ids = [15];\nexports.modules = {\n\n/***/ 194:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/README.md?vue&type=template&id=77fd1c24&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端积累\\\"><a href=\\\"#前端积累\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端积累</h2> <p>当前模块是我平时的一些积累，用以记录一些上手即用的东西/知识点等内容，范围较广。</p> <p>还有很多内容未放上来，持续更新中...</p> <h2 id=\\\"前端算法\\\"><a href=\\\"#前端算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端算法</h2> <p>想学习一下算法的话，也可以看看本文档中的算法模块，对于提高自身的编程和逻辑能力也是相当有效的一个途径。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_c('router-link',{attrs:{\"to\":\"/algorithm/\"}},[_vm._v(\"文档\")]),_vm._ssrNode(\"会将算法按照难度分级，代码中都有详细注释，且会提供多种解法。\")],2),_vm._ssrNode(\" <h3 id=\\\"公众号：\\\"><a href=\\\"#公众号：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 公众号：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>有新的文章，算法题，面试题等都会第一时间发布与公众号上。</p>\")],2)])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/README.md?vue&type=template&id=77fd1c24&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/README.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"113e308f\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\n/* harmony default export */ var README = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=15.server-bundle.js.map",
    "16.server-bundle.js": "exports.ids = [16];\nexports.modules = {\n\n/***/ 191:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/vue定义全局函数.md?vue&type=template&id=6a628545&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-定义全局函数\\\"><a href=\\\"#vue-定义全局函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 定义全局函数</h2> <h3 id=\\\"原理\\\"><a href=\\\"#原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理</h3> <p><strong>通过 Vue.prototype 将函数挂载到 Vue 实例上面</strong>，在组件中通过 this.函数名，来运行函数。</p> <h3 id=\\\"_1-在-main-js-里面直接写函数\\\"><a href=\\\"#_1-在-main-js-里面直接写函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 在 main.js 里面直接写函数</h3> <p><strong>直接在 main.js 里面写</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">test</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行全局函数test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>组件中调用</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 直接通过this运行函数</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"_2-写一个模块文件，挂载到-main-js-上面。\\\"><a href=\\\"#_2-写一个模块文件，挂载到-main-js-上面。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 写一个模块文件，挂载到 main.js 上面。</h3> <p>想要定义的全局函数比较多的话，推荐写在一个js文件里面，文件位置可以放在跟 main.js 同一级，方便引用</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// base.js</span>\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">install</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>Vue<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">text1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行成功1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">text2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行成功2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>main.js 入口文件：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> Vue <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// vue要在引文件之前</span>\\n<span class=\\\"token keyword\\\">import</span> base <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./base.js'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引用文件</span>\\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>base<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//将全局函数当做插件来进行注册</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>组件里面调用：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue定义全局函数.md?vue&type=template&id=6a628545&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue定义全局函数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"c532db94\"\n  \n)\n\ncomponent.options.__file = \"vue定义全局函数.md\"\n/* harmony default export */ var vue_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=16.server-bundle.js.map",
    "17.server-bundle.js": "exports.ids = [17];\nexports.modules = {\n\n/***/ 188:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/vue小技巧.md?vue&type=template&id=00dcef25&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-小技巧-小问题1\\\"><a href=\\\"#vue-小技巧-小问题1\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 小技巧&amp;小问题1</h2> <h3 id=\\\"路由变化页面数据不刷新问题\\\"><a href=\\\"#路由变化页面数据不刷新问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由变化页面数据不刷新问题</h3> <blockquote><p>场景：比如文章详情数据，依赖路由的<code>params</code>参数获取的(ajax 写在 created 生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行 created 组件生命周期，导致文章数据还是上一个文章的数据。</p></blockquote> <p><strong>解决方法：watch 监听路由是否变化</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>     watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'$route'</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 监听路由是否变化</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$route<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>articleId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 是否有文章id</span>\\n          <span class=\\\"token comment\\\">// 获取文章数据</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"settimeout-setinterval-无法用-this-访问-vue-实例\\\"><a href=\\\"#settimeout-setinterval-无法用-this-访问-vue-实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setTimeout/setInterval 无法用 this 访问 VUe 实例</h3> <p><strong>场景</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>      <span class=\\\"token function\\\">mounted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// this指向改变</span>\\n            <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// setInterval同理</span>\\n              console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 此时this指向Window对象</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>解决方法：使用箭头函数</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 箭头函数访问this实例</span>\\n<span class=\\\"token comment\\\">// 因为箭头函数本身没有绑定this 继承上一个不是箭头函数的函数的this</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 使用变量保存this指向 通过变量访问this实例</span>\\n<span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用self变量访问this实例</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"setinterval-路由跳转继续运行并没有销毁\\\"><a href=\\\"#setinterval-路由跳转继续运行并没有销毁\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval 路由跳转继续运行并没有销毁</h3> <p><strong>场景</strong>：</p> <p>比如一些弹幕，走马灯文字，这类需要定时调用的，<strong>路由跳转之后，因为组件已经销毁了，但是 setInterval 还没有销毁</strong>，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p> <p><strong>解决办法：在组件生命周期 beforeDestroy 停止 setInterval</strong></p> <p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeDestroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span>\\n   <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>intervalid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"vue-滚动行为-浏览器回退记忆位置-用法\\\"><a href=\\\"#vue-滚动行为-浏览器回退记忆位置-用法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 滚动行为(浏览器回退记忆位置)用法</h3> <p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的 History 模式），下面做一个简单的分享。</p> <p><strong>路由设置</strong></p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"要使用这一功能，首先需要开启 vue-router 的 \"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/essentials/history-mode.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"history 模式\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果之前一直使用的是<code>hash</code>模式(默认模式)，项目已经开发了一段时间，然后转 history 模式很可能会遇到：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a3f629cf265da430d5839ed\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"这些问题\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ol start=\\\"2\\\"><li>滚动行为具体设置如下：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          mode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'history'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">scrollBehavior</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> savedPosition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>savedPosition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果savedPosition存在，滚动条会自动跳到记录的值的地方</span>\\n              <span class=\\\"token keyword\\\">return</span> savedPosition\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">// savedPosition也是一个记录x轴和y轴位置的对象</span>\\n             <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>，\\n          routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"vue 滚动行为文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"，可以进到这里看看更详细的信息。\")],2),_vm._ssrNode(\" <h3 id=\\\"vue-路由拦截浏览器后退实现草稿保存类似需求\\\"><a href=\\\"#vue-路由拦截浏览器后退实现草稿保存类似需求\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 路由拦截浏览器后退实现草稿保存类似需求</h3> <p><strong>场景</strong>：</p> <p>为了防止用户突然离开，没有保存已输入的信息。</p> <p><strong>用法</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token comment\\\">//在路由组件中：</span>\\n    <span class=\\\"token function\\\">mounted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>用户已经输入信息<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 出现弹窗提醒保存草稿，或者自动后台为其保存</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 用户离开</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"类似的还有<code>beforeEach</code>、<code>beforeRouteUpdate</code>，也分为全局钩子和组件钩子，见\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/advanced/navigation-guards.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"v-once-只渲染元素和组件一次，优化更新渲染性能\\\"><a href=\\\"#v-once-只渲染元素和组件一次，优化更新渲染性能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> v-once 只渲染元素和组件一次，优化更新渲染性能</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/api/#v-cloak\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"v-once\"),_c('OutboundLink')],2),_vm._ssrNode(\"这个 api 蛮 6 的，应该很多小伙伴都没有注意到这个 api。\")],2),_vm._ssrNode(\" <p><strong>文档介绍</strong>：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/17/160ffd6c2dcf70e1?w=948&h=716&f=png&s=64938\\\" alt=\\\"v-once文档介绍\\\"></p> <p>这个 api 在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#%E5%AF%B9%E4%BD%8E%E5%BC%80%E9%94%80%E7%9A%84%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8-v-once\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"推荐：对低开销的静态组件使用 v-once\")],2),_vm._ssrNode(\" <p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'terms-of-service'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      template<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'\\\\\\n        &lt;div v-once&gt;\\\\\\n          &lt;h1&gt;Terms of Service&lt;/h1&gt;\\\\\\n          ...很多静态内容...\\\\\\n        &lt;/div&gt;\\\\\\n      '</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"vue-风格指南推荐：\\\"><a href=\\\"#vue-风格指南推荐：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 风格指南推荐：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"vue 框架还有一个\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/style-guide/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"风格指南\"),_c('OutboundLink')],2),_vm._ssrNode(\"推荐，如下图所示，大家也可以学习一波。\")],2),_vm._ssrNode(\" <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/17/160fff0ec0147156?w=1578&h=811&f=png&s=174542\\\" alt=\\\"vue风格指南\\\"></p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue小技巧.md?vue&type=template&id=00dcef25&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue小技巧.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f557fdb8\"\n  \n)\n\ncomponent.options.__file = \"vue小技巧.md\"\n/* harmony default export */ var vue_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=17.server-bundle.js.map",
    "18.server-bundle.js": "exports.ids = [18];\nexports.modules = {\n\n/***/ 185:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/vue钩子函数.md?vue&type=template&id=7c79e11a&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\\\"><a href=\\\"#vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</h2> <p>说到Vue的钩子函数，可能很多人只停留在一些很简单常用的钩子(<code>created</code>,<code>mounted</code>)，而且对于里面的区别，什么时候该用什么钩子，并没有仔细的去研究过，且Vue的生命周期在面试中也算是比较高频的考点，那么该如何回答这类问题，让人有眼前一亮的感觉呢...</p> <h2 id=\\\"vue-router导航守卫：\\\"><a href=\\\"#vue-router导航守卫：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue-Router导航守卫：</h2> <p>有的时候，我们需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"为此我们有很多种方法可以植入路由的导航过程：<strong>全局的, 单个路由独享的, 或者组件级的</strong>,推荐优先阅读\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由文档\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"全局守卫\\\"><a href=\\\"#全局守卫\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 全局守卫</h3> <p>vue-router全局有三个守卫：</p> <ol><li>router.beforeEach 全局前置守卫 进入路由之前</li> <li>router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用</li> <li>router.afterEach 全局后置钩子 进入路由之后</li></ol> <p><strong>使用方法</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js 入口文件</span>\\n<span class=\\\"token keyword\\\">import</span> router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./router'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引入路由</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeResolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">afterEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'afterEach 全局后置钩子'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h4 id=\\\"to-from-next-这三个参数：\\\"><a href=\\\"#to-from-next-这三个参数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> to,from,next 这三个参数：</h4> <p>to和from是<strong>将要进入和将要离开的路由对象</strong>,路由对象指的是平时通过this.$route获取到的路由对象。</p> <p><strong>next:Function</strong> 这个参数是个函数，且<strong>必须调用，否则不能进入路由</strong>(页面空白)。</p> <ul><li>next() 进入该路由。</li> <li>next(false): 取消进入路由，url地址重置为from路由地址(也就是将要离开的路由地址)。</li> <li>next 跳转新路由，当前的导航被中断，重新开始一个新的导航。</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token function\\\">我们可以这样跳转：next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path地址'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">或者next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>path<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">或者next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        且允许设置诸如 replace<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>、name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'home'</span> 之类的选项\\n        以及你用在router<span class=\\\"token operator\\\">-</span>link或router<span class=\\\"token punctuation\\\">.</span>push的对象选项。\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"路由独享守卫\\\"><a href=\\\"#路由独享守卫\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由独享守卫</h3> <p>如果你不想全局配置守卫的话，你可以为某些路由单独配置守卫：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span>\\n        component<span class=\\\"token punctuation\\\">:</span> Foo<span class=\\\"token punctuation\\\">,</span>\\n        beforeEnter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token comment\\\">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span>\\n        <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><h3 id=\\\"路由组件内的守卫：\\\"><a href=\\\"#路由组件内的守卫：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由组件内的守卫：</h3> <ol><li>beforeRouteEnter 进入路由前</li> <li>beforeRouteUpdate (2.2) 路由复用同一个组件时</li> <li>beforeRouteLeave 离开当前路由时</li></ol> <p><strong>文档中的介绍：</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteEnter</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token function\\\">beforeRouteUpdate</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`</span>\\n<span class=\\\"token comment\\\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\\n<span class=\\\"token comment\\\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 导航离开该组件的对应路由时调用，可以访问组件实例 `this`</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p><strong>beforeRouteEnter访问this</strong></p> <p>因为钩子在组件实例还没被创建的时候调用，所以不能获取组件实例 <code>this</code>，可以通过传一个回调给<code>next</code>来访问组件实例\\n。</p> <p>但是<strong>回调的执行时机在mounted后面</strong>,所以在我看来这里对this的访问意义不太大，可以放在<code>created</code>或者<code>mounted</code>里面。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteEnter</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'在路由独享守卫后调用'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>vm <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>beforeRouteLeave：</strong></p> <p>导航离开该组件的对应路由时调用，我们用它来禁止用户离开，比如还未保存草稿，或者在用户离开前，将<code>setInterval</code>销毁，防止离开之后，定时器还在调用。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>文章保存<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 允许离开或者可以跳到别的路由 上面讲过了</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取消离开</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"关于钩子的一些知识：\\\"><a href=\\\"#关于钩子的一些知识：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于钩子的一些知识：</h3> <h4 id=\\\"路由钩子函数的错误捕获\\\"><a href=\\\"#路由钩子函数的错误捕获\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由钩子函数的错误捕获</h4> <p>如果我们在全局守卫/路由独享守卫/组件路由守卫的钩子函数中有错误，可以这样捕获：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onError</span><span class=\\\"token punctuation\\\">(</span>callback <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n<span class=\\\"token comment\\\">// 2.4.0新增 并不常用，了解一下就可以了 </span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'callback'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在路由文档中还有更多的\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"实例方法\"),_c('OutboundLink')],2),_vm._ssrNode(\"：动态添加路由等，有兴趣可以了解一下。\")],2),_vm._ssrNode(\" <h4 id=\\\"跳转死循环，页面永远空白\\\"><a href=\\\"#跳转死循环，页面永远空白\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 跳转死循环，页面永远空白</h4> <p>我了解到的，很多人会碰到这个问题，来看一下这段伪代码：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>登录<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>看逻辑貌似是对的，但是当我们跳转到<code>login</code>之后，因为此时还是未登录状态，所以会一直跳转到<code>login</code>然后死循环，页面一直是空白的，所以：我们需要把判断条件稍微改一下。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>登录 <span class=\\\"token operator\\\">||</span> to<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'login'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 登录，或者将要前往login页面的时候，就允许进入路由</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h4 id=\\\"全局后置钩子的跳转：\\\"><a href=\\\"#全局后置钩子的跳转：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 全局后置钩子的跳转：</h4> <p>文档中提到因为router.afterEach不接受<code>next</code>函数所以也不会改变导航本身，意思就是只能当成一个钩子来使用，但是我自己在试的时候发现，我们可以通过这种形式来实现跳转：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js 入口文件</span>\\n<span class=\\\"token keyword\\\">import</span> router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./router'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引入路由</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">afterEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>未登录 <span class=\\\"token operator\\\">&amp;&amp;</span> to<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'login'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 跳转login</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>额，通过router.beforeEach 也完全可以实现且更好，我就骚一下。</p> <h3 id=\\\"完整的路由导航解析流程-不包括其他生命周期-：\\\"><a href=\\\"#完整的路由导航解析流程-不包括其他生命周期-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 完整的路由导航解析流程(不包括其他生命周期)：</h3> <ol><li>触发进入其他路由。</li> <li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li> <li>调用局前置守卫：<code>beforeEach</code></li> <li>在重用的组件里调用 <code>beforeRouteUpdate</code></li> <li>调用路由独享守卫 <code>beforeEnter</code>。</li> <li>解析异步路由组件。</li> <li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li> <li>调用全局解析守卫 <code>beforeResolve</code></li> <li>导航被确认。</li> <li>调用全局后置钩子的 <code>afterEach</code> 钩子。</li> <li>触发DOM更新(<code>mounted</code>)。</li> <li>执行<code>beforeRouteEnter</code> 守卫中传给 next 的回调函数</li></ol> <hr> <h2 id=\\\"你不知道的keep-alive-我猜你不知道\\\"><a href=\\\"#你不知道的keep-alive-我猜你不知道\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 你不知道的keep-alive[我猜你不知道]</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件<code>keep-alive</code>来<strong>缓存组件内部状态，避免重新渲染</strong>，\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/api/#keep-alive\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档在这里\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <blockquote><p>文档：和 <code>&lt;transition&gt;</code>相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p></blockquote> <h3 id=\\\"用法：\\\"><a href=\\\"#用法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用法：</h3> <p><strong>缓存动态组件：</strong></p> <p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，此种方式并无太大的实用意义。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 基本 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!-- 多个条件判断的子组件 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>comp-a</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a &gt; 1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>comp-a</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>comp-b</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>comp-b</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p><strong>缓存路由组件：</strong></p> <p>使用<code>keep-alive</code>可以将所有路径匹配到的路由组件都缓存起来，包括路由组件里面的组件，<code>keep-alive</code>大多数使用场景就是这种。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"生命周期钩子：\\\"><a href=\\\"#生命周期钩子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生命周期钩子：</h3> <p>这篇既然是Vue钩子函数的专场，那肯定要扣题呀~</p> <p>在被<code>keep-alive</code>包含的组件/路由中，会多出两个生命周期的钩子:<code>activated</code> 与 <code>deactivated</code>。</p> <blockquote><p>文档：在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <code>&lt;keep-alive&gt;</code> 树内的<strong>所有嵌套组件</strong>中触发。</p></blockquote> <p><strong>activated在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用</strong>。</p> <p><strong>activated调用时机：</strong></p> <p>第一次进入缓存路由/组件，在<code>mounted</code>后面，<code>beforeRouteEnter</code>守卫传给 next 的回调函数之前调用：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        beforeMount<span class=\\\"token operator\\\">=&gt;</span> 如果你是从别的路由<span class=\\\"token operator\\\">/</span><span class=\\\"token function\\\">组件进来</span><span class=\\\"token punctuation\\\">(</span>组件销毁destroyed<span class=\\\"token operator\\\">/</span>或离开缓存deactivated<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span>\\n        mounted<span class=\\\"token operator\\\">=&gt;</span> activated 进入缓存组件 <span class=\\\"token operator\\\">=&gt;</span> 执行 beforeRouteEnter回调\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>因为组件被缓存了，<strong>再次进入缓存路由/组件时，不会触发这些钩子</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// beforeCreate created beforeMount mounted 都不会触发。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>所以之后的调用时机是：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        组件销毁destroyed<span class=\\\"token operator\\\">/</span>或离开缓存deactivated <span class=\\\"token operator\\\">=&gt;</span> activated 进入当前缓存组件 \\n        <span class=\\\"token operator\\\">=&gt;</span> 执行 beforeRouteEnter回调\\n        <span class=\\\"token comment\\\">// 组件缓存或销毁，嵌套组件的销毁和缓存也在这里触发</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>deactivated：组件被停用(离开路由)时调用</strong></p> <p><strong>使用了<code>keep-alive</code>就不会调用<code>beforeDestroy</code>(组件销毁前钩子)和<code>destroyed</code>(组件销毁)，因为组件没被销毁，被缓存起来了</strong>。</p> <p>这个钩子可以看作<code>beforeDestroy</code>的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，你可以放在这个钩子里。</p> <p>如果你离开了路由，会依次触发：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        组件内的离开当前路由钩子beforeRouteLeave <span class=\\\"token operator\\\">=&gt;</span>  路由前置守卫 beforeEach <span class=\\\"token operator\\\">=&gt;</span>\\n        全局后置钩子afterEach <span class=\\\"token operator\\\">=&gt;</span> deactivated 离开缓存组件 <span class=\\\"token operator\\\">=&gt;</span> activated <span class=\\\"token function\\\">进入缓存组件</span><span class=\\\"token punctuation\\\">(</span>如果你进入的也是缓存路由<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">// 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated </span>\\n        <span class=\\\"token comment\\\">// 如果进入的路由也没有缓存的话  全局后置钩子afterEach=&gt;销毁 destroyed=&gt; beforeCreate等</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>那么，如果我只是想缓存其中几个路由/组件，那该怎么做？</p> <h3 id=\\\"缓存你想缓存的路由：\\\"><a href=\\\"#缓存你想缓存的路由：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缓存你想缓存的路由：</h3> <h4 id=\\\"vue2-1-0之前\\\"><a href=\\\"#vue2-1-0之前\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue2.1.0之前:</h4> <p>想实现类似的操作，你可以：</p> <ol><li>配置一下路由元信息</li> <li>创建两个<code>keep-alive</code>标签</li> <li>使用<code>v-if</code>通过路由元信息判断缓存哪些路由。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token operator\\\">&lt;</span>keep<span class=\\\"token operator\\\">-</span>alive<span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span>router<span class=\\\"token operator\\\">-</span>view v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;$route.meta.keepAlive&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>这里是会被缓存的路由<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>router<span class=\\\"token operator\\\">-</span>view<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>keep<span class=\\\"token operator\\\">-</span>alive<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span>router<span class=\\\"token operator\\\">-</span>view v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;!$route.meta.keepAlive&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>因为用的是v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span> 所以下面还要创建一个未缓存的路由视图出口<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>router<span class=\\\"token operator\\\">-</span>view<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token comment\\\">//router配置</span>\\n        <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span>\\n              name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'home'</span><span class=\\\"token punctuation\\\">,</span>\\n              component<span class=\\\"token punctuation\\\">:</span> Home<span class=\\\"token punctuation\\\">,</span>\\n              meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                keepAlive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 需要被缓存</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/:id'</span><span class=\\\"token punctuation\\\">,</span>\\n              name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'edit'</span><span class=\\\"token punctuation\\\">,</span>\\n              component<span class=\\\"token punctuation\\\">:</span> Edit<span class=\\\"token punctuation\\\">,</span>\\n              meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                keepAlive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token comment\\\">// 不需要被缓存</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br></div></div><h4 id=\\\"vue2-1-0版本之后：\\\"><a href=\\\"#vue2-1-0版本之后：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue2.1.0版本之后：</h4> <p>使用路由元信息的方式，要多创建一个<code>router-view</code>标签，并且每个路由都要配置一个元信息，是可以实现我们想要的效果，但是过于繁琐了点。</p> <p>幸运的是在Vue2.1.0之后，Vue新增了两个属性配合<code>keep-alive</code>来有条件地缓存 路由/组件。</p> <p><strong>新增属性：</strong></p> <ul><li><code>include</code>：匹配的 路由/组件 会被缓存</li> <li><code>exclude</code>：匹配的 路由/组件 不会被缓存</li></ul> <p><code>include</code>和<code>exclude</code>支持三种方式来有条件的缓存路由：采用逗号分隔的字符串形式，正则形式，数组形式。</p> <p>正则和数组形式，必须采用<code>v-bind</code>形式来使用。</p> <p><strong>缓存组件的使用方式</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>        <span class=\\\"token comment\\\">&lt;!-- 逗号分隔字符串 --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a,b<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        \\n        <span class=\\\"token comment\\\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">:include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>/a|b/<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        \\n        <span class=\\\"token comment\\\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">:include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>[<span class=\\\"token punctuation\\\">'</span>a<span class=\\\"token punctuation\\\">'</span>, <span class=\\\"token punctuation\\\">'</span>b<span class=\\\"token punctuation\\\">'</span>]<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p><strong>但更多场景中，我们会使用<code>keep-alive</code>来缓存路由</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>a<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>匹配规则：</strong></p> <ol><li><strong>首先匹配组件的name选项</strong>，如果<code>name</code>选项不可用。</li> <li>则匹配它的<strong>局部注册名称</strong>。 (父组件 <code>components</code> 选项的键值)</li> <li><strong>匿名组件，不可匹配</strong>。</li></ol> <p>比如路由组件没有<code>name</code>选项，并且没有注册的组件名。</p> <ol start=\\\"4\\\"><li>只能匹配当前被包裹的组件，<strong>不能匹配更下面嵌套的子组件</strong>。</li></ol> <p>比如用在路由上，只能匹配路由组件的<code>name</code>选项，不能匹配路由组件里面的嵌套组件的<code>name</code>选项。</p> <ol start=\\\"5\\\"><li>文档：<code>&lt;keep-alive&gt;</code><strong>不会在函数式组件中正常工作</strong>，因为它们没有缓存实例。</li> <li><strong><code>exclude</code>的优先级大于<code>include</code></strong></li></ol> <p>也就是说：当<code>include</code>和<code>exclude</code>同时存在时，<code>exclude</code>生效，<code>include</code>不生效。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a,b<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">exclude</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token comment\\\">&lt;!--只有a不被缓存--&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>当组件被<code>exclude</code>匹配，该组件将不会被缓存，不会调用<code>activated</code> 和 <code>deactivated</code></strong>。</p> <hr> <h2 id=\\\"组件生命周期钩子：\\\"><a href=\\\"#组件生命周期钩子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件生命周期钩子：</h2> <p>关于组件的生命周期，是时候放出这张图片了：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/7/21/164bbf610b61f3cd?w=1200&h=2800&f=jpeg&s=946212\\\" alt></p> <p>这张图片已经讲得很清楚了，很多人这部分也很清楚了，大部分生命周期并不会用到，这里提一下几点：</p> <ol><li><p><strong>ajax请求最好放在<code>created</code>里面</strong>，因为此时已经可以访问<code>this</code>了，请求到数据就可以直接放在<code>data</code>里面。</p> <p>这里也碰到过几次，面试官问：ajax请求应该放在哪个生命周期。</p></li> <li><p><strong>关于dom的操作要放在<code>mounted</code>里面</strong>，在<code>mounted</code>前面访问dom会是<code>undefined</code>。</p></li> <li><p>每次进入/离开组件都要做一些事情，用什么钩子：</p></li></ol> <ul><li><p>不缓存：</p> <p>进入的时候可以用<code>created</code>和<code>mounted</code>钩子，离开的时候用<code>beforeDestory</code>和<code>destroyed</code>钩子,<code>beforeDestory</code>可以访问<code>this</code>，<code>destroyed</code>不可以访问<code>this</code>。</p></li> <li><p>缓存了组件：</p> <p>缓存了组件之后，再次进入组件不会触发<code>beforeCreate</code>、<code>created</code> 、<code>beforeMount</code>、 <code>mounted</code>，<strong>如果你想每次进入组件都做一些事情的话，你可以放在<code>activated</code>进入缓存组件的钩子中</strong>。</p> <p>同理：离开缓存组件的时候，<code>beforeDestroy</code>和<code>destroyed</code>并不会触发，可以使用<code>deactivated</code>离开缓存组件的钩子来代替。</p></li></ul> <hr> <h2 id=\\\"触发钩子的完整顺序：\\\"><a href=\\\"#触发钩子的完整顺序：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 触发钩子的完整顺序：</h2> <p>将路由导航、<code>keep-alive</code>、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li><code>beforeRouteLeave</code>:路由组件的组件离开路由前钩子，可取消路由离开。</li> <li><code>beforeEach</code>: 路由全局前置守卫，可用于登录验证、全局路由loading等。</li> <li><code>beforeEnter</code>: 路由独享守卫</li> <li><code>beforeRouteEnter</code>: 路由组件的组件进入路由前钩子。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<code>beforeResolve</code>:\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由全局解析守卫\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <li><code>afterEach</code>:路由全局后置钩子</li> <li><code>beforeCreate</code>:组件生命周期，不能访问<code>this</code>。</li> <li><code>created</code>:组件生命周期，可以访问<code>this</code>，不能访问dom。</li> <li><code>beforeMount</code>:组件生命周期</li> <li><code>deactivated</code>: 离开缓存组件a，或者触发a的<code>beforeDestroy</code>和<code>destroyed</code>组件销毁钩子。</li> <li><code>mounted</code>:访问/操作dom。</li> <li><code>activated</code>:进入缓存组件，进入a的嵌套子组件(如果有的话)。</li> <li>执行beforeRouteEnter回调函数next。</li>\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>Vue提供了很多钩子，但很多钩子我们几乎不会用到，只有清楚这些钩子函数的触发顺序以及背后的一些限制等，这样我们才能够正确的使用这些钩子，希望看了本文的同学，能对这些钩子有更加清晰的认识，使用起来更加得心应手。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue钩子函数.md?vue&type=template&id=7c79e11a&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/vue钩子函数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"d220d994\"\n  \n)\n\ncomponent.options.__file = \"vue钩子函数.md\"\n/* harmony default export */ var vue_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=18.server-bundle.js.map",
    "19.server-bundle.js": "exports.ids = [19];\nexports.modules = {\n\n/***/ 182:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md?vue&type=template&id=5d5e29f8&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-小技巧-小问题2\\\"><a href=\\\"#vue-小技巧-小问题2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 小技巧&amp;小问题2</h2> <p>用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章。</p> <h3 id=\\\"文章内容总结\\\"><a href=\\\"#文章内容总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文章内容总结:</h3> <ol><li>组件style的scoped</li> <li>Vue 数组/对象更新 视图不更新</li> <li>vue filters 过滤器的使用</li> <li>列表渲染相关</li> <li>深度watch与watch立即触发回调</li> <li>这些情况下不要使用箭头函数</li> <li>路由懒加载写法</li> <li>路由的项目启动页和404页面</li> <li>Vue调试神器:vue-devtools</li></ol> <hr> <h3 id=\\\"组件style的scoped\\\"><a href=\\\"#组件style的scoped\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件style的scoped:</h3> <p>问题：在组件中用js动态创建的dom，添加样式不生效。</p> <p><strong>场景</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>test<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> newDom<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;div&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 创建dom</span>\\n    newDom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;class&quot;</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">&quot;testAdd&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加样式</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>newDom<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 插入dom</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span> <span class=\\\"token attr-name\\\">scoped</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token style language-css\\\">\\n<span class=\\\"token selector\\\">.test</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.testAdd</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div><p><strong>结果</strong>：</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">// test生效   testAdd 不生效\\n&lt;div data-v-1b971ada class=&quot;test&quot;&gt;&lt;div class=&quot;testAdd&quot;&gt;&lt;/div&gt;&lt;/div&gt;\\n\\n.test[data-v-1b971ada]</span><span class=\\\"token punctuation\\\">{</span> // 注意data-v-1b971ada\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p><strong>原因</strong>:</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当 <code>&lt;style&gt;</code> 标签有 \"),_vm._ssrNode(\"<a href=\\\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"scoped\"),_c('OutboundLink')],2),_vm._ssrNode(\" 属性时，它的 CSS 只作用于当前组件中的元素。\")],2),_vm._ssrNode(\" <p>它会<strong>为组件中所有的标签和class样式添加一个<code>scoped</code>标识</strong>，就像上面结果中的<code>data-v-1b971ada</code>。</p> <p>所以原因就很清楚了：因为动态添加的dom没有<code>scoped</code>添加的标识，<strong>没有跟<code>testAdd</code>的样式匹配起来</strong>，导致样式失效。</p> <p><strong>解决方式</strong></p> <ul><li>推荐：去掉该组件的scoped</li></ul> <p>每个组件的css并不会很多，当设计到动态添加dom，并为dom添加样式的时候，就可以去掉scoped，会比下面的方法方便很多。</p> <ul><li>可以动态添加style</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面的栗子可以这样添加样式</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>background<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><hr> <h3 id=\\\"vue-数组-对象更新-视图不更新\\\"><a href=\\\"#vue-数组-对象更新-视图不更新\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 数组/对象更新 视图不更新</h3> <p>很多时候，我们习惯于这样操作数组和对象:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// data数据</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        obj<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n            a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n            b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// 数据更新 数组视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// ['OBKoro1'];</span>\\n<span class=\\\"token comment\\\">// 数据更新 对象视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>c <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">delete</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// {b:2,c:'OBKoro1'}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p> <p><strong>解决方式:</strong></p> <ol><li><strong>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)</strong></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变数组</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;c&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变对象</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果还是不懂的话，可以看看这个codepen\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/oyjdbZ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <ol start=\\\"2\\\"><li><strong>数组原生方法触发视图更新</strong>:</li></ol> <p>Vue可以监测到数组变化的，<strong>数组原生方法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>、 <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>意思是<strong>使用这些方法不用我们再进行额外的操作，视图自动进行更新</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐使用<code>splice</code>方法会比较好自定义,因为slice可以在数组的任何位置进行删除/添加操作，这部分可以看看我前几天写的一篇文章:\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b0903b26fb9a07a9d70c7e0?utm_source=gold_browser_extension#heading-7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"【干货】js 数组详细操作方法及解析合集\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ol start=\\\"3\\\"><li><strong>替换数组/对象</strong></li></ol> <p>比方说:你想遍历这个数组/对象，对每个元素进行处理，然后触发视图更新。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 文档中的栗子: filter遍历数组，返回一个新数组，用新数组替换旧数组</span>\\nexample1<span class=\\\"token punctuation\\\">.</span>items <span class=\\\"token operator\\\">=</span> example1<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/Foo/</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>举一反三</strong>：可以先把这个数组/对象保存在一个变量中，然后对这个变量进行遍历，等遍历结束后再用<strong>变量替换对象/数组</strong>。</p> <p><strong>并不会重新渲染整个列表</strong>:</p> <p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果你还是很困惑，可以看看\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"中关于这部分的解释。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"vue-filters-过滤器的使用\\\"><a href=\\\"#vue-filters-过滤器的使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue filters 过滤器的使用:</h3> <p>过滤器，通常用于后台管理系统，或者一些约定类型，过滤。Vue过滤器用法是很简单，但是很多朋友可能都没有用过，这里稍微讲解一下。</p> <p><strong>在html模板中的两种用法</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 在双花括号中 --&gt;</span>\\n{{ message | filterTest }}\\n<span class=\\\"token comment\\\">&lt;!-- 在 `v-bind` 中 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">:id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>message | filterTest<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>在组件<code>script</code>中的用法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>    \\n        <span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n            message<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span>   \\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    filters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>  \\n        <span class=\\\"token function\\\">filterTest</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// value在这里是message的值</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'最后输出这个值'</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><p>用法就是上面讲的这样，可以自己在组件中试一试就知道了，很简单很好用的。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果不想自己试，可以点这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/rKxBMw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"里面修改代码就可以了，demo中包括<strong>过滤器串联</strong>、<strong>过滤器传参</strong>。\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐看Vue\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/filters.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"过滤器\"),_c('OutboundLink')],2),_vm._ssrNode(\"文档，你会更了解它的。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"列表渲染相关\\\"><a href=\\\"#列表渲染相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 列表渲染相关</h3> <p><strong>v-for循环绑定model:</strong></p> <p>input在v-for中可以像如下这么进行绑定，我敢打赌很多人不知道。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 数据    </span>\\n<span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;OB&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认ob&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span>   \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// html模板</span>\\n<span class=\\\"token operator\\\">&lt;</span>div v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;(value,key) in obj&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;text&quot;</span> v<span class=\\\"token operator\\\">-</span>model<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;model[key]&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">// input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"为此，我做了个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/gKPOgw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\",你可以点进去试试。\")],2),_vm._ssrNode(\" <p><strong>一段取值的v-for</strong></p> <p>如果我们有一段重复的html模板要渲染，又没有数据关联，我们可以:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>n in 5<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>这里会被渲染5次，渲染模板{{n}}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>v-if尽量不要与v-for在同一节点使用</strong>:</p> <p>v-for 的优先级比 v-if 更高,如果它们处于同一节点的话，那么每一个循环都会运行一遍v-if。</p> <p>如果你想根据循环中的<strong>每一项的数据来判断是否渲染，那么你这样做是对的</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo.type===1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>如果你想要根据<strong>某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，你可以将v-if放在v-for的父节点</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    \\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>elseData<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n// 数组是否有数据 跟每个元素没有关系\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todos.length<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span>No todos left!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><p>如上，正确使用v-for与v-if优先级的关系，可以为你节省大量的性能。</p> <hr> <h3 id=\\\"深度watch与watch立即触发回调\\\"><a href=\\\"#深度watch与watch立即触发回调\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 深度watch与watch立即触发回调</h3> <p>watch很多人都在用，但是这watch中的这两个选项<code>deep</code>、<code>immediate</code>，或许不是很多人都知道，我猜。</p> <p><strong>选项：deep</strong></p> <p>在选项参数中指定 <code>deep: true</code>，可以监听对象中属性的变化。</p> <p><strong>选项：immediate</strong></p> <p>在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'属性发生变化触发这个回调'</span><span class=\\\"token punctuation\\\">,</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        deep<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 监听这个对象中的每一个属性变化</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    step<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 属性</span>\\n        <span class=\\\"token comment\\\">//watch</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认立即触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        immediate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 默认立即触发一次</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这两个选项可以同时使用，另外：是的，又有一个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/QxyWMa\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>还有下面这一点需要注意。</p> <hr> <h3 id=\\\"这些情况下不要使用箭头函数\\\"><a href=\\\"#这些情况下不要使用箭头函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这些情况下不要使用箭头函数:</h3> <ul><li>不应该使用箭头函数来定义一个生命周期方法</li> <li>不应该使用箭头函数来定义 method 函数</li> <li>不应该使用箭头函数来定义计算属性函数</li> <li>不应该对 data 属性使用箭头函数</li> <li>不应该使用箭头函数来定义 watcher 函数</li></ul> <p>示例：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面watch的栗子：</span>\\nhandler<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// method：</span>\\nmethods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    plus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n        <span class=\\\"token comment\\\">// do something</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 生命周期:</span>\\ncreated<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lala'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">)</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>是的，没错，这些都能执行。</p> <p><strong>but</strong>:</p> <p>箭头函数绑定了父级作用域的上下文，<strong>this 将不会按照期望指向 Vue 实例</strong>。</p> <p>也就是说，你<strong>不能使用this来访问你组件中的data数据以及method方法了</strong>。</p> <p>this将会指向undefined。</p> <hr> <h3 id=\\\"路由懒加载写法\\\"><a href=\\\"#路由懒加载写法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由懒加载写法:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 引入组件</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// Vue路由文档的写法:</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">app</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app.vue'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 引入组件</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span> component<span class=\\\"token punctuation\\\">:</span> app <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>文档的写法在于问题在于：如果我们的路由比较多的话，是不是要在路由上方引入赋值十几行组件？</p> <p>第一种跟第二种方法相比就是把引入赋值的一步，直接写在<code>component</code>上面，本质上是一样的。两种方式都可以的，大家自由选择哈。</p> <hr> <h3 id=\\\"路由的项目启动页和404页面\\\"><a href=\\\"#路由的项目启动页和404页面\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由的项目启动页和404页面</h3> <p>实际上这也就是一个设置而已:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 项目启动页</span>\\n        redirect<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'/login'</span>  <span class=\\\"token comment\\\">// 重定向到下方声明的路由 </span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'*'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 404 页面 </span>\\n        component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./notFind'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 或者使用component也可以的</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><p>比如你的域名为:<code>www.baidu.com</code></p> <p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到login登录页。</p> <p>404页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到404页面。</p> <p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到<code>notFind</code>页面。</p> <p>当你没有声明一个404页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p> <hr> <h3 id=\\\"vue调试神器-vue-devtools\\\"><a href=\\\"#vue调试神器-vue-devtools\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue调试神器:vue-devtools</h3> <p>每次调试的时候，写一堆<code>console</code>是否很烦？想要<strong>更快知道组件/Vuex内数据的变化</strong>？</p> <p>那么这款<strong>尤大开发</strong>的调试神器:vue-devtools，你真的要了解一下了。</p> <p>这波稳赚不赔，真的能提高开发效率。</p> <p><strong>安装方法</strong>：</p> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>谷歌商店+科学上网,搜索vue-devtools即可安装。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"不会科学上网？\"),_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000009682735\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"手动安装\"),_c('OutboundLink')],2)],2)],2),_vm._ssrNode(\" <p><strong>安装之后</strong>：</p> <p>在chrome开发者工具中会看一个vue的一栏，如下对我们网页应用内数据变化，组件层级等信息能够有更准确快速的了解。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/3/163c50e5198f6b8c?w=1917&h=324&f=png&s=45776\\\" alt></p> <hr> <h3 id=\\\"前几个月也写过一篇类似的\\\"><a href=\\\"#前几个月也写过一篇类似的\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前几个月也写过一篇类似的:</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a587b46f265da3e3b7a7677\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue 实践过程中的几个问题\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <hr> <h2 id=\\\"结语\\\"><a href=\\\"#结语\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语</h2> <p>本文的内容很多都在Vue文档里面有过说明，推荐大家可以多看看Vue文档，不止看教程篇，还有文档的Api什么的，也都可以看。然后其实还有两三点想写的，因为预计篇幅都会比较长一点，所以准备留到以后的文章里面吧~</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md?vue&type=template&id=5d5e29f8&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"89ab3c0e\"\n  \n)\n\ncomponent.options.__file = \"你或许不知道Vue的这些小技巧.md\"\n/* harmony default export */ var _Vue_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=19.server-bundle.js.map",
    "20.server-bundle.js": "exports.ids = [20];\nexports.modules = {\n\n/***/ 175:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/弹窗.md?vue&type=template&id=de8c2448&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"简单的弹窗组件实现\\\"><a href=\\\"#简单的弹窗组件实现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 简单的弹窗组件实现</h2> <p>最近在使用element-ui框架，用到了Dialog对话框组件，大致实现的效果，跟我之前自己在移动端项目里面弄的一个弹窗组件差不太多。然后就想着把这种弹窗组件的实现方式与大家分享一下，下面本文会带着大家手摸手实现一个弹窗组件。</p> <p>本文主要内容会涉及到弹窗遮罩的实现，<code>slot</code>插槽的使用方式，<code>props</code>、<code>$emit</code>传参，具体组件代码也传上去了。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <hr> <h3 id=\\\"组件最后实现的效果\\\"><a href=\\\"#组件最后实现的效果\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件最后实现的效果</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/21/162e6f9251c7c18f?w=650&h=1141&f=png&s=374719\\\" alt></p> <h2 id=\\\"实现步骤\\\"><a href=\\\"#实现步骤\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现步骤</h2> <ol><li>先搭建组件的html和css样式，遮罩层和内容层。</li> <li>定制弹窗内容：弹窗组件通过<code>slot</code>插槽接受从父组件那里传过来弹窗内容。</li> <li>定制弹窗样式：弹窗组件通过<code>props</code>接收从父组件传过来的弹窗宽度，上下左右的位置。</li> <li>组件开关：通过父组件传进来的<code>props</code>控制组件的显示与隐藏，子组件关闭时通过事件<code>$emit</code>触发父组件改变值。</li></ol> <hr> <h3 id=\\\"_1-搭建组件的html和css样式。\\\"><a href=\\\"#_1-搭建组件的html和css样式。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1.搭建组件的html和css样式。</h3> <p>html结构：一层遮罩层，一层内容层，内容层里面又有一个头部title和主体内容和一个关闭按钮。</p> <p>下面是组件中的html结构，里面有一些后面才要加进去的东西，如果看不懂的话可以先跳过，</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n       <span class=\\\"token comment\\\">&lt;!--外层的遮罩 点击事件用来关闭弹窗，isShow控制弹窗显示 隐藏的props--&gt;</span>\\n       <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog-cover back<span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>isShow<span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">@click</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>closeMyself<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n       <span class=\\\"token comment\\\">&lt;!-- transition 这里可以加一些简单的动画效果 --&gt;</span>\\n       <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>transition</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>drop<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token comment\\\">&lt;!--style 通过props 控制内容的样式  --&gt;</span>\\n         <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog-content<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span>topDistance+<span class=\\\"token string\\\">'%'</span>,<span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>widNum+<span class=\\\"token string\\\">'%'</span>,<span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span>leftSite+<span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>isShow<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_head back<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n               <span class=\\\"token comment\\\">&lt;!--弹窗头部 title--&gt;</span>\\n               <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>提示信息<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_main<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">paddingTop</span><span class=\\\"token punctuation\\\">:</span>pdt+<span class=\\\"token string\\\">'px'</span>,<span class=\\\"token property\\\">paddingBottom</span><span class=\\\"token punctuation\\\">:</span>pdb+<span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n             <span class=\\\"token comment\\\">&lt;!--弹窗的内容--&gt;</span>\\n             <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token comment\\\">&lt;!--弹窗关闭按钮--&gt;</span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span>  <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>foot_close<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">@click</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>closeMyself<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n               <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>close_img back<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n         <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n     <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>transition</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><p>下面是组件中的主要的css样式，里面都做了充分的注释，主要通过<code>z-index</code>和<code>background</code>达到遮罩的效果，具体内容的css可以根据自己的需求来设置。</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code>&lt;style lang=<span class=\\\"token string\\\">&quot;scss&quot;</span> scoped&gt;\\n  <span class=\\\"token comment\\\">/* 最外层 设置position定位  */</span>\\n  <span class=\\\"token selector\\\">.dialog</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> relative<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #2e2c2d<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> 16px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">/* 遮罩 设置背景层，z-index值要足够大确保能覆盖，高度 宽度设置满 做到全屏遮罩 */</span>\\n  <span class=\\\"token selector\\\">.dialog-cover</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rgba</span><span class=\\\"token punctuation\\\">(</span>0,0,0, 0.8<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> fixed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">z-index</span><span class=\\\"token punctuation\\\">:</span> 200<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100%<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100%<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">/* 内容层 z-index要比遮罩大，否则会被遮盖， */</span>\\n  <span class=\\\"token selector\\\">.dialog-content</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> fixed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span> 35%<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/* 移动端使用felx布局  */</span>\\n    <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> flex<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">flex-direction</span><span class=\\\"token punctuation\\\">:</span> column<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">justify-content</span><span class=\\\"token punctuation\\\">:</span> center<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">align-items</span><span class=\\\"token punctuation\\\">:</span> center<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">z-index</span><span class=\\\"token punctuation\\\">:</span> 300<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n&lt;/style&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br></div></div><hr> <h3 id=\\\"_2-通过slot定制弹窗内容\\\"><a href=\\\"#_2-通过slot定制弹窗内容\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 通过<code>slot</code>定制弹窗内容</h3> <p>这一步，只要理解了<code>slot</code>的作用以及用法，就没有问题了。</p> <h4 id=\\\"单个插槽：\\\"><a href=\\\"#单个插槽：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 单个插槽：</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是在没有slot传进来的时候，才显示的弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>上面是单个插槽也叫默认插槽，在父组件中使用插槽的正确姿势：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>my-component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token comment\\\">&lt;!--在my-component里面的所有内容片段都将插入到slot所在的DOM位置，并且会替换掉slot标签--&gt;</span>\\n  <span class=\\\"token comment\\\">&lt;!--这两个p标签，将替换整个slot标签里面的内容--&gt;</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是一些初始内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是更多的初始内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>my-component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>ps:如果子组件里面包含<code>slot</code>插槽，那么上面的p标签的内容将会被丢弃。</p> <h4 id=\\\"具名插槽：\\\"><a href=\\\"#具名插槽：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 具名插槽：</h4> <p>所谓的具名插槽，即为<code>slot</code>标签赋一个<code>name</code>属性，具名插槽可以父组件中不同的内容片段放到子组件的不同地方，具名插槽还是可以拥有一个默认插槽。下面可以看一下弹窗组件插槽的使用方式：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_head back <span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token comment\\\">&lt;!--弹窗头部 title--&gt;</span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>提示信息<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_main <span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">paddingTop</span><span class=\\\"token punctuation\\\">:</span>pdt+<span class=\\\"token string\\\">'px'</span>,<span class=\\\"token property\\\">paddingBottom</span><span class=\\\"token punctuation\\\">:</span>pdb+<span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token comment\\\">&lt;!--弹窗的内容--&gt;</span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>在父组件中的使用方式：</p> <ol><li>将弹窗组件引入要使用的组件中，并通过<code>components</code>注册成为组件。</li> <li>父组件中弹窗组件插槽的使用方法如下。</li></ol> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">slot</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>插入到name为header的slot标签里面<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_publish_main<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">slot</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        这里是内容插入到子组件的slot的name为main里面，可以在父组件中添加class定义样式，事件类型等各种操作\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>关于组件中用到的插槽的介绍就到这里了，插槽在弹窗组件中的应用是一个典型的栗子，可以看到插槽作用相当强大，而插槽本身的使用并不难，同学们爱上插槽了没有？</p> <hr> <h3 id=\\\"_3-通过props控制弹窗显隐-定制弹窗style\\\"><a href=\\\"#_3-通过props控制弹窗显隐-定制弹窗style\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.通过<code>props</code>控制弹窗显隐&amp;&amp;定制弹窗style</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<code>psops</code>是Vue中父组件向子组件传递数据的一种方式，不熟悉的小伙伴们可以看一下\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#Prop\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"props文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>因为弹窗组件都是引到别的组件里面去用的，为了适合不同组件场景中的弹窗，所以弹窗组件必须具备一定的可定制性，否则这样的组件将毫无意义,下面介绍一下props的使用方式，以弹窗组件为例：</p> <ol><li>首先需要在被传入的组件中定义props的一些特性，验证之类的。</li> <li>然后在父组件中绑定props数据。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    isShow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token comment\\\">//弹窗组件是否显示 默认不显示</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Boolean<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n      required<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//必须</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">//下面这些属性会绑定到div上面 详情参照上面的html结构</span>\\n    <span class=\\\"token comment\\\">// 如： :style=&quot;{top:topDistance+'%',width:widNum+'%'}&quot;</span>\\n    widNum<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token comment\\\">//内容宽度</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">86.5</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    leftSite<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 左定位</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6.5</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    topDistance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//top上边距</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">35</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    pdt<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">//上padding</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">22</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    pdb<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">//下padding</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">47</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">&gt;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br></div></div><p>父组件中使用方式：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>dialogComponent</span> <span class=\\\"token attr-name\\\">:is-show</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>status.isShowPublish<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:top-distance</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>status.topNum<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>ps：props传递数据不是双向绑定的，而是<strong>单向数据流</strong>，父组件的数据变化时，也会传递到子组件中，这就意外着我们不应该在子组件中修改props。所以我们在关闭弹窗的时候就<strong>需要通过<code>$emit</code>来修改父组件的数据</strong>，然后数据会自动传到子组件中。</p> <p>现在基本上弹窗组件都已实现的差不多了，还差一个弹窗的关闭事件，这里就涉及到子组件往父组件传参了。</p> <h3 id=\\\"_4-emit触发父组件事件修改数据，关闭弹窗\\\"><a href=\\\"#_4-emit触发父组件事件修改数据，关闭弹窗\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4.<code>$emit</code>触发父组件事件修改数据，关闭弹窗</h3> <p>Vue中在子组件往父组件传参，很多都是通过<code>$emit</code>来触发父组件的事件来修改数据。</p> <p>在子组件中，在点击关闭，或者遮罩层的时候触发下面这个方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">closeMyself</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;on-close&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token comment\\\">//如果需要传参的话，可以在&quot;on-close&quot;后面再加参数，然后在父组件的函数里接收就可以了。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>父组件中的写法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>dialogComponent <span class=\\\"token punctuation\\\">:</span>is<span class=\\\"token operator\\\">-</span>show<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;status.isShowPublish&quot;</span> <span class=\\\"token punctuation\\\">:</span>top<span class=\\\"token operator\\\">-</span>distance<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;status.topNum&quot;</span>  @on<span class=\\\"token operator\\\">-</span>close<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;closeDialog&quot;</span><span class=\\\"token operator\\\">&gt;</span> \\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>dialogComponent<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">//&quot;on-close是监听子组件的时间有没有触发，触发的时候执行closeDialog函数</span>\\nmethods<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">closeDialog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this.status.isShowPublish=false;</span>\\n    <span class=\\\"token comment\\\">//把绑定的弹窗数组 设为false即可关闭弹窗</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><hr> <p>可以用弹窗组件实现下列这种信息展示，或者事件交互：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/21/162e7a7af2e0effa?w=402&h=728&f=png&s=140506\\\" alt></p> \"),_vm._ssrNode(\"<h3 id=\\\"弹窗组件代码\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#弹窗组件代码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"弹窗组件代码\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"上面是把弹窗的每个步骤拆分开来，一步步解析的，每一步都说的比较清楚了，具体连起来的话，可以看看\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码\"),_c('OutboundLink')],2),_vm._ssrNode(\"，再结合文章就能理的很清楚了。\")],2),_vm._ssrNode(\" <h2 id=\\\"小结：\\\"><a href=\\\"#小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结：</h2> <p>这个弹窗组件，实现起来一点都不难，我这里主要是提供了一个实现方式，当项目中有需要的话，大家也可以自己撸一个出来，以上就是本文的内容了，希望同学们看完能有所收获。</p> <p>以上2018.4.21</p> <h3 id=\\\"参考资料：\\\"><a href=\\\"#参考资料：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考资料：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E6%A7%BD%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue文档-插槽\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/弹窗.md?vue&type=template&id=de8c2448&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/弹窗.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"cb670854\"\n  \n)\n\ncomponent.options.__file = \"弹窗.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=20.server-bundle.js.map",
    "21.server-bundle.js": "exports.ids = [21];\nexports.modules = {\n\n/***/ 174:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/Vue/极简双向绑定.md?vue&type=template&id=23f5d558&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"仿vue极简双向绑定\\\"><a href=\\\"#仿vue极简双向绑定\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 仿Vue极简双向绑定</h2> <p>现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，<strong>接下来本文用160行代码带你实现一个极简的双向绑定机制</strong>。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <h2 id=\\\"效果gif：\\\"><a href=\\\"#效果gif：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 效果GIF：</h2> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl70vrkj3g30aw09iq3y.gif\\\" alt></p> <h2 id=\\\"demo地址：\\\"><a href=\\\"#demo地址：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> demo地址：</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>codepen:</strong>\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>Github:</strong>\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/simpleDemo/simpleDemo/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h2 id=\\\"了解object-defineproperty-：\\\"><a href=\\\"#了解object-defineproperty-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 了解Object.defineProperty()：</h2> <p>这个API是实现双向绑定的核心，最主要的作用是重写数据的<code>get</code>、<code>set</code>方法</p> <h3 id=\\\"使用方式：\\\"><a href=\\\"#使用方式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用方式：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;周杰伦&quot;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> default_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;青花瓷&quot;</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;music&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// value: '七里香', // 设置属性的值 下面设置了get set函数 所以这里不能设置</span>\\n    configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 是否可以删除属性 默认不能删除</span>\\n    <span class=\\\"token comment\\\">// writable: true,  // 是否可以修改对象 下面设置了get set函数 所以这里不能设置</span>\\n    enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// music是否可以被枚举 默认是不能被枚举(遍历)</span>\\n    <span class=\\\"token comment\\\">// ☆ get,set设置时不能设置writable和value，要一对一对设置，交叉设置/同时存在 就会报错</span>\\n    <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\\\"token comment\\\">// let default_value = &quot;强行设置get的返回值&quot;; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\\\"token keyword\\\">return</span> default_value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 将修改的值重新赋给song</span>\\n    default_value <span class=\\\"token operator\\\">=</span> val<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// configurable设为false 删除无效</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;听妈妈的话&quot;</span><span class=\\\"token punctuation\\\">;</span> \\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 听妈妈的话</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的</span>\\n    <span class=\\\"token comment\\\">// 需要设置enumerable为true才可以 否则只能拿到singer 属性</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer, music</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div><h3 id=\\\"示例demo：\\\"><a href=\\\"#示例demo：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 示例demo：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"对，这里有个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/XYYMMp?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"画一下重点：\\\"><a href=\\\"#画一下重点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 画一下重点：</h3> <ul><li>get,set设置时不能设置writable和value, 他们是一对情侣的存在，<strong>交叉设置或同时存在,会报错</strong></li> <li>通过<code>defineProperty</code>设置的属性，<strong>默认不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</li> <li><strong>get、set 是函数，可以做的事情很多</strong>。</li></ul> <p><strong>兼容性</strong>：IE 9,Firefox 4, Chorme 5,Opera 11.6,Safari 5.1</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的可以看一下\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h2 id=\\\"实现思路：\\\"><a href=\\\"#实现思路：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现思路：</h2> <h3 id=\\\"mvvm系列的双向绑定，关键步骤：\\\"><a href=\\\"#mvvm系列的双向绑定，关键步骤：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> mvvm系列的双向绑定，关键步骤：</h3> <ol><li>实现数据监听器Observer，用<code>Object.defineProperty()</code><strong>重写数据的get、set，值更新就在set中通知订阅者更新数据</strong>。</li> <li>实现模板编译Compile，深度遍历dom树，对每个元素节点的指令模板进行<strong>替换数据以及订阅数据</strong>。</li> <li>实现Watch用于连接Observer和Compile，<strong>能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</strong>。</li> <li>mvvm入口函数，整合以上三者。</li></ol> <h3 id=\\\"流程图：\\\"><a href=\\\"#流程图：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 流程图：</h3> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl7dygfovj30ka0augpd.jpg\\\" alt></p> <p>这部分讲的很清楚，现在有点懵逼也没关系，看完代码，自己copy下来玩一玩之后，回头再看实现思路，相信会有收获的。</p> <hr> <h2 id=\\\"具体代码实现：\\\"><a href=\\\"#具体代码实现：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 具体代码实现：</h2> <h3 id=\\\"html结构：\\\"><a href=\\\"#html结构：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> html结构：</h3> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>app<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>name<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span> <span class=\\\"token attr-name\\\">v-bind</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>name<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>testData1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>{{ testData1 }}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>testData2<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>{{ testData2 }}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>看到这个模板，相信用过Vue的同学都不会陌生。</p> <h3 id=\\\"调用方法：\\\"><a href=\\\"#调用方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 调用方法：</h3> <p>采用类Vue方式来使用双向绑定：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">myVue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        el<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#app'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// dom</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 数据</span>\\n            testData1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'仿Vue'</span><span class=\\\"token punctuation\\\">,</span>\\n            testData2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'极简双向绑定'</span><span class=\\\"token punctuation\\\">,</span>\\n            name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"创建myvue函数：\\\"><a href=\\\"#创建myvue函数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建myVue函数：</h3> <p>实际上这里是我们实现思路中的第四步，用于整合数据监听器<code>this._observer()</code>、指令解析器<code>this._compile()</code>以及连接Observer和Compile的_watcherTpl的watch池。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">myVue</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 防止没传，设一个默认值</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$options <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 配置挂载</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取dom</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_data <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数据挂载</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_watcherTpl <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// watcher池</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传入数据，执行函数，重写数据的get set</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_compile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传入dom，执行函数，编译模板 发布订阅</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><hr> <h3 id=\\\"watcher函数\\\"><a href=\\\"#watcher函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Watcher函数:</h3> <p>这是实现思路中的第三步，因为下方数据监听器<code>_observer()</code>需要用到Watcher函数，所以这里就先讲了。</p> <p>像实现思路中所说的，这里起到了连接Observer和Compile的作用：</p> <ol><li><strong>在模板编译_compile()阶段发布订阅</strong></li> <li><strong>在赋值操作的时候，更新视图</strong></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// new Watcher() 为this._compile()发布订阅+ 在this._observer()中set(赋值)的时候更新视图</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>el<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> attr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>el <span class=\\\"token operator\\\">=</span> el<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指令对应的DOM元素</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>vm <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// myVue实例</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> val<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指令对应的值 </span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>attr <span class=\\\"token operator\\\">=</span> attr<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// dom获取值，如value获取input的值 / innerHTML获取dom的值</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 更新视图</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nWatcher<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">update</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>el<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>attr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>vm<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取data的最新值 赋值给dom 更新视图</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>没有看错，代码量就这么多，可能需要把整个代码连接起来，多看几遍才能够理解。</p> <h3 id=\\\"实现数据监听器-observer-：\\\"><a href=\\\"#实现数据监听器-observer-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现数据监听器_observer()：</h3> <p>实现思路中的第一步，用<code>Object.defineProperty()</code>遍历data重写所有属性的get set。</p> <p>然后在给对象的某个属性赋值的时候，就会触发set。</p> <p><strong>在set中我们可以监听到数据的变化，然后就可以触发watch更新视图</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myVue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_observer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历数据</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 每个数据的订阅池()</span>\\n            _directives<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取属性值</span>\\n        <span class=\\\"token keyword\\\">var</span> watcherTpl <span class=\\\"token operator\\\">=</span> _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数据的订阅池</span>\\n        Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 双向绑定最重要的部分 重写数据的set get</span>\\n            configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 可以删除</span>\\n            enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 可以遍历</span>\\n            <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">获取值：</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>value<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取值的时候 直接返回</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 改变值的时候 触发set</span>\\n                console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">更新：</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">!==</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    value <span class=\\\"token operator\\\">=</span> newVal<span class=\\\"token punctuation\\\">;</span>\\n                    watcherTpl<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历订阅池 </span>\\n                        item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token comment\\\">// 遍历所有订阅的地方(v-model+v-bind+{{}}) 触发this._compile()中发布的订阅Watcher 更新视图  </span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br></div></div><h3 id=\\\"实现compile-模板编译\\\"><a href=\\\"#实现compile-模板编译\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现Compile 模板编译</h3> <p>这里是实现思路中的第三步，让我们来总结一下这里做了哪些事情：</p> <ul><li>首先是深度遍历dom树，遍历每个节点以及子节点。</li> <li>将模板中的变量替换成数据，初始化渲染页面视图。</li> <li>把指令绑定的属性添加到对应的订阅池中</li> <li>一旦数据有变动，收到通知，更新视图。</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myVue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_compile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>el<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nodes <span class=\\\"token operator\\\">=</span> el<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取app的dom</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历dom节点</span>\\n        <span class=\\\"token keyword\\\">var</span> node <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            _this<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_compile</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 递归深度遍历 dom树</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件    </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-model'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>tagName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'INPUT'</span> <span class=\\\"token operator\\\">||</span> node<span class=\\\"token punctuation\\\">.</span>tagName <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'TEXTAREA'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">var</span> attVal <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-model'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取v-model绑定的值</span>\\n                _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>attVal<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\\\"token punctuation\\\">,</span>\\n                    _this<span class=\\\"token punctuation\\\">,</span>\\n                    attVal<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">'value'</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    _this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span>attVal<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// input值改变的时候 将新值赋给数据 触发set=&gt;set触发watch 更新视图</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-bind'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// v-bind指令 </span>\\n            <span class=\\\"token keyword\\\">var</span> attrVal <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-bind'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 绑定的data</span>\\n            _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>attrVal<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                node<span class=\\\"token punctuation\\\">,</span>\\n                _this<span class=\\\"token punctuation\\\">,</span>\\n                attrVal<span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token string\\\">'innerHTML'</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n            \\n        <span class=\\\"token keyword\\\">var</span> reg <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/\\\\{\\\\{\\\\s*([^}]+\\\\S)\\\\s*\\\\}\\\\}/g</span><span class=\\\"token punctuation\\\">,</span> txt <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>textContent<span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 正则匹配{{}} </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>textContent <span class=\\\"token operator\\\">=</span> txt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>matched<span class=\\\"token punctuation\\\">,</span> placeholder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// matched匹配的文本节点包括双花括号, placeholder 是双花括号中间的属性名</span>\\n                <span class=\\\"token keyword\\\">var</span> getName <span class=\\\"token operator\\\">=</span> _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 所有绑定watch的数据</span>\\n                getName <span class=\\\"token operator\\\">=</span> getName<span class=\\\"token punctuation\\\">[</span>placeholder<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 获取对应watch 数据的值</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>getName<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 没有事件池 创建事件池</span>\\n                    getName<span class=\\\"token punctuation\\\">.</span>_directives <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                getName<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\\\"token punctuation\\\">,</span>\\n                    _this<span class=\\\"token punctuation\\\">,</span>\\n                    placeholder<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">'innerHTML'</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> placeholder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">return</span> _this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取数据的值 触发get 返回当前值 </span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> _this<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br><span class=\\\"line-number\\\">41</span><br><span class=\\\"line-number\\\">42</span><br><span class=\\\"line-number\\\">43</span><br><span class=\\\"line-number\\\">44</span><br><span class=\\\"line-number\\\">45</span><br><span class=\\\"line-number\\\">46</span><br><span class=\\\"line-number\\\">47</span><br><span class=\\\"line-number\\\">48</span><br><span class=\\\"line-number\\\">49</span><br><span class=\\\"line-number\\\">50</span><br><span class=\\\"line-number\\\">51</span><br><span class=\\\"line-number\\\">52</span><br><span class=\\\"line-number\\\">53</span><br><span class=\\\"line-number\\\">54</span><br></div></div><hr> <h2 id=\\\"完整代码-demo地址\\\"><a href=\\\"#完整代码-demo地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 完整代码&amp;demo地址</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub完整代码\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>codepen:</strong>\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>Github:</strong>\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果觉得还不错的话，就给个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/simpleDemo\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"⭐️鼓励一下我吧~\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>本文只是一个简单的实现双向绑定的方法，主要目的是帮助各位同学理解mvvm框架的双向绑定机制，也并没有很完善，这里还是有很多缺陷，比如：没有实现数据的深度对数据进行<code>get</code>、<code>set</code>等。希望看完本文，大家能有所收获。</p> <p>以上2018.6.24</p> <h3 id=\\\"参考资料：\\\"><a href=\\\"#参考资料：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考资料：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000006599500\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"剖析Vue原理&amp;实现双向绑定MVVM\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5acc17cb51882555745a03f8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"面试题：你能写一个Vue的双向数据绑定吗？\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5abdd6f6f265da23793c4458#heading-8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"不好意思！耽误你的十分钟，让MVVM原理还给你\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/极简双向绑定.md?vue&type=template&id=23f5d558&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/Vue/极简双向绑定.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"26ba9f32\"\n  \n)\n\ncomponent.options.__file = \"极简双向绑定.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=21.server-bundle.js.map",
    "22.server-bundle.js": "exports.ids = [22];\nexports.modules = {\n\n/***/ 173:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/amateur/VsCode文件头部注释生成.md?vue&type=template&id=d930bc64&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vscode文件头部注释生成\\\"><a href=\\\"#vscode文件头部注释生成\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> VsCode文件头部注释生成</h2> <h2 id=\\\"language\\\"><a href=\\\"#language\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> language</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/koro1FileHeader/blob/master/README.md\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"English\"),_c('OutboundLink')],2),_vm._ssrNode(\" | 简体中文\")],2),_vm._ssrNode(\" <h2 id=\\\"简介\\\"><a href=\\\"#简介\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 简介</h2> <ul><li>vscode扩展插件</li> <li>在文件头中添加注释</li> <li>支持用户自定义文件注释模板对象</li> <li>在你保存文件的时候 自动更新编辑时间</li></ul> <h2 id=\\\"安装\\\"><a href=\\\"#安装\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装</h2> <p>在 Vscode 扩展商店中搜索 <code>koroFileHeader</code></p> <h2 id=\\\"使用\\\"><a href=\\\"#使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用</h2> <ol><li>在 Vscode 中打开文件</li> <li>按 <code>ctrl+alt+i</code></li></ol> <p>成功在文件头部插入文件注释</p> <h2 id=\\\"注释模板\\\"><a href=\\\"#注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注释模板</h2> <h3 id=\\\"默认注释模板\\\"><a href=\\\"#默认注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 默认注释模板</h3> <ul><li><p>默认配置:</p> <pre><code>  &quot;fileheader.customMade&quot;: {\\n      &quot;Author&quot;: &quot;OBKoro1&quot;,\\n      &quot;Date&quot;: &quot;Do not edit&quot;,\\n      &quot;LastEditors&quot;: &quot;OBKoro1&quot;,\\n      &quot;LastEditTime&quot;: &quot;Do not edit&quot;,\\n      &quot;Description&quot;: &quot;&quot;,\\n  }\\n</code></pre></li> <li><p>文件注释生成:</p> <pre><code>  /*\\n   * @Author:OBKoro1\\n   * @Date:2018-05-15 16:20:04\\n   * @LastEditors:OBKoro1\\n   * @LastEditTime:2018-05-15 16:20:04\\n   * @Description:\\n   */\\n</code></pre></li></ul> <h3 id=\\\"推荐模板参数\\\"><a href=\\\"#推荐模板参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 推荐模板参数</h3> <p><code>Email</code>、<code>Company</code>、<code>version</code>等.</p> <h3 id=\\\"自定义注释模板\\\"><a href=\\\"#自定义注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 自定义注释模板</h3> <ol><li>在 VsCode 设置中搜索<code>fileheader.customMade</code></li> <li>复制默认配置+修改配置</li> <li>重启 VsCode 生效</li></ol> <h4 id=\\\"example\\\"><a href=\\\"#example\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Example</h4> <ul><li>设置：</li></ul> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/18/16370e8435d1cbd3?w=865&h=288&f=jpeg&s=161453\\\" alt></p> <ul><li><p>文件注释生成:</p> <pre><code>  /*\\n   * @Author: OBKoro1\\n   * @Date: 2018-05-16 12:33:57\\n   * @LastEditors: OBKoro1\\n   * @LastEditTime: 2018-05-16 12:33:57\\n   * @Description: \\n   * @Email: your Email\\n   * @Company: your company\\n   * @youWant: add you want\\n   */\\n</code></pre></li></ul> <h2 id=\\\"自动更新编辑时间-示例\\\"><a href=\\\"#自动更新编辑时间-示例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 自动更新编辑时间 示例:</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/18/16370e8435ed4d71?w=413&h=270&f=gif&s=49647\\\" alt></p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/amateur/VsCode文件头部注释生成.md?vue&type=template&id=d930bc64&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/amateur/VsCode文件头部注释生成.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"c4520fde\"\n  \n)\n\ncomponent.options.__file = \"VsCode文件头部注释生成.md\"\n/* harmony default export */ var VsCode_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=22.server-bundle.js.map",
    "23.server-bundle.js": "exports.ids = [23];\nexports.modules = {\n\n/***/ 198:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/amateur/推箱子.md?vue&type=template&id=7a749353&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"推箱子\\\"><a href=\\\"#推箱子\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 推箱子</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/7/160d0a90689f2101?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1\\\" alt=\\\"demo图片\\\"></p> \"),_vm._ssrNode(\"<h3 id=\\\"demo：推箱子小游戏\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#demo：推箱子小游戏\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> demo：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"推箱子小游戏\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h2 id=\\\"步骤解析：\\\"><a href=\\\"#步骤解析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 步骤解析：</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>\",\"</strong>\",[_vm._ssrNode(\"本文代码已经放在了\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github\"),_c('OutboundLink')],2),_vm._ssrNode(\"上面了,里面也进行了很详细的代码注释，可以copy下来，在本地运行一下看看\")],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"_1-渲染地图\\\"><a href=\\\"#_1-渲染地图\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 渲染地图</h3> <ol><li><p>html结构：\\n<img src=\\\"https://user-gold-cdn.xitu.io/2018/1/7/160d1149856a3714?w=503&h=727&f=png&s=48024\\\" alt></p> <pre><code> html结构十分简单，只要弄一堆div，来放置地图的class就可以了，我这里初始化了12*9个div，地图里最多九行高度。   \\n 这些div都是同样大小，地图渲染出来区别的只是颜色的不同。\\n</code></pre></li> <li><p>地图函数：</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> box<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.box div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//地图使用的div集合</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//创建地图函数</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//index的数量是固定的，是box div下面div的数量</span>\\n        <span class=\\\"token comment\\\">// 每次创建地图初始化div</span>\\n    box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//循环整个div的数量 二维数组里数量不够的 默认为空白</span>\\n<span class=\\\"token comment\\\">//level为关卡数 根据关卡渲染地图 builder为二维数组，为地图关卡</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>builder<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//过滤0</span>\\n        box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type'</span><span class=\\\"token operator\\\">+</span>builder<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>origin<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//推箱人 皮卡丘位置</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//第一关的地图长这样（下面只是栗子，不是代码），0代表不可抵达区域，1代表目标（要被推到的地方），</span>\\n<span class=\\\"token comment\\\">//2代表普通路径（可以走的），3代表墙，4代表箱子</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br></div></div><h3 id=\\\"_2-捕获键盘事件-判断是否可以移动\\\"><a href=\\\"#_2-捕获键盘事件-判断是否可以移动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 捕获键盘事件,判断是否可以移动</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"使用\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/jquery/event_keydown.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"$(document).keydown()\"),_c('OutboundLink')],2),_vm._ssrNode(\"jqery事件，捕获键盘事件。\")],2),_vm._ssrNode(\" <ol><li>捕获键盘事件，上下左右以及wsad。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keydown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> key<span class=\\\"token operator\\\">=</span>e<span class=\\\"token punctuation\\\">.</span>which<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//col 的值为12，上下移动要12个div为一个周期</span>\\n        <span class=\\\"token comment\\\">//方向键上或者w</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">87</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">38</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span>col<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//判断移动函数</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键下或者s</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">83</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span>col<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键左或者a</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">37</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键右或者d</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">68</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">39</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>win<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//按键之后调判断是否过关</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br></div></div><ol start=\\\"2\\\"><li>判断是否可以移动。</li></ol> <p>分为两个判断条件：一个是推箱子，一个是不推箱子 自然移动，否则不移动皮卡丘。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span>step<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//是否移动判断</span>\\n        <span class=\\\"token comment\\\">// 分为两个判断条件一个是推箱子，一个是不推箱子 自然移动。 否则不移动皮卡丘</span>\\n        <span class=\\\"token comment\\\">//step 上下是12个div一个周期，左右是1个div positin是皮卡丘的原来位置</span>\\n    <span class=\\\"token keyword\\\">var</span> pikaqiu1<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//皮卡丘现在的地方</span>\\n    <span class=\\\"token keyword\\\">var</span> pikaqiu2<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//皮卡丘要去的下一个地方</span>\\n    <span class=\\\"token keyword\\\">var</span> pushBox<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//箱子要去的下一个地方</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span> pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">||</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//自然移动</span>\\n        <span class=\\\"token comment\\\">//判断：如果下一个div的class不包含type4(箱子)，并且 下一个div含有type1(目标位置)，或者type2(普通路径)</span>\\n        <span class=\\\"token comment\\\">//这一步和下一步判断是否有type4的原因是普通路径会变成有type4的路径，这时候就会出现问题</span>\\n        pikaqiu1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//移除当前皮卡丘</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移动皮卡丘到下一个位置</span>\\n        position<span class=\\\"token operator\\\">=</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//增加position值</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span>pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">||</span> pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//推箱子    </span>\\n        <span class=\\\"token comment\\\">//如果下一个div的class包含type4(箱子)并且 不包含重叠type4(箱子) 并且 包含class type1（目标位置）或者 包含type2(空路)</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移除当前箱子</span>\\n        pikaqiu1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移除当前皮卡丘</span>\\n        pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移动箱子到下一个位置</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;type2&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//</span>\\n        <span class=\\\"token comment\\\">//本来是type4 移除之后，这里没有class了，要变成普通路径</span>\\n        position<span class=\\\"token operator\\\">=</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//增加position值 </span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><h3 id=\\\"_3-胜利判断：\\\"><a href=\\\"#_3-胜利判断：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.胜利判断：</h3> <p>每次移动都要调用这个胜利判断。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">win</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//胜利条件判断</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;.type1.type4&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span>goal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//推的箱子与关卡设置通过箱子的数量对比</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>level<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;666，挑战下一关吧--OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            level<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//关卡+1</span>\\n            goal <span class=\\\"token operator\\\">=</span> goalList<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            position <span class=\\\"token operator\\\">=</span> origin<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;厉害啊 大佬 通关了都&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div>\"),_vm._ssrNode(\"<h3 id=\\\"代码地址、demo地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址、demo地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>以上2018.1.7</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/amateur/推箱子.md?vue&type=template&id=7a749353&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/amateur/推箱子.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1bd2f152\"\n  \n)\n\ncomponent.options.__file = \"推箱子.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=23.server-bundle.js.map",
    "24.server-bundle.js": "exports.ids = [24];\nexports.modules = {\n\n/***/ 171:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/input的一些坑点分享.md?vue&type=template&id=f99d5964&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"input-的一些坑点分享\\\"><a href=\\\"#input-的一些坑点分享\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> input 的一些坑点分享</h2> <h2 id=\\\"本文内容包括：\\\"><a href=\\\"#本文内容包括：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 本文内容包括：</h2> <ol><li>移动端底部 input 被弹出的键盘遮挡。</li> <li>控制 input 显/隐密码。</li> <li>在 input 中输入 emoji 表情导致请求失败。</li> <li>input 多行输入显示换行。</li> <li>输入框首尾清除空格-trim()</li> <li>在 input 中监听键盘事件</li></ol> <hr> <h3 id=\\\"移动端底部-input-被弹出的键盘遮挡\\\"><a href=\\\"#移动端底部-input-被弹出的键盘遮挡\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 移动端底部 input 被弹出的键盘遮挡</h3> <p>input 输入框是通过<code>position:fixed</code>一直放在页面底部，当点击 input 进行输入的时候，就会出现如下图片情况（有的机型会遮挡一些）。</p> <p>当时这个问题是去年在 ios 中遇到的，在最新版的 ios 系统中，貌似解决了这个 bug，但是为了向下兼容以及防止其他其他机型也出现这个问题，大家可以稍微记一下这个解决方法。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/16353072dcc21218?w=586&h=1038&f=jpeg&s=48097\\\" alt></p> <p>在解决这个问题的时候，有试过下面这种方法:</p> <p><s>在 input 的 focus 事件中，开启一个定时器，然后每隔 300 毫秒进行一次 document.body.scrollTop=document.body.scrollHeight 的调整，运行 3 次即可。</s></p> <p>当时还以为解决了，但是当你底部评论区还有很多内容，你每次点击 input，想要输入的时候，整个页面通过<code>scrollTop</code>就会不断的向下滚动，这个体验不用说自己也知道是相当失败的，然后就再去找解决方法，结果就有了下面这个。</p> <h4 id=\\\"element-scrollintoview\\\"><a href=\\\"#element-scrollintoview\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Element.scrollIntoView()</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Element.scrollIntoView()\"),_c('OutboundLink')],2),_vm._ssrNode(\":方法<strong>让当前的元素滚动到浏览器窗口的可视区域内</strong>。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#inputId'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">scrollIntoView</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这个 api 还可以设置对齐方法，选择将 input 放在屏幕的上方/下方，类似的 api 还有:\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Element.scrollIntoViewIfNeeded()\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这两个是解决同一个问题的，选择一个用就可以了。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"控制-input-显-隐密码\\\"><a href=\\\"#控制-input-显-隐密码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 控制 input 显/隐密码</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这个就很简单了，只需更改 input 的 type 属性值就可以了。可以看一下 codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/VxxgyG\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//点击函数，获取dom，判断更改属性。</span>\\n<span class=\\\"token function\\\">show</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> input<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;inputId&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">==</span><span class=\\\"token string\\\">&quot;password&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'password'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><hr> <h3 id=\\\"在-input-中输入-emoji-表情导致请求失败\\\"><a href=\\\"#在-input-中输入-emoji-表情导致请求失败\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在 input 中输入 emoji 表情导致请求失败</h3> <p>现在用户输入 emoji 简直已经成为了习惯，如果前后端没有对 emoji 表情进行处理，那么用户在上传的时候，就会请求失败。</p> <p><strong>通常这个问题是后端那边处理比较合适的</strong>，前端是做不了这件事的，或者说很难做这件事。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"之前看过一篇\"),_vm._ssrNode(\"<a href=\\\"https://www.bbsmax.com/A/nAJvkxjY5r/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这个文章里面讲了怎么在上传和拿数据下来的时候不会报错，但是不能在显示的时候转换为表情。\")],2),_vm._ssrNode(\" <p>ps:之前拿微信用户名的时候，有些人可能在微信昵称上面就会包含表情，<strong>如果后端没对表情处理转换，那么普通请求也会出错</strong>。</p> <p>之所以说这个，当表单请求错误的时候各位如果实在找不到问题可以往这方面考虑一下，我真的被坑过的 o(╥﹏╥)o。</p> <hr> <h3 id=\\\"textarea-多行回车换行，显示的时候换行设置：\\\"><a href=\\\"#textarea-多行回车换行，显示的时候换行设置：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> textarea 多行回车换行，显示的时候换行设置：</h3> <p>在使用<code>textarea</code>标签输入多行文本的时候，如果没有对多行文本显示处理，会导致没有换行的情况,就比如下面这种情况，用户在<code>textarea</code>是有换行的。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/1635388bf4dca899?w=420&h=531&f=jpeg&s=223202\\\" alt></p> \"),_vm._ssrNode(\"<h4 id=\\\"css-属性-white-space\\\">\",\"</h4>\",[_vm._ssrNode(\"<a href=\\\"#css-属性-white-space\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Css 属性:\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"white-space\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>white-space 属性用于设置如何处理元素内的空白，其中包括空白符和换行符。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/16353927aec80539?w=613&h=240&f=jpeg&s=103831\\\" alt></p> <p>只要在<strong>显示内容的地方将该属性设置为<code>white-space: pre-line</code>或者<code>white-space:pre-wrap</code>，多行文本就可以换行了</strong>。</p> <h4 id=\\\"设置之后，显示效果：\\\"><a href=\\\"#设置之后，显示效果：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置之后，显示效果：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/14/1635d9d75136f6d8?w=419&h=506&f=png&s=128663\\\" alt></p> <hr> <h3 id=\\\"输入框首尾清除空格-trim\\\"><a href=\\\"#输入框首尾清除空格-trim\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输入框首尾清除空格-trim()</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"输入框清除首尾空格是 input 较为常见的需求，通常在上传的时候将首尾空格去除掉。一般使用:字符串的原生方法\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"trim()\"),_c('OutboundLink')],2),_vm._ssrNode(\" 从一个字符串的两端删除空白字符。\")],2),_vm._ssrNode(\" <p>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p> <h4 id=\\\"原生清除方法\\\"><a href=\\\"#原生清除方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原生清除方法:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//原生方法获取值，清除首尾空格上传str2</span>\\n<span class=\\\"token keyword\\\">let</span> str2 <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputId'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"vue-清除方法：\\\"><a href=\\\"#vue-清除方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 清除方法：</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Vue 提供了\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/forms.html#trim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"修饰符\"),_c('OutboundLink')],2),_vm._ssrNode(\"删除首尾空格， 加了修饰符<code>.trim</code>会自动过滤用户输入的首尾空白字符\")],2),_vm._ssrNode(\" <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">v-model.trim</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>msg<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>貌似 angular 也提供了类似过滤的方法，感兴趣的可以自己去查一下。</p> <hr> <h3 id=\\\"在-input-中监听键盘事件\\\"><a href=\\\"#在-input-中监听键盘事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在 input 中监听键盘事件</h3> <p>在用户登录或者搜索框的时候，一般都会监听键盘事件绑定回车按键，来执行登录/搜索 等操作。</p> <h4 id=\\\"原生绑定\\\"><a href=\\\"#原生绑定\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原生绑定:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>input onkeydown<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;keydownMsg(event)&quot;</span> type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;text&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">keydownMsg</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  keyCode <span class=\\\"token operator\\\">=</span> key<span class=\\\"token punctuation\\\">.</span>keyCode<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取按键代码</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keyCode <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//判断按下的是否为回车键</span>\\n    <span class=\\\"token comment\\\">// 在input上监听到回车 do something</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h4 id=\\\"vue-按键修饰符\\\"><a href=\\\"#vue-按键修饰符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 按键修饰符</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Vue 为监听键盘事件，提供了\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"按键修饰符\"),_c('OutboundLink')],2),_vm._ssrNode(\"，并且为常用的按键提供了别名，使用方法如下:当回车按键在 input 中被按下的时候，会触发里面的函数。\")],2),_vm._ssrNode(\" <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">@keyup.enter</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>enterActive<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/input的一些坑点分享.md?vue&type=template&id=f99d5964&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/input的一些坑点分享.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ac6784d\"\n  \n)\n\ncomponent.options.__file = \"input的一些坑点分享.md\"\n/* harmony default export */ var input_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=24.server-bundle.js.map",
    "25.server-bundle.js": "exports.ids = [25];\nexports.modules = {\n\n/***/ 170:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/判断用户浏览器.md?vue&type=template&id=712216be&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"判断用户浏览器\\\"><a href=\\\"#判断用户浏览器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断用户浏览器</h1> <h3 id=\\\"navigator-useragent\\\"><a href=\\\"#navigator-useragent\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> navigator.userAgent</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"判断用户所使用的浏览器主要用到的 api 是\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/htmldom/prop_nav_useragent.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"navigator.userAgent\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值，<strong>不同浏览器的<code>userAgent</code>值都不相同，所以我们可以根据这个字符串来判断用户是从哪个浏览器进入</strong>。\")],2),_vm._ssrNode(\" <h3 id=\\\"判断方式：\\\"><a href=\\\"#判断方式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断方式：</h3> <p>下面两个是刚做的 demo 获取的值，仔细观察下面两个字符串，会发现有些值是不一样的，并且浏览器特有的，依据这个我们就可以作为不同浏览器的判断条件。</p> <h4 id=\\\"qq-内置浏览器的-useragent-值：\\\"><a href=\\\"#qq-内置浏览器的-useragent-值：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> QQ 内置浏览器的 userAgent 值：</h4> <p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 qq/7.5.8.422 v1_iph_sq_7.5.8_1_app_a pixel/1080 core/uiwebview device/apple(iphone 8plus) nettype/wifi qbwebviewtype/1</p> <h4 id=\\\"微信内置浏览器的-useragent-值：\\\"><a href=\\\"#微信内置浏览器的-useragent-值：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 微信内置浏览器的 userAgent 值：</h4> <p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 micromessenger/6.6.6 nettype/wifi language/zh_cn</p> <h3 id=\\\"示例-判断qq和微信内置浏览器\\\"><a href=\\\"#示例-判断qq和微信内置浏览器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 示例:判断QQ和微信内置浏览器</h3> <p>使用方式，直接使用这个 api 读取值，然后<strong>根据事先观察<code>userAgent</code>字符串的不同之处</strong>来判断：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> url <span class=\\\"token operator\\\">=</span> navigator<span class=\\\"token punctuation\\\">.</span>userAgent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//使用toLowerCase将字符串全部转为小写 方便我们判断使用</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'15b202 qq'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//单独判断QQ内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'QQ APP 内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'micromessenger'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//单独判断微信内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'微信内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'15b202'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//判断微信内置浏览器，QQ内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'QQ和微信内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>上面判断了微信和 QQ 的内置浏览器，如果有更多不同的需求的话，可以按照上面的方式，先获取<code>userAgent</code>的字符串，然后再根据观察，使用<code>indexOf</code>判断是否含有指定的字符，来对不同浏览器进行不同的操作。</p> <p>以上2018.5.5</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/判断用户浏览器.md?vue&type=template&id=712216be&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/判断用户浏览器.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"501c5c84\"\n  \n)\n\ncomponent.options.__file = \"判断用户浏览器.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=25.server-bundle.js.map",
    "26.server-bundle.js": "exports.ids = [26];\nexports.modules = {\n\n/***/ 146:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/前端弹幕效果实现思路.md?vue&type=template&id=29fa64fb&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端弹幕效果实现思路\\\"><a href=\\\"#前端弹幕效果实现思路\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端弹幕效果实现思路</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这是几个月前写的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5ae56927f265da0b7e0c0968\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"，文章下面有很多精彩的讨论，或许能给你一点启发\")],2),_vm._ssrNode(\" <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">更好的方式</p> <p>可以利用<code>canvas</code>或者 CSS 动画来实现弹幕需求，不过文章中的思路，可以参考一下。</p></div> <hr> <h2 id=\\\"实现效果：\\\"><a href=\\\"#实现效果：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现效果：</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/29/1631066f5f7cbcd4?w=415&h=234&f=png&s=109831\\\" alt></p> <h2 id=\\\"实现原理：\\\"><a href=\\\"#实现原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现原理：</h2> <p>实现弹幕的原理，并不算太复杂，耗费一些时间，怼一怼应该都可以做出来。</p> <ol><li>获取弹幕数据。</li> <li>将弹幕设置为四个通道，每个通道最多只能出现两条弹幕。</li> <li>使用<code>setInterval</code>动态设置<code>dom</code>的<code>left</code>属性。</li> <li>使用 dom 的<code>offsetWidth</code>和屏幕的宽度判断元素是否滚动超出屏幕，然后移除 dom。</li></ol> <hr> <h2 id=\\\"实现步骤：\\\"><a href=\\\"#实现步骤：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现步骤：</h2> <h3 id=\\\"_1-首先看一下html的结构。\\\"><a href=\\\"#_1-首先看一下html的结构。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 首先看一下<code>html</code>的结构。</h3> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>detailImg<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>url<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">/&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageDiv<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer2<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer3<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer4<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!--detailImg 设置relative， barrageDiv设置z-index在图片上面，以及图片的位置--&gt;</span>\\n<span class=\\\"token comment\\\">&lt;!-- barrageLayer1~4 主要设置了一个top属性让四个div在各自的水平线上，形成四个通道--&gt;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>关于这里的 css 样式，关键点都在上面说了，就注意一下上面通道是怎样形成的，就可以了。具体的样式也就不贴出来了，就根据各自的需求来吧。</p> <h3 id=\\\"_2-获取弹幕所需要的数据。\\\"><a href=\\\"#_2-获取弹幕所需要的数据。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2.获取弹幕所需要的数据。</h3> <p>要实现弹幕效果肯定需要有数据，这里就是发请求了。</p> <p>获取数据时，<strong>要考虑数据量，一次不可能全部都获取</strong>，可以一次获取一部分，当数据要加载完的时候，再次请求数据。</p> <p>这里要<strong>记录数据数据是否全部请求完成</strong>，如果请求完成，就可以不再发送数据，直接用之前获取的全部数据就可以了。</p> <h3 id=\\\"_3-执行弹幕的函数。\\\"><a href=\\\"#_3-执行弹幕的函数。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.执行弹幕的函数。</h3> <p>弹幕数据获取后，就执行弹幕运行的函数，因为我在写弹幕函数的时候，设置了很多数据状态，这里就大概讲一下实现思路和关键部分代码。</p> <h4 id=\\\"弹幕函数包括的功能：\\\"><a href=\\\"#弹幕函数包括的功能：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 弹幕函数包括的功能：</h4> <ol><li>定时获取数据(判断数据是否加载完毕)</li> <li>定时发射弹幕(判断通道是否闲置),传入弹幕所需要的内容，用户头像等。</li> <li>创建 dom 内容，根据传参生成弹幕 div，设置 style 属性，根据控制弹幕数据数组的下标将 div 插入对应的 dom 中。</li> <li>采用定时器移动 dom，这里是根据内容长度定义弹幕的移动速度。</li> <li>移动弹幕的过程中判断四个通道是否处于闲置状态，当 dom 移动出了屏幕，移动 dom 并且清除定时器。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">barrage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//第一部分先判断数据是否加载完成 这里是一个定时器，设置为15秒。</span>\\n    <span class=\\\"token comment\\\">//如果数据还未加载完毕，就再次运行请求数据的接口，请求的页数可以 数组/每次请求的条数+1</span>\\n    <span class=\\\"token comment\\\">//数据加载完毕就清除定时器。（我将定时器都保存在vue 组件的data里面） 清除的时候clearInterval(this.data);</span>\\n\\n    <span class=\\\"token comment\\\">//定时发射</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>divStatus<span class=\\\"token punctuation\\\">.</span>intervalid<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span> selfTime<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">selfTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">&gt;=</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//当dataNum大于等于数组的数量时，弹幕从头再来一遍</span>\\n            _this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//设置四个通道的变量，当这几个变量为false的时候，才可发射</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">===</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//这里只演示其中一个变量</span>\\n        divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">barrageOut</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">[</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">,</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">[</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>commentator<span class=\\\"token punctuation\\\">.</span>headImgUrl<span class=\\\"token punctuation\\\">,</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 创建弹幕内容，自定义弹幕移动速度</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">barrageOut</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">,</span>imgUrl<span class=\\\"token punctuation\\\">,</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//text：弹幕的内容,imgUrl:用户的头像,num:数组的第几个</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">4</span><span class=\\\"token operator\\\">==</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//根据数组下标 创建对应通道的节点 这里也演示其中一个</span>\\n        barrageLayer<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'barrageLayer1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 创建dom内容 定义dom style样式</span>\\n    <span class=\\\"token keyword\\\">let</span> divBox <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> divBoxImg<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> divBoxText<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'class'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'barrageDivClass'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxText<span class=\\\"token punctuation\\\">.</span>innerHTML<span class=\\\"token operator\\\">=</span>text<span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBoxImg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxImg<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'class'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'barrageDivClass_img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxImg<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>backgroundImage<span class=\\\"token operator\\\">=</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`url(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>imgUrl<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBoxText<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">2000</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 初始化left位置,一开始在屏幕的右侧</span>\\n    barrageLayer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBox<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 定时器移动dom，形成弹幕</span>\\n    <span class=\\\"token keyword\\\">let</span> time<span class=\\\"token punctuation\\\">,</span>l<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    time<span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 这里可以根据需求自定义弹幕加载的速度</span>\\n        l<span class=\\\"token operator\\\">=</span>l<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        l<span class=\\\"token operator\\\">=</span>l<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token comment\\\">//通过减少left属性移动这个div 从右往左移动</span>\\n        divBox<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token operator\\\">+</span>l<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">delDiv</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">4</span><span class=\\\"token operator\\\">==</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//在移动弹幕的过程中判断四个通道是否处于闲置状态 这里只演示其中一个</span>\\n                barrageLayer<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'barrageLayer1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>barrageLayer<span class=\\\"token punctuation\\\">.</span>childNodes<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//判断弹幕数量，如果小于2，设为false，上面的定时器可以继续发射弹幕</span>\\n                divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n                divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> l <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">-</span>divBox<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">120</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>divStatus<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">switch</span><span class=\\\"token operator\\\">==</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//弹幕开关</span>\\n            <span class=\\\"token function\\\">delDiv</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">-</span>divBox<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token operator\\\">-</span>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">//不断减少left属性，当小于这个内容的宽度,并且滚了120的时候</span>\\n                barrageLayer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>divBox<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//移除dom</span>\\n                <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清除这个div的定时器</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清除这个div的定时器</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br><span class=\\\"line-number\\\">41</span><br><span class=\\\"line-number\\\">42</span><br><span class=\\\"line-number\\\">43</span><br><span class=\\\"line-number\\\">44</span><br><span class=\\\"line-number\\\">45</span><br><span class=\\\"line-number\\\">46</span><br><span class=\\\"line-number\\\">47</span><br><span class=\\\"line-number\\\">48</span><br><span class=\\\"line-number\\\">49</span><br><span class=\\\"line-number\\\">50</span><br><span class=\\\"line-number\\\">51</span><br><span class=\\\"line-number\\\">52</span><br><span class=\\\"line-number\\\">53</span><br><span class=\\\"line-number\\\">54</span><br><span class=\\\"line-number\\\">55</span><br><span class=\\\"line-number\\\">56</span><br><span class=\\\"line-number\\\">57</span><br><span class=\\\"line-number\\\">58</span><br><span class=\\\"line-number\\\">59</span><br><span class=\\\"line-number\\\">60</span><br><span class=\\\"line-number\\\">61</span><br><span class=\\\"line-number\\\">62</span><br><span class=\\\"line-number\\\">63</span><br><span class=\\\"line-number\\\">64</span><br><span class=\\\"line-number\\\">65</span><br><span class=\\\"line-number\\\">66</span><br><span class=\\\"line-number\\\">67</span><br><span class=\\\"line-number\\\">68</span><br><span class=\\\"line-number\\\">69</span><br><span class=\\\"line-number\\\">70</span><br><span class=\\\"line-number\\\">71</span><br><span class=\\\"line-number\\\">72</span><br><span class=\\\"line-number\\\">73</span><br><span class=\\\"line-number\\\">74</span><br><span class=\\\"line-number\\\">75</span><br><span class=\\\"line-number\\\">76</span><br><span class=\\\"line-number\\\">77</span><br><span class=\\\"line-number\\\">78</span><br><span class=\\\"line-number\\\">79</span><br><span class=\\\"line-number\\\">80</span><br><span class=\\\"line-number\\\">81</span><br><span class=\\\"line-number\\\">82</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/前端弹幕效果实现思路.md?vue&type=template&id=29fa64fb&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/前端弹幕效果实现思路.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"6014bd39\"\n  \n)\n\ncomponent.options.__file = \"前端弹幕效果实现思路.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=26.server-bundle.js.map",
    "27.server-bundle.js": "exports.ids = [27];\nexports.modules = {\n\n/***/ 168:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/复制粘贴系列.md?vue&type=template&id=8dbbadb0&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"复制粘贴系列\\\"><a href=\\\"#复制粘贴系列\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 复制粘贴系列</h1> <h2 id=\\\"api-介绍\\\"><a href=\\\"#api-介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> API 介绍:</h2> <h4 id=\\\"复制、剪切、粘贴事件：\\\"><a href=\\\"#复制、剪切、粘贴事件：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 复制、剪切、粘贴事件：</h4> <ol><li><code>copy</code> 发生复制操作时触发;</li> <li><code>cut</code> 发生剪切操作时触发;</li> <li><code>paste</code> 发生粘贴操作时触发;</li> <li>每个事件都有一个 before 事件对应：<code>beforecopy</code>、<code>beforecut</code>、<code>beforepaste</code>;</li></ol> <p>这几个 before 一般不怎么用，所以我们把注意力放在另外三个事件就可以了。</p> <p><strong>触发条件:</strong></p> <ol><li><p>鼠标右键菜单的<code>复制</code>、<code>粘贴</code>、<code>剪切</code>;</p></li> <li><p>使用了相应的键盘组合键，比如:<code>command+c</code>、<code>command+v</code>;</p> <p><strong>就算你是随便按的，也会触发事件</strong>。高程中介绍在<code>Chorme</code>、<code>Firefox</code>和<code>Safari</code>中，这几个 before 事件只会在真实会发生剪贴板事件的情况下触发，IE 上则可以触发 before。我实际测试的时候最新版<code>chorme</code>也会乱按也会触发，所以限制应该是在早一点的版本上。</p> <p>so 想说的是：before 这几个事件最好不要用,有关于剪切板的处理最好放在<code>copy</code>、<code>cut</code>、<code>paste</code>上面。</p></li></ol> <p><strong>使用姿势：</strong></p> <p>以 copy 为例:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 监听全局复制 做点什么</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 还有这种写法：</span>\\ndocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 监听全局复制 做点什么</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>上面是在<code>document.body</code>上全局监听的，然而很多人不知道的是，我们还可以为某些 dom 单独添加剪切板事件：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// html结构</span>\\n<span class=\\\"token operator\\\">&lt;</span>div id<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;test1&quot;</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token operator\\\">&lt;</span>div id<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;test2&quot;</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">// 写法一样：</span>\\n<span class=\\\"token keyword\\\">let</span> test1 <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#test1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ntest1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 监听test1发生的复制事件 做点什么</span>\\n    <span class=\\\"token comment\\\">// test1发生的复制事件会触发回调，其他地方不会触发回调</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>其他事件也是一样的，这里就不赘述了。</p> <h4 id=\\\"clipboarddata-对象-用于访问以及修改剪贴板中的数据\\\"><a href=\\\"#clipboarddata-对象-用于访问以及修改剪贴板中的数据\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> clipboardData 对象:用于访问以及修改剪贴板中的数据</h4> <p><strong>兼容：</strong></p> <p><strong>不同浏览器，所属的对象不同</strong>：在 IE 中这个对象是<code>window</code>对象的属性，在<code>Chrome</code>、<code>Safari</code>和<code>Firefox</code>中，这个对象是相应的<code>event</code>对象的属性。所以我们在使用的时候，需要做一下如下兼容:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> clipboardData <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>clipboardData <span class=\\\"token operator\\\">||</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 获取clipboardData对象 + do something</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>对象方法：</strong></p> <p>对象有三个方法: <code>getData()</code>、<code>setData()</code>、<code>clearData()</code></p> <ul><li><p><code>getData()</code> 访问剪切板中的数据</p> <p>参数： <code>getData()</code>接受一个<code>'text'</code>参数，即要取得的数据的格式。</p> <p><strong>在复制、剪切、粘贴触发的事件的数据：</strong></p> <p>实际上在 chorme 上测试只有<code>paste</code>粘贴的时候才能用<code>getData()</code>访问到数据，用法如下：</p> <p><strong>要粘贴的数据：</strong></p></li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onpaste</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> clipboardData <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>clipboardData <span class=\\\"token operator\\\">||</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 兼容处理</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'要粘贴的数据'</span><span class=\\\"token punctuation\\\">,</span> clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>被复制/剪切的数据：</strong></p> <p>在复制和剪切中的数据，需要通过<code>window.getSelection(0).toString()</code>来访问:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'被复制的数据:'</span><span class=\\\"token punctuation\\\">,</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSelection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ul><li><p><code>setData():</code> 修改剪切板中的数据</p> <p>参数：第一个参数也是<code>'text'</code>，第二个参数是要放在剪切板中的文本。</p> <p>剩下的留在下面仿知乎/掘金复制大段文本添加版权信息那里再说。</p></li> <li><p><code>clearData()</code> :</p> <p>这个方法就不太知道了，试了好久不知道怎么用(如果有大佬知道，可以在评论区指点一下)。</p> <p>如果只是为了禁止复制，或者禁止粘贴，在下面还有另外的方法可以做到，并且可以细粒化操作。</p></li></ul> <hr> <h2 id=\\\"应用\\\"><a href=\\\"#应用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用:</h2> <p>如果学习不是为了装 X，那么一切将毫无意义，来看这个东西可以在哪些场景使用：</p> <h3 id=\\\"实现类知乎-掘金复制大段文本添加版权信息\\\"><a href=\\\"#实现类知乎-掘金复制大段文本添加版权信息\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现类知乎/掘金复制大段文本添加版权信息:</h3> <p>实现很简单：取消默认复制之后，主要是在被复制的内容后面添加信息，然后根据 clipboardData 的 setData()方法将信息写入剪贴板。</p> <p>可以直接复制这段代码到本地去试试。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 掘金这里不是全局监听，应该只是监听文章的dom范围内。</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> event <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">preventDefault</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取消默认的复制事件</span>\\n  <span class=\\\"token keyword\\\">let</span> textFont<span class=\\\"token punctuation\\\">,</span>\\n    copyFont <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSelection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 被复制的文字 等下插入</span>\\n  <span class=\\\"token comment\\\">// 防知乎掘金 复制一两个字则不添加版权信息 超过一定长度的文字 就添加版权信息</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>copyFont<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    textFont <span class=\\\"token operator\\\">=</span>\\n      copyFont <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'作者：OBKoro1\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'来源：掘金\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    textFont <span class=\\\"token operator\\\">=</span> copyFont<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没超过十个字 则采用被复制的内容。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> event<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span> textFont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将信息写入粘贴板</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 兼容IE</span>\\n    <span class=\\\"token keyword\\\">return</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span> textFont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><p>然后 command+c、command+v，输出:</p> <pre><code>你复制的内容\\n作者：OBKoro1\\n链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\n来源：掘金\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\\n</code></pre> <h3 id=\\\"实现类起点网的防复制功能\\\"><a href=\\\"#实现类起点网的防复制功能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现类起点网的防复制功能:</h3> <ul><li>禁止复制+剪切</li> <li>禁止右键，右键某些选项:全选，复制，粘贴等。</li> <li>禁用文字选择，能选择却不能复制，体验很差。</li> <li>user-select 用 css 禁止选择文本。</li></ul> <p>可以把代码拷到本地玩一玩：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 禁止右键菜单</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncontextmenu</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'右键'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止文字选择。</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onselectstart</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'文字选择'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止复制</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 禁止剪切</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncut</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'cut'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止粘贴</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onpaste</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'paste'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// css 禁止文本选择 这样不会触发js</span>\\nbody <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>moz<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>webkit<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>ms<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br></div></div><p>PS：</p> <ul><li>使用<code>e.preventDefault()</code>也可以禁用，但建议使用<code>return false</code>这样就不用去访问<code>e</code>和<code>e</code>的方法了。</li> <li>示例中<code>document.body</code>全局都禁用了，也可以对 dom(某些区域)进行禁用。</li></ul> <p><strong>破解防复制</strong>：</p> <p>上面的防复制方法通过<code>js</code>+<code>css</code>实现的，所以<strong>思路就是</strong>：禁用<code>js</code>+取消<code>user-select</code>样式。</p> <p><code>Chrome</code>浏览器的话：打开浏览器控制台，按<code>F1</code>进入<code>Setting</code>，勾选<code>Disable JavaScript</code>(禁止 js)。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/8/16518cf40dd44b7c?w=1917&h=363&f=png&s=145894\\\" alt></p> <p>此时如果还不能复制的话，就要去找<code>user-select</code>样式,取消这个样式就可以了。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/8/16518d4625634931?w=861&h=305&f=png&s=195959\\\" alt></p> <p>所以那些盗版小说手打的，我真的不太能理解，Excuse me？？？</p> <h3 id=\\\"点击复制功能：\\\"><a href=\\\"#点击复制功能：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点击复制功能：</h3> <p><strong>不能使用 clipboardData：</strong></p> <p>在 IE 中可以用<code>window.clipboardData.setData('text','内容')</code>实现。</p> <p>上文提到过，在 IE 中<code>clipboardData</code>是<code>window</code>的属性。</p> <p>而其他浏览器则是相应的<code>event</code>对象的属性，这实际上是一种安全措施，防止未经授权的访问,为了兼容其他浏览器，所以我们不能通过<code>clipboardData</code>来实现这种操作。</p> <p><strong>具体做法：</strong></p> <ul><li><p>创建一个隐藏的<code>input</code>框</p></li> <li><p>点击的时候，将要复制的内容放进<code>input</code>框中</p></li> <li><p>选择文本内容<code>input.select()</code></p> <p>这里只能用<code>input</code>或者<code>textarea</code>才能选择文本。</p></li> <li><p>document.execCommand(&quot;copy&quot;)，执行浏览器的复制命令。</p></li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">copyText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> text <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerText<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取要复制的内容也可以传进来</span>\\n  <span class=\\\"token keyword\\\">var</span> input <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取隐藏input的dom</span>\\n  input<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修改文本框的内容</span>\\n  input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 选中文本</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execCommand</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行浏览器复制命令</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'复制成功'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/mjjEGa\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"点击复制内容\"),_c('OutboundLink')],2),_vm._ssrNode(\"的 demo 在这里，可以点进去看看。\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/复制粘贴系列.md?vue&type=template&id=8dbbadb0&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/复制粘贴系列.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"259af68e\"\n  \n)\n\ncomponent.options.__file = \"复制粘贴系列.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=27.server-bundle.js.map",
    "28.server-bundle.js": "exports.ids = [28];\nexports.modules = {\n\n/***/ 167:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/显示隐藏密码.md?vue&type=template&id=4436937c&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"显示隐藏密码\\\"><a href=\\\"#显示隐藏密码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 显示隐藏密码</h2> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fuwjt7sgiej30ku07xdg5.jpg\\\" alt></p> <p><strong>超简单，就是切换input框的type类型:</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isShow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> input <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;inputId&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// input的dom</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">&quot;password&quot;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 显示</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'password'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 隐藏</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"CodePen: \"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/VxxgyG\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/显示隐藏密码.md?vue&type=template&id=4436937c&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/显示隐藏密码.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"47887a99\"\n  \n)\n\ncomponent.options.__file = \"显示隐藏密码.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=28.server-bundle.js.map",
    "29.server-bundle.js": "exports.ids = [29];\nexports.modules = {\n\n/***/ 166:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/effect/正则表达式收集.md?vue&type=template&id=3ad8e3b8&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"常见正则表达式合集\\\"><a href=\\\"#常见正则表达式合集\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常见正则表达式合集</h2> <p>为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。</p> <h3 id=\\\"如何验证？\\\"><a href=\\\"#如何验证？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何验证？</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"验证的方式当然是很多了，这里推荐采用\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/js/jsref_test_regexp.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"test()\"),_c('OutboundLink')],2),_vm._ssrNode(\"方法来验证。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> RegExpObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// RegExpObject为正则 string是要检测的字符串</span>\\n<span class=\\\"token comment\\\">// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isTrue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//验证成功 do something</span>\\n<span class=\\\"token punctuation\\\">}</span>elseP<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//验证失败</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"身份证号码正则表达式：\\\"><a href=\\\"#身份证号码正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 身份证号码正则表达式：</h3> <p>第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//第二代身份证号码正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//第一代身份证正则表达式(15位)</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"手机号码正则表达式：\\\"><a href=\\\"#手机号码正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 手机号码正则表达式：</h3> <p>时间截止为：2018 年 1 月 11 日</p> <p>移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198</p> <p>联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186</p> <p>电信号段：133 149 153 173 174 177 180 181 189 199</p> <p>虚拟运营商：170</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"邮箱正则表达式：\\\"><a href=\\\"#邮箱正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 邮箱正则表达式：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^([A-Za-z0-9_\\\\-\\\\.\\\\u4e00-\\\\u9fa5])+\\\\@([A-Za-z0-9_\\\\-\\\\.])+\\\\.([A-Za-z]{2,8})$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"用户名正则\\\"><a href=\\\"#用户名正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用户名正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">////用户名正则，4到16位（字母，数字，下划线，减号）</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[a-zA-Z0-9_-]{4,16}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"密码正则\\\"><a href=\\\"#密码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 密码正则:</h3> <p>密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z</span><span class=\\\"token punctuation\\\">]</span>\\\\w<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">}</span>$<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^.*(?=.{6,})(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"qq-号码正则\\\"><a href=\\\"#qq-号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> QQ 号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9][0-9]{4,10}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"微信号码正则\\\"><a href=\\\"#微信号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 微信号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"特殊字符检测正则\\\"><a href=\\\"#特殊字符检测正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 特殊字符检测正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/[&quot;'&lt;&gt;%;)(&amp;+]+-!！@#$~/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"域名正则\\\"><a href=\\\"#域名正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 域名正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z0</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z0</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">62</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"车牌号码正则\\\"><a href=\\\"#车牌号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 车牌号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"包含中文正则\\\"><a href=\\\"#包含中文正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 包含中文正则:</h3> <pre><code>let isTrue = /[\\\\u4E00-\\\\u9FA5]/;\\n//这个可以用于验证用户的真实姓名。\\n</code></pre> <h3 id=\\\"护照正则\\\"><a href=\\\"#护照正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 护照正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(P\\\\d{7}|G\\\\d{7,8}|TH\\\\d{7,8}|S\\\\d{7,8}|A\\\\d{7,8}|L\\\\d{7,8}|\\\\d{9}|D\\\\d+|1[4,5]\\\\d{7})$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"固定电话正则：\\\"><a href=\\\"#固定电话正则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 固定电话正则：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span>\\\\<span class=\\\"token punctuation\\\">(</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span>\\\\<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">|</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">|</span>\\\\s<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">?</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"ip-地址正则\\\"><a href=\\\"#ip-地址正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> IP 地址正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"邮政编码正则\\\"><a href=\\\"#邮政编码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 邮政编码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span>\\\\d<span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"经纬度正则\\\"><a href=\\\"#经纬度正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 经纬度正则</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//经度正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(\\\\-|\\\\+)?(((\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})\\\\.\\\\d{0,6})|(\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})|180\\\\.0{0,6}|180)$/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//纬度正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(\\\\-|\\\\+)?([0-8]?\\\\d{1}\\\\.\\\\d{0,6}|90\\\\.0{0,6}|[0-8]?\\\\d{1}|90)$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"常用的正则表达式大概就是上面这些了，如果大家还有其他干货的话，欢迎关注我的\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"给我留言。\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/正则表达式收集.md?vue&type=template&id=3ad8e3b8&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/effect/正则表达式收集.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"b884fdb0\"\n  \n)\n\ncomponent.options.__file = \"正则表达式收集.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=29.server-bundle.js.map",
    "30.server-bundle.js": "exports.ids = [30];\nexports.modules = {\n\n/***/ 165:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/interviewQuestion/树状数组结构转化.md?vue&type=template&id=0867c438&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"树状数组结构转化\\\"><a href=\\\"#树状数组结构转化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 树状数组结构转化</h2> <h3 id=\\\"题目如下：\\\"><a href=\\\"#题目如下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目如下：</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/19/16551c0d51e4f348?w=1080&h=2314&f=jpeg&s=177311\\\" alt></p> <p>这道题是我朋友发给我的，之前一开始看的时候，觉得很简单，但仔细往下看的时候，眉头一皱发现事情并不简单。</p> <p>PS：这类题目之前也以不同形式出现过</p> <h3 id=\\\"传进去的数组：\\\"><a href=\\\"#传进去的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 传进去的数组：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> oldArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'工具'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'备忘录'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'中等'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'高等'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'成人教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div><h3 id=\\\"输出的数组：\\\"><a href=\\\"#输出的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输出的数组：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'工具'</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'备忘录'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>\\n            label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'中等'</span><span class=\\\"token punctuation\\\">,</span>\\n            children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n            label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'高等'</span><span class=\\\"token punctuation\\\">,</span>\\n            children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'成人教育'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br></div></div><h3 id=\\\"建议大家好好想想，争取能够自己解出来\\\"><a href=\\\"#建议大家好好想想，争取能够自己解出来\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 建议大家好好想想，争取能够自己解出来</h3> <h3 id=\\\"参考一下我的解题方法：\\\"><a href=\\\"#参考一下我的解题方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考一下我的解题方法：</h3> <ol><li><p>先算出层级嵌套数</p> <p>遍历数组，再遍历数组的元素，用<code>parseInt</code>拿到每一个值，将最大的值取出来，即为层级嵌套数。</p></li> <li><p>数组转成属性层级的对象。对象的属性是层级，值是数组，层级里面的值。</p> <p>1.去重操作(比如:<code>1_id</code>相等的话就不再重复添加)</p> <p>2.提取需要的信息，最终的值和相应父级的信息(之后组装数组的时候放到对应的地方，需要的信息)。</p> <p>最后输出的对象是这个样子</p></li></ol> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/19/165520ab3cf04040?w=1288&h=664&f=jpeg&s=122584\\\" alt></p> <ol start=\\\"3\\\"><li><p>将属性层级的对象转成树状结构数组。</p> <p>遍历对象，获取层级值。</p> <p>遍历层级的每个元素。</p> <p>找到对应的层级将值添加进去，否则递归继续找对应层级。</p></li></ol> <h3 id=\\\"通关秘籍\\\"><a href=\\\"#通关秘籍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通关秘籍</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这里有一份\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/simpleDemo/blob/b62f8ae98d345c287bea9b5622504fdbae626102/interviewQuestion/treeArr.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"通关秘籍\"),_c('OutboundLink')],2),_vm._ssrNode(\"，全宇宙最低价，998 卖给你。\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/interviewQuestion/树状数组结构转化.md?vue&type=template&id=0867c438&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/interviewQuestion/树状数组结构转化.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"595e06be\"\n  \n)\n\ncomponent.options.__file = \"树状数组结构转化.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=30.server-bundle.js.map",
    "31.server-bundle.js": "exports.ids = [31];\nexports.modules = {\n\n/***/ 164:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/template.md?vue&type=template&id=76845e75&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/template.md?vue&type=template&id=76845e75&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/template.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"08103f7a\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\n/* harmony default export */ var template = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=31.server-bundle.js.map",
    "32.server-bundle.js": "exports.ids = [32];\nexports.modules = {\n\n/***/ 163:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/tool/http缓存.md?vue&type=template&id=5b51daf4&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"谈论http缓存时我们在谈论什么\\\"><a href=\\\"#谈论http缓存时我们在谈论什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 谈论HTTP缓存时我们在谈论什么</h2> <p>在浏览器众多缓存中的HTTP缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的magic，但是对此背后的原因可能不甚了解...</p> <h3 id=\\\"当我们在谈论http缓存时我们在谈论什么\\\"><a href=\\\"#当我们在谈论http缓存时我们在谈论什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 当我们在谈论HTTP缓存时我们在谈论什么:</h3> <p>我们实际上是在谈论下面这两种情况:</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e32ac608a1146?w=1849&h=301&f=png&s=70428\\\" alt></p> <p>如上图，浏览器对静态资源的HTTP缓存有两种情况，一种是强缓存(本地缓存)，另一种是弱缓存(协商缓存)。</p> <hr> <h3 id=\\\"缓存流程：\\\"><a href=\\\"#缓存流程：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缓存流程：</h3> <h4 id=\\\"浏览器第一次请求资源时：\\\"><a href=\\\"#浏览器第一次请求资源时：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器第一次请求资源时：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e323d0879019f?w=686&h=382&f=png&s=25723\\\" alt=\\\"图片出自网络\\\"></p> <p>浏览器<strong>第一次请求资源时，必须下载所有的资源，然后根据响应的header内容来决定，如何缓存资源</strong>。可能采用的是强缓存，也可能是弱缓存</p> <h4 id=\\\"浏览器后续请求资源时的匹配流程：\\\"><a href=\\\"#浏览器后续请求资源时的匹配流程：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器后续请求资源时的匹配流程：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e33ba0484fb14?w=401&h=861&f=png&s=122643\\\" alt></p> <p>由上图可以知道当浏览器请求一个静态资源时的HTTP流程：</p> <ol><li>强缓存阶段：先在本地查找该资源，如果发现该资源，并且其他限制也没有问题(比如:缓存有效时间)，就命中强缓存，返回200，直接使用强缓存，并且不会发送请求到服务器</li> <li>弱缓存阶段：在本地缓存中找到该资源，发送一个http请求到服务器，服务器判断这个资源没有被改动过，则返回304，让浏览器使用该资源。</li> <li>缓存失败阶段(重新请求)：当服务器发现该资源被修改过，或者在本地没有找到该缓存资源，服务器则返回该资源的数据。</li></ol> <h3 id=\\\"强缓存与弱缓存的区别：\\\"><a href=\\\"#强缓存与弱缓存的区别：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存与弱缓存的区别：</h3> <p><strong>获取资源形式</strong>： 都是从缓存中获取资源的。</p> <p><strong>状态码</strong>： 强缓存返回200(from cache),弱缓存返回304状态码</p> <p><strong>请求(最大区别)</strong>：</p> <p>强缓存不发送请求，直接从缓存中取。</p> <p>弱缓存需要发送一个请求，验证这个文件是否可以使用（有没有被改动过）。</p> <hr> <h3 id=\\\"强缓存：\\\"><a href=\\\"#强缓存：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存：</h3> <p>强缓存是利用Expires或者Cache-Control，让原始服务器为文件设置一个过期时间，在多长时间内可以将这些内容视为最新的。</p> <p>若时间未过期，则命中强缓存，使用缓存文件不发送请求。</p> <h3 id=\\\"cache-control\\\"><a href=\\\"#cache-control\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Cache-Control</h3> <p>Cache-Control 是http1.1中为了弥补<code>Expires</code>的缺陷而加入的，当Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires。</p> <p><strong>选项</strong>：</p> <p>可缓存性:</p> <p><code>public</code>： 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。</p> <p><code>private</code>: 只有用户自己的浏览器能够进行缓存，公共的代理服务器不允许缓存。</p> <p><code>no-cache</code>:  强制浏览器在使用cache拷贝之前先<strong>提交一个http请求到源服务器进行确认</strong>。http请求没有减少，会减少一个响应体(文件内容),这种个选项类似弱缓存。</p> <p><code>only-if-cached</code>: 表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</p> <p>到期设置：</p> <p><code>max-age=60</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。 这里是60秒</p> <p>其他设置：</p> <p><code>no-store</code>: 告诉浏览器在任何情况下都不要进行cache，不在本地保留拷贝。</p> <p><code>must-revalidate</code>: 缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更多设置，移动\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 示例</span>\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span> no<span class=\\\"token operator\\\">-</span>cache<span class=\\\"token punctuation\\\">,</span> no<span class=\\\"token operator\\\">-</span>store<span class=\\\"token punctuation\\\">,</span> must<span class=\\\"token operator\\\">-</span>revalidate\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token operator\\\">-</span>age<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">31536000</span>\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span> max<span class=\\\"token operator\\\">-</span>age<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">3600</span><span class=\\\"token punctuation\\\">,</span> must<span class=\\\"token operator\\\">-</span>revalidate\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"http1-0时代的缓存-expires-pragma\\\"><a href=\\\"#http1-0时代的缓存-expires-pragma\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> http1.0时代的缓存 Expires+Pragma</h3> <p><strong>Expires用于设置缓存到期时间</strong>：</p> <p>指定缓存到期GMT的绝对时间，如果设了max-age，max-age就会覆盖expires，如果expires到期需要重新请求。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Expires<span class=\\\"token punctuation\\\">:</span>Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>有一个问题是由于使用具体时间，如果时间表示出错或者没有转换到正确的时区都可能造成缓存生命周期出错。</p> <p><strong>Pragma禁用缓存：</strong></p> <p><code>Pragma : no-cache</code> 表示防止客户端缓存，需要强制从服务器获取最新的数据；</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Pragma <span class=\\\"token punctuation\\\">:</span> no<span class=\\\"token operator\\\">-</span>cache  <span class=\\\"token comment\\\">//只有这一个用法 禁用缓存，强制从服务器获取最新的数据； </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"强缓存命中-from-memory-cache-from-disk-cache\\\"><a href=\\\"#强缓存命中-from-memory-cache-from-disk-cache\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存命中 from memory cache &amp; from disk cache</h3> <p>在测试的时候，看到命中强缓存时，有两种状态，200 (from memory cache) cache &amp; 200 (from disk cache)，于是去找了一下这两者的区别：</p> <p>memory cache: 将资源存到<strong>内存</strong>中，从内存中获取。</p> <p>disk cache：将资源缓存到<strong>磁盘</strong>中，从磁盘中获取。</p> <p>二者最大的区别在于：<strong>当退出进程时，内存中的数据会被清空，而磁盘的数据不会</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的介绍推荐这篇\"),_vm._ssrNode(\"<a href=\\\"https://blog.csdn.net/baidu_38742725/article/details/77181078\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h3 id=\\\"弱缓存：\\\"><a href=\\\"#弱缓存：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 弱缓存：</h3> <p>如果强缓存时间过期，或者没有设置，导致未命中的话。就进入到了弱缓存的阶段了，</p> <p><strong>Last-Modified &amp; if-modified-since:</strong></p> <p>Last-Modified与If-Modified-Since是一对报文头，属于http 1.0。</p> <p>last-modified是web服务器认为文件的最后修改时间，<code>last-modified</code>是第一次请求文件的时候，<strong>服务器返回</strong>的一个属性。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Last<span class=\\\"token operator\\\">-</span>Modified<span class=\\\"token punctuation\\\">:</span> Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>第二次请求这个文件时，浏览器把<code>If-Modified-Since</code><strong>发送给服务器</strong>，询问该时间之后文件是否被修改过。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>If<span class=\\\"token operator\\\">-</span>Modified<span class=\\\"token operator\\\">-</span>Since<span class=\\\"token punctuation\\\">:</span> Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span> <span class=\\\"token comment\\\">// 跟Last-Modified的值一样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><strong>ETag &amp; If-None-Match</strong></p> <p>ETag与If-None-Match是一对报文，属于http 1.1。</p> <p><strong>ETag是一个文件的唯一标志符</strong>。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。</p> <p>ETag机制类似于乐观锁机制，如果请求报文的ETag与服务器的不一致，则表示该资源已经被修改过来，需要发最新的内容给浏览器。</p> <p><code>ETag</code>也是首次请求的时候，服务器返回的:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>ETag<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;8F759D4F67D66A7244638AD249675BE2&quot;</span> <span class=\\\"token comment\\\">// 长这样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><code>If-None-Match</code>也是浏览器发送到服务器验证，文件是否改变的:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>If<span class=\\\"token operator\\\">-</span>None<span class=\\\"token operator\\\">-</span>Match<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;8F759D4F67D66A7244638AD249675BE2&quot;</span> <span class=\\\"token comment\\\">// 跟ETag的值一样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"etag-lastmodified过程如下\\\"><a href=\\\"#etag-lastmodified过程如下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <strong>Etag/lastModified过程如下:</strong></h3> <ol><li>客户端第一次向服务器发起请求,服务器将附加<code>Last-Modified/ETag</code>到所提供的资源上去</li> <li>当再一次请求资源,<strong>如果没有命中强缓存</strong>,在执行在验证时,<strong>将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器</strong>。</li> <li>服务器检查该Last-Modified或ETag，并判断出该资源<strong>页面自上次客户端请求之后还未被修改，返回响应304和一个空的响应体</strong>。</li></ol> <h3 id=\\\"同时使用两个报文头\\\"><a href=\\\"#同时使用两个报文头\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 同时使用两个报文头:</h3> <p>同时使用这两个报文头，<strong>两个都匹配才会命中弱缓存</strong>，否则将重新请求资源。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e3d5d5e2119a5?w=975&h=583&f=png&s=74354\\\" alt></p> <h3 id=\\\"etag-主要为了解决-last-modified-无法解决的一些问题：\\\"><a href=\\\"#etag-主要为了解决-last-modified-无法解决的一些问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Etag 主要为了解决 Last-Modified 无法解决的一些问题：</h3> <ol><li>一些文件也许内容并不改变(仅仅改变的修改时间)，这个时候我们不希望文件重新加载。（Etag值会触发缓存，Last-Modified不会触发）</li> <li>If-Modified-Since能检查到的粒度是秒级的，当修改非常频繁时，Last-Modified会触发缓存，而Etag的值不会触发，重新加载。</li> <li>某些服务器不能精确的得到文件的最后修改时间。</li></ol> <hr> <h3 id=\\\"用户操作行为与缓存\\\"><a href=\\\"#用户操作行为与缓存\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用户操作行为与缓存</h3> <p>F5刷新导致强缓存失效。</p> <p>ctrl+F5强制刷新页面强缓存，弱缓存都会失效。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e4019ed29d0ae?w=495&h=175&f=png&s=7693\\\" alt=\\\"图片出自网络\\\"></p> <h3 id=\\\"如何设置？\\\"><a href=\\\"#如何设置？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何设置？</h3> <p>一般是服务器端设置这些请求头的，我自己试了用阿里云服务器设置<code>Cache-Control</code>，设置一下很方便的。</p> <p>嗯，据说客户端也是可以设置强弱缓存，但是找了半天不知道怎么设置，如果有路过的大佬知道，可以指导一波^_^。</p> <h3 id=\\\"没有设置强缓存，返回200\\\"><a href=\\\"#没有设置强缓存，返回200\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 没有设置强缓存，返回200</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如下图这种情况，就不太懂怎么回事，下方的解释也没看明白，图片内容出自这篇\"),_vm._ssrNode(\"<a href=\\\"https://div.io/topic/854\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e40f9eb594c9e?w=827&h=813&f=png&s=153881\\\" alt></p> <hr> <h3 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h3> <p>ßß\\n通过网络重复请求资源既缓慢，成本又高，缓存和重用以前获取的资源的能力成为优化性能很关键的一个方面,也是大厂面试时很频繁出现的内容，掌握好这块知识点是非常重要的，希望本文能给你带来些收获。</p> <p>文章如有不正确的地方欢迎各位路过的大佬鞭策！喜欢的话，赶紧点波<s>订阅</s>关注/喜欢。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/http缓存.md?vue&type=template&id=5b51daf4&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/http缓存.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"64138289\"\n  \n)\n\ncomponent.options.__file = \"http缓存.md\"\n/* harmony default export */ var http_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=32.server-bundle.js.map",
    "33.server-bundle.js": "exports.ids = [33];\nexports.modules = {\n\n/***/ 162:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/tool/js事件循环机制.md?vue&type=template&id=00495c64&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"事件循环-event-loop-机制以及实例\\\"><a href=\\\"#事件循环-event-loop-机制以及实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件循环(Event Loop)机制以及实例</h2> <p>大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生...</p> <h3 id=\\\"为什么js是单线程？\\\"><a href=\\\"#为什么js是单线程？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么js是单线程？</h3> <p>js作为主要运行在浏览器的脚本语言，js主要用途之一是操作DOM。</p> <p>在js高程中举过一个栗子，如果js同时有两个线程，同时对同一个dom进行操作，这时浏览器应该听哪个线程的，如何判断优先级？</p> <p>为了避免这种问题，js必须是一门单线程语言，并且在未来这个特点也不会改变。</p> <h2 id=\\\"执行栈与任务队列\\\"><a href=\\\"#执行栈与任务队列\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行栈与任务队列</h2> <p>因为js是单线程语言，当遇到异步任务(如ajax操作等)时，不可能一直等待异步完成，再继续往下执行，在这期间浏览器是空闲状态，显而易见这会导致巨大的资源浪费。</p> <h3 id=\\\"执行栈\\\"><a href=\\\"#执行栈\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行栈</h3> <p>当执行某个函数、用户点击一次鼠标，Ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生时就会进入执行栈队列中，等待主线程读取,遵循先进先出原则。</p> <h3 id=\\\"主线程\\\"><a href=\\\"#主线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 主线程</h3> <p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个事件。</p> <p>主线程循环：即主线程会不停的从执行栈中读取事件，会执行完所有栈中的同步代码。</p> <p>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。</p> <p><strong>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务</strong>。如果有，那么主线程会依次执行那些任务队列中的回调函数。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"不太理解的话，可以运行一下下面的代码，或者点击一下这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/LrzqBd\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>结果是当a、b、c函数都执行完成之后，三个setTimeout才会依次执行。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">b</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数2'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">c</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数3'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">c</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 当a、b、c函数都执行完成之后，三个setTimeout才会依次执行</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br></div></div><hr> <h3 id=\\\"js-异步执行的运行机制。\\\"><a href=\\\"#js-异步执行的运行机制。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> js 异步执行的运行机制。</h3> <ol><li>所有任务都在主线程上执行，形成一个执行栈。</li> <li>主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</li> <li>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;。那些对应的异步任务，结束等待状态，进入执行栈并开始执行。</li> <li><strong>主线程不断重复上面的第三步</strong>。</li></ol> <hr> <h3 id=\\\"宏任务与微任务\\\"><a href=\\\"#宏任务与微任务\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 宏任务与微任务:</h3> <p>异步任务分为 宏任务（macrotask） 与 微任务 (microtask)，不同的API注册的任务会依次进入自身对应的队列中，然后等待 Event Loop 将它们依次压入执行栈中执行。</p> <p><strong>宏任务(macrotask)：</strong>：</p> <p>script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)</p> <p><strong>微任务(microtask)：</strong></p> <p>Promise、 MutaionObserver、process.nextTick(Node.js环境）</p> <h2 id=\\\"event-loop-事件循环-：\\\"><a href=\\\"#event-loop-事件循环-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Event Loop(事件循环)：</h2> <p>Event Loop(事件循环)中，每一次循环称为 tick, 每一次tick的任务如下：</p> <ul><li>执行栈选择最先进入队列的宏任务(通常是<code>script</code>整体代码)，如果有则执行</li> <li>检查是否存在 Microtask，如果存在则不停的执行，直至清空 microtask 队列</li> <li>更新render(每一次事件循环，浏览器都可能会去更新渲染)</li> <li>重复以上步骤</li></ul> <p>宏任务 &gt; 所有微任务 &gt; 宏任务，如下图所示：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/16/164081cfd8400f92\\\" alt></p> <p>从上图我们可以看出：</p> <ol><li>将所有任务看成两个队列：执行队列与事件队列。</li> <li>执行队列是同步的，事件队列是异步的，宏任务放入事件列表，微任务放入执行队列之后，事件队列之前。</li> <li>当执行完同步代码之后，就会执行位于执行列表之后的微任务，然后再执行事件列表中的宏任务</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"上面提到的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/LrzqBd\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"结果可以这么理解：先执行<code>script</code>宏任务，执行完了之后，再执行其他两个定时器宏任务。\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"面试题实践\\\"><a href=\\\"#面试题实践\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 面试题实践</h2> <p>下面这个题，很多人都应该看过/遇到过，重新来看会不会觉得清晰很多：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 执行顺序问题，考察频率挺高的，先自己想答案**</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span>reject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>根据本文的解析，我们可以得到:</p> <ol><li><p>先执行<code>script</code>同步代码</p> <pre><code> 先执行new Promise中的console.log(2),then后面的不执行属于微任务\\n 然后执行console.log(4)\\n</code></pre></li> <li><p>执行完<code>script</code>宏任务后，执行微任务，console.log(3)，没有其他微任务了。</p></li> <li><p>执行另一个宏任务，定时器，console.log(1)。</p></li></ol> <p>根据本文的内容，可以很轻松，且有理有据的<s>猜出</s>写出正确答案：2,4,3,1.</p> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>类似上文的面试题还有很多，实则都大同小异，只要掌握了事件循环的机制，这些问题都会变得很简单。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/js事件循环机制.md?vue&type=template&id=00495c64&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/js事件循环机制.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5e9a8d3e\"\n  \n)\n\ncomponent.options.__file = \"js事件循环机制.md\"\n/* harmony default export */ var js_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=33.server-bundle.js.map",
    "34.server-bundle.js": "exports.ids = [34];\nexports.modules = {\n\n/***/ 161:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/tool/js垃圾回收机制.md?vue&type=template&id=5c0aea84&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"js高程中的垃圾回收机制与常见内存泄露的解决方法\\\"><a href=\\\"#js高程中的垃圾回收机制与常见内存泄露的解决方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS高程中的垃圾回收机制与常见内存泄露的解决方法</h2> <p>起因是因为想了解闭包的内存泄露机制，然后想起《js高级程序设计》中有关于垃圾回收机制的解析，之前没有很懂，过一年回头再看就懂了，写篇博客与大家分享一下。</p> <h3 id=\\\"内存的生命周期：\\\"><a href=\\\"#内存的生命周期：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 内存的生命周期：</h3> <ol><li>分配你所需要的内存：</li></ol> <p>由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都会<strong>分配内存来存储那个实体</strong>。</p> <ol start=\\\"2\\\"><li><p>使用分配到的内存做点什么。</p></li> <li><p>不需要时将其释放回归：</p></li></ol> <p>在不需要字符串、对象的时候，需要释放其所占用的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃，这就是<strong>垃圾回收机制所存在的意义</strong>。</p> <p><strong>所谓的内存泄漏指的是</strong>：由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。</p> <hr> <h2 id=\\\"垃圾回收机制：\\\"><a href=\\\"#垃圾回收机制：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 垃圾回收机制：</h2> <p>在C和C++之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写js的过程中，内存的分配以及内存的回收完全实现了自动管理，我们不用操心这种事情。</p> <h3 id=\\\"垃圾收集机制的原理：\\\"><a href=\\\"#垃圾收集机制的原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 垃圾收集机制的原理：</h3> <p>垃圾收集器会按照固定的时间间隔，<strong>周期性的找出不再继续使用的变量，然后释放其占用的内存</strong>。</p> <p><strong>什么叫不再继续使用的变量？</strong></p> <p>不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p> <p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说<strong>全局变量不会被当成垃圾回收</strong>。</p> <h3 id=\\\"标记清除：当前采用的垃圾收集策略\\\"><a href=\\\"#标记清除：当前采用的垃圾收集策略\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标记清除：当前采用的垃圾收集策略</h3> <p>工作原理：</p> <p>当变量进入环境时(例如在函数中声明一个变量)，将这个变量标记为“进入环境”，当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。</p> <p>工作流程：</p> <ol><li>垃圾收集器会在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li> <li><strong>去掉环境中的变量</strong>以及被环境中的变量引用的变量的标记。</li> <li>那些<strong>还存在标记的变量被视为准备删除的变量</strong>。</li> <li>最后垃圾收集器会执行最后一步内存清除的工作，<strong>销毁那些带标记的值并回收它们所占用的内存空间</strong>。</li></ol> <p>到2008年为止,IE、Chorme、Fireofx、Safari、Opera <strong>都使用标记清除式的垃圾收集策略</strong>，只不过垃圾收集的时间间隔互有不同。</p> <h3 id=\\\"引用计数略：被废弃的垃圾收集策略\\\"><a href=\\\"#引用计数略：被废弃的垃圾收集策略\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 引用计数略：被废弃的垃圾收集策略</h3> <p>循环引用：跟踪记录每个值被引用的技术</p> <p>在老版本的浏览器中(对，又是IE)，IE9以下BOM和DOM对象就是使用C++以COM对象的形式实现的。</p> <p>COM的垃圾收集机制采用的就是引用计数策略，这种机制在出现循环引用的时候永远都释放不掉内存。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'something'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> myObject <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyObject<span class=\\\"token punctuation\\\">.</span>element <span class=\\\"token operator\\\">=</span> element<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// element属性指向dom</span>\\nelement<span class=\\\"token punctuation\\\">.</span>someThing <span class=\\\"token operator\\\">=</span> myObject<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// someThing回指myObject 出现循环引用(两个对象一直互相包含 一直存在计数)。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>解决方式是，当我们不使用它们的时候，手动切断链接：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myObject<span class=\\\"token punctuation\\\">.</span>element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span> \\nelement<span class=\\\"token punctuation\\\">.</span>someThing <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p><strong>淘汰</strong>：</p> <p>IE9把BOM和DOM对象转为了真正的js对象，避免了使用这种垃圾收集策略，消除了IE9以下常见的内存泄漏的主要原因。</p> <p>IE7以下有一个声明狼藉的性能问题，大家了解一下：</p> <ol><li>256个变量，4096个对象(或数组)字面或者64KB的字符串，达到任何一个临界值会触发垃圾收集器运行。</li> <li>如果一个js脚本的生命周期一直保有那么多变量，垃圾收集器会一直频繁的运行，引发严重的性能问题。</li></ol> <p>IE7已修复这个问题。</p> <hr> <h2 id=\\\"哪些情况会引起内存泄漏？\\\"><a href=\\\"#哪些情况会引起内存泄漏？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 哪些情况会引起内存泄漏？</h2> <p>虽然有垃圾回收机制，但我们在编写代码的时候，有些情况还是会造成内存泄漏，了解这些情况，并在编写程序的时候，注意避免，我们的程序会更具健壮性。</p> <h3 id=\\\"意外的全局变量：\\\"><a href=\\\"#意外的全局变量：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 意外的全局变量：</h3> <p>上文我们提到了<strong>全局变量不会被当成垃圾回收</strong>，我们在编码中有时会出现下面这种情况：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>bar2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'默认绑定this指向全局'</span> <span class=\\\"token comment\\\">// 全局变量=&gt; window.bar2</span>\\n    bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'全局变量'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没有声明变量 实际上是全局变量=&gt;window.bar</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当我们使用\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b3715def265da59af40a630#heading-3\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"默认绑定\"),_c('OutboundLink')],2),_vm._ssrNode(\"，this会指向全局，<code>this.something</code>也会创建一个全局变量，这一点可能很多人没有注意到。\")],2),_vm._ssrNode(\" <p><strong>解决方法：在函数内使用严格模式or细心一点</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">&quot;use strict&quot;</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>bar2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;严格模式下this指向undefined&quot;</span><span class=\\\"token punctuation\\\">;</span> \\n    bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;报错&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>当然我们也可以<strong>手动释放全局变量的内存</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span>bar <span class=\\\"token operator\\\">=</span> undefined\\n<span class=\\\"token keyword\\\">delete</span> window<span class=\\\"token punctuation\\\">.</span>bar2\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"被遗忘的定时器和回调函数\\\"><a href=\\\"#被遗忘的定时器和回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 被遗忘的定时器和回调函数</h3> <p>当<strong>不需要</strong><code>setInterval</code>或者<code>setTimeout</code>时，<strong>定时器没有被clear</strong>，定时器的<strong>回调函数以及内部依赖的变量都不能被回收</strong>，造成内存泄漏。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> someResource <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Node'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        node<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>someResource<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 定时器也没有清除</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// node、someResource 存储了大量数据 无法回收</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p><strong>解决方法</strong>： 在定时器完成工作的时候，手动清除定时器。</p> <h3 id=\\\"闭包：\\\"><a href=\\\"#闭包：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 闭包：</h3> <p><strong>闭包可以维持函数内局部变量，使其得不到释放，造成内存泄漏</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bindEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;XXX&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">unused</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'闭包内引用obj obj不会被释放'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// obj = null;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p><strong>解决方法</strong>：手动解除引用，<code>obj = null</code>。</p> <h3 id=\\\"循环引用问题\\\"><a href=\\\"#循环引用问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 循环引用问题</h3> <p>就是IE9以下的循环引用问题，上文讲过了。</p> <h3 id=\\\"没有清理dom元素引用：\\\"><a href=\\\"#没有清理dom元素引用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 没有清理DOM元素引用：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> refA <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'refA'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>refA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// dom删除了</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>refA<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;refA&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 但是还存在引用 能console出整个div 没有被回收</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"不信的话，可以看下这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/vroKbg\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"dom\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p><strong>解决办法</strong>：<code>refA = null</code>;</p> <h3 id=\\\"console保存大量数据在内存中。\\\"><a href=\\\"#console保存大量数据在内存中。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> console保存大量数据在内存中。</h3> <p>过多的console，比如定时器的console会导致浏览器卡死。</p> <p><strong>解决</strong>：合理利用console，线上项目尽量少的使用console，当然如果你要发招聘除外。</p> <hr> <h3 id=\\\"如何避免内存泄漏：\\\"><a href=\\\"#如何避免内存泄漏：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何避免内存泄漏：</h3> <p><strong>记住一个原则：不用的东西，及时归还，毕竟你是'借的'嘛</strong>。</p> <ol><li>减少不必要的全局变量，使用严格模式避免意外创建全局变量。</li> <li>在你使用完数据后，及时解除引用(闭包中的变量，dom引用，定时器清除)。</li> <li>组织好你的逻辑，避免死循环等造成浏览器卡顿，崩溃的问题。</li></ol> <h3 id=\\\"关于内存泄漏：\\\"><a href=\\\"#关于内存泄漏：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于内存泄漏：</h3> <ol><li>即使是1byte的内存，也叫内存泄漏，并不一定是导致浏览器崩溃、卡顿才能叫做内存泄漏。</li> <li>一般是堆区内存泄漏，栈区不会泄漏。</li></ol> <p>基本类型的值存在内存中，被保存在栈内存中，引用类型的值是对象，保存在堆内存中。所以<strong>对象、数组之类的，才会发生内存泄漏</strong>。</p> \"),_vm._ssrNode(\"<ol start=\\\"3\\\">\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"使用chorme监控内存泄漏，可以看一下这篇\"),_vm._ssrNode(\"<a href=\\\"https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>了解了内存泄漏的原因以及出现的情况，那么我们在编码过程中只要多加注意，就不会发生非常严重的内存泄漏问题。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/js垃圾回收机制.md?vue&type=template&id=5c0aea84&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/js垃圾回收机制.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"68e4e7c4\"\n  \n)\n\ncomponent.options.__file = \"js垃圾回收机制.md\"\n/* harmony default export */ var js_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=34.server-bundle.js.map",
    "35.server-bundle.js": "exports.ids = [35];\nexports.modules = {\n\n/***/ 160:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/accumulate/tool/忍者秘籍定时器机制.md?vue&type=template&id=17c2a9be&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"js忍者秘籍中的定时器机制详解\\\"><a href=\\\"#js忍者秘籍中的定时器机制详解\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS忍者秘籍中的定时器机制详解</h2> <p>前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <h3 id=\\\"准备\\\"><a href=\\\"#准备\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 准备</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"阅读本文之前，推荐先阅读\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b24b116e51d4558a65fdb70\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Js 的事件循环(Event Loop)机制以及实例讲解\"),_c('OutboundLink')],2),_vm._ssrNode(\"这篇文章来理解背后发生的事情，本文对事件循环机制不会很仔细的讲解。\")],2),_vm._ssrNode(\" <h3 id=\\\"定时器解决的问题：\\\"><a href=\\\"#定时器解决的问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 定时器解决的问题：</h3> <p>由于JS的单线程特性，定时器提供了一种跳出单线程限制的方法，即让一段代码在一定毫秒之后，再异步执行。</p> <h3 id=\\\"设置和清除定时器：\\\"><a href=\\\"#设置和清除定时器：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置和清除定时器：</h3> <p>直接引用忍者秘籍中的图片：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/17/1640c7f6e32c21c3?w=620&h=172&f=png&s=80063\\\" alt></p> <h3 id=\\\"注意：\\\"><a href=\\\"#注意：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注意：</h3> <ol><li>定时器的时间间隔设为0，也会有几毫秒的延迟。</li> <li>在使用<code>setTimeout</code>和<code>setInterval</code>的时候最好将其赋值给一个变量，以便取消定时器。</li> <li>在使用<code>Vue</code>的时候，<code>setTimeout</code>和<code>setInterval</code>的this指向的是window对象，访问不到组件数据以及方法。</li> <li>在使用<code>Vue</code>的时候，路由跳转并不会销毁<code>setInterval</code>，但是组件已经销毁了，这会导致问题。</li> <li>在执行线程中<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数的。</li> <li><code>setInterval</code>调用有可能会被废弃以及<code>setInterval</code>的连续执行</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"第三点和第四点的解决方法可以参考我之前写的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a587b46f265da3e3b7a7677#heading-4\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue 实践过程中的几个问题\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>接下来要讲的是第五点和第六点，这两点是最重要，也是本文要重点解析的内容。</p> <h2 id=\\\"执行线程中的定时器执行\\\"><a href=\\\"#执行线程中的定时器执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行线程中的定时器执行</h2> <p>下面来看忍者秘籍中的栗子：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/17/1640ca6240fb3eeb?w=654&h=384&f=png&s=103797\\\" alt></p> <p>让我们看看这里发生了什么事情：</p> <ol><li>首先在0毫秒的时候有一个持续18毫秒的js代码块要执行。</li> <li>然后在0毫秒的时候设了两个10毫秒延迟的定时器，<code>setTimeout</code>以及<code>setInterval</code>,<code>setTimeout</code>先设定。</li> <li>在第6毫秒的时候有一个发生了鼠标单击事件。</li></ol> <h3 id=\\\"事件排队。\\\"><a href=\\\"#事件排队。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件排队。</h3> <p>同时发生了这么多事情，由于js的单线程特性，<strong>当线程正在执行状态，有异步事件触发时，它就会排队，并且在线程空闲时才进行执行</strong>。</p> <pre><code>    这里的异步事件包括：鼠标单击，定时器触发，ajax请求、promise等事件。\\n</code></pre> <p>让我们回到栗子中：</p> <p>栗子中首先有一个18毫秒的代码块要执行，在这18毫秒中只能执行这段代码块，<strong>其他事件触发了之后只能排队等待执行</strong>。</p> <p>在代码块还在运行期间，第6毫秒的时候，发生了一个鼠标单击事件，以及第10毫秒时的<code>setTimeout</code>和<code>setInterval</code>两个处理程序，这三个事件不能立即执行，而是<strong>被添加到等待执行的队列</strong>中。</p> <h3 id=\\\"先进先出-先排队的先执行\\\"><a href=\\\"#先进先出-先排队的先执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先进先出(先排队的先执行)</h3> <p>18毫秒的时候代码块结束执行，有三个任务在排队等待执行，根据<strong>先进先出的原则，此时会先执行click事件</strong>，<code>setTimeout</code>和<code>setInterval</code>将继续排队等待执行。</p> <h3 id=\\\"setinterval调用被废弃\\\"><a href=\\\"#setinterval调用被废弃\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval调用被废弃</h3> <p>在click事件执行时，第20毫秒处，第二个<code>setInterval</code>也到期了，因为此时已经click事件占用了线程，所以<code>setInterval</code>还是不能被执行，并且因为此时<strong>队列中已经有一个<code>setInterval</code>正在排队等待执行，所以这一次的<code>setInterval</code>的调用将被废弃</strong>。</p> <p><strong>浏览器不会对同一个setInterval处理程序多次添加到待执行队列。</strong></p> <h3 id=\\\"settimeout-setinterval无法保证准时执行回调函数\\\"><a href=\\\"#settimeout-setinterval无法保证准时执行回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数</h3> <p>click事件在第28毫秒处结束执行，有两个任务(<code>setTimeout</code>和<code>setInterval</code>)正在等待执行，遵循先进先出的原则，<code>setTimeout</code>早于<code>setInterval</code>设定，所以先执行<code>setTimeout</code>。</p> <p>so:<strong>我们期望在第10毫秒处执行的<code>setTimeout</code>处理程序，最终会在第28毫秒处才开始执行</strong>，这就是上文提到的<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数。</p> <p>在30毫秒处，<code>setInterval</code>又触发了，因为队列中已经有<code>setInterval</code>在排队，所以这次的触发又作废了。</p> <h3 id=\\\"setinterval的连续执行\\\"><a href=\\\"#setinterval的连续执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval的连续执行</h3> <p><code>setTimeout</code>执行结束，在第36毫秒处，队列中的<code>setInterval</code>处理程序才开始执行，<code>setInterval</code>需要执行6毫秒。</p> <p>在第40毫秒的时候<code>setInterval</code>再次触发，因为此时<strong>上一个<code>setInterval</code>正在执行期间，队列中并没有<code>setInterval</code>在排队，这次触发的<code>setInterval</code>将进入队列等候</strong>。</p> <p>所以：<code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</p> <p>第42毫秒的时候，<strong>第一个<code>setInterval</code>结束，然后队列中的<code>setInterval</code>立即开始执行</strong>，在48毫秒的时候完成执行。然后50毫秒的时候再次触发<code>setInterval</code>，此时没有任务在排队，将会立即执行。</p> <h3 id=\\\"settimeout按照一定的间隔周期性的触发定时器。\\\"><a href=\\\"#settimeout按照一定的间隔周期性的触发定时器。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setTimeout按照一定的间隔周期性的触发定时器。</h3> <p>上文说了，<strong><code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</strong>。</p> <p>但是对这个问题，很多情况下，我们并不能清晰的把控处理程序所消耗的时长，为了我们能<strong>按照一定的间隔周期性的触发定时器</strong>，忍者秘籍中提供了下面这种使用方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 实际上我不止在忍者秘籍中见过，在很多地方都见过这种技术。</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">repeatMe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// do something</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>repeatMe<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token comment\\\">// 执行完处理程序的内容后，在末尾再间隔10毫秒来调用该程序，这样就能保证一定是10毫秒的周期调用</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><hr> <h3 id=\\\"忍者秘籍中关于定时器的其他知识：\\\"><a href=\\\"#忍者秘籍中关于定时器的其他知识：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 忍者秘籍中关于定时器的其他知识：</h3> <ul><li>定时器不能非常细粒化的控制执行的时间，书中建议在15ms以上。</li> <li>可以使用定时器来分解长时间运行的任务，这里可以自行谷歌。</li></ul> <h3 id=\\\"任务队列只有排队这么简单吗？\\\"><a href=\\\"#任务队列只有排队这么简单吗？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 任务队列只有排队这么简单吗？</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"事实上，关于任务队列并不是只有简单的排队而已，忍者秘籍中提到为了方便，使用了这个概念，如果希望能更清晰的了解背后的机制，再次推荐阅读一下：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b24b116e51d4558a65fdb70\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Js 的事件循环(Event Loop)机制以及实例讲解\"),_c('OutboundLink')],2),_vm._ssrNode(\"，\")],2),_vm._ssrNode(\" <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>这上面所有一切，都是由js单线程特性导致的，所以会有事件排队、先进先出、setInterval调用被废弃、定时器无法保证准时执行回调函数以及出现setInterval的连续执行，时刻记住这一特性，很多关于事件执行顺序的问题都能想的通，并且找出解决方法。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/忍者秘籍定时器机制.md?vue&type=template&id=17c2a9be&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/accumulate/tool/忍者秘籍定时器机制.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"710f87d9\"\n  \n)\n\ncomponent.options.__file = \"忍者秘籍定时器机制.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=35.server-bundle.js.map",
    "36.server-bundle.js": "exports.ids = [36];\nexports.modules = {\n\n/***/ 159:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/README.md?vue&type=template&id=13b98f18&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端算法\\\"><a href=\\\"#前端算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端算法</h2> <p>可以跟着本文档的栗子来慢慢学习一下算法，对于提高自身的编程和逻辑能力也是相当有效的一个途径。</p> <p>文档会将算法按照<strong>难度分级</strong>，代码中都有<strong>详细注释</strong>，且会提供<strong>多种解法</strong>。</p> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">TIP</p> <p>重要的是解题的思路，扩展我们的脑洞，不要拘泥于应试！</p></div> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果觉得本文档还不错的话，记得给个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"鼓励一下我吧~\")],2),_vm._ssrNode(\" <h2 id=\\\"前端积累\\\"><a href=\\\"#前端积累\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端积累</h2> <p>这个模块是我平时的一些积累，用以记录一些上手即用的东西/知识点等内容，范围较广。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_c('router-link',{attrs:{\"to\":\"/accumulate/\"}},[_vm._v(\"传送门\")])],1),_vm._ssrNode(\" <h3 id=\\\"公众号：\\\"><a href=\\\"#公众号：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 公众号：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>有新的文章，算法题，面试题等都会第一时间发布与公众号上。</p>\")],2)])],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/README.md?vue&type=template&id=13b98f18&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/README.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2850571c\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\n/* harmony default export */ var README = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=36.server-bundle.js.map",
    "37.server-bundle.js": "exports.ids = [37];\nexports.modules = {\n\n/***/ 158:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/induction/反转3位整数.md?vue&type=template&id=66dd365e&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"反转一个-3-位整数\\\"><a href=\\\"#反转一个-3-位整数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 反转一个 3 位整数</h1> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>反转一个只有 3 位数的整数</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>123 反转之后是 321。\\n900 反转之后是 9。</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li><code>009</code>这种形式需要转为<code>9</code></li> <li>最后输出的数字。</li></ul> <hr> <h3 id=\\\"转数组操作\\\"><a href=\\\"#转数组操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转数组操作:</h3> <p>这是最简单，最容易想到的答案：</p> <ol><li>数字转成字符串再转成数组</li> <li>颠倒数组(翻转了),恢复成字符串</li> <li>输出正常数字，这里用了+号。(用<code>parseInt</code>等也是可以的)</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"取余数，逐个颠倒\\\"><a href=\\\"#取余数，逐个颠倒\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 取余数，逐个颠倒</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">100</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">10</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>通过取余操作，个位转百位，十位转十位，百位转个位。</p> <p>比如：123=&gt;300+20+1,输出321</p> <h3 id=\\\"拼接字符串：\\\"><a href=\\\"#拼接字符串：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 拼接字符串：</h3> <ul><li>数字转字符串</li> <li>从后往前取对应位置字符,拼接成一个颠倒的字符串</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取对应位置字符，拼接成新的字符串</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/反转3位整数.md?vue&type=template&id=66dd365e&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/反转3位整数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2f16567d\"\n  \n)\n\ncomponent.options.__file = \"反转3位整数.md\"\n/* harmony default export */ var _3_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=37.server-bundle.js.map",
    "38.server-bundle.js": "exports.ids = [38];\nexports.modules = {\n\n/***/ 157:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/induction/数组重复次数.md?vue&type=template&id=39846e46&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"找出数组重复次数最多的元素\\\"><a href=\\\"#找出数组重复次数最多的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 找出数组重复次数最多的元素</h2> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个字符串数组, 每一个元素代表一个 IP 地址，找到出现频率最高的 IP。</p> <p>注：给定数据只有一个频率最高的 IP</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>lines <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'192.118.2.1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>说了一堆，其实就是找出数组重复次数最多的元素</p> <p>思路：</p> <p>用对象来处理，将元素赋值到属性上，判断之前有没有这个属性。</p> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">数组去重</p> <p>虽然对象属性同样可以用来做数组去重，但是会将 number,NaN,undefined,null，变为字符串形式，因为对象的属性名就是一个字符串</p></div> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param ipLines: ip  address\\n * @return: return highestFrequency ip address\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">highestFrequency</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>ipLines<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  ipLines<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 已经有值了 就把值+1</span>\\n      obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 判断重复次数有没有超过当前最高的</span>\\n        max <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 重复次数</span>\\n        name <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 当前元素</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 没有值 就初始化一个值</span>\\n      obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/数组重复次数.md?vue&type=template&id=39846e46&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/数组重复次数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"10bf9e4f\"\n  \n)\n\ncomponent.options.__file = \"数组重复次数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=38.server-bundle.js.map",
    "39.server-bundle.js": "exports.ids = [39];\nexports.modules = {\n\n/***/ 156:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/induction/查找斐波纳契数列中第N个数.md?vue&type=template&id=51cea600&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"查找斐波纳契数列中第-n-个数\\\"><a href=\\\"#查找斐波纳契数列中第-n-个数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 查找斐波纳契数列中第 N 个数</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p><strong>所谓的斐波纳契数列是指</strong>：</p> <p>前 2 个数是 0 和 1 。</p> <p>第 i 个数是第 i-1 个数和第 i-2 个数的和。</p> <p><strong>斐波纳契数列的前 10 个数字是</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">34</span> <span class=\\\"token operator\\\">...</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"怎样算解成功：\\\"><a href=\\\"#怎样算解成功：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 怎样算解成功：</h3> <p>给定 1，返回 0</p> <p>给定 2，返回 1</p> <p>给定 10，返回 34</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>值得注意的是：前两个数字可以算成是起始元素，从第三个元素才开始有规则。</p> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>递归解法：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'请输入大于0的整数数字'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">var</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">temp</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">||</span> n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 递归获取推算数组每一个元素的值</span>\\n    <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将数组恢复成 斐波纳契数列</span>\\n  <span class=\\\"token keyword\\\">return</span> num<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><ol start=\\\"2\\\"><li>遍历保存结果</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">,</span>\\n    d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    c <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n    a <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span>\\n    b <span class=\\\"token operator\\\">=</span> c<span class=\\\"token punctuation\\\">;</span>\\n    d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 加戏 恢复数列</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'斐波纳契数列'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><ol start=\\\"3\\\"><li>一次遍历 逐步推导所有元素 时间消耗:158ms 最优</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化数组，并设置初始值</span>\\n  num<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置第二个元素的值 推导第3个元素</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 遍历逐步推导元素值 数组完全符合数列不用进行判断等 运行效率最高。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> num<span class=\\\"token punctuation\\\">[</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组是从0开始计算 所以要减1</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>不行，我一定要秀一波，不然心里难受：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/5/1650894f0e88c323?w=3002&h=1766&f=jpeg&s=383340\\\" alt></p> <p>最后一题的提交，甩的第二名看不到我的车尾灯，开心！</p> <p>第一回刷算法题，以后要继续坚持！</p> \"),_vm._ssrNode(\"<h3 id=\\\"代码地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm/blob/master/codeSource/FibonacciSequence.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.5</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/查找斐波纳契数列中第N个数.md?vue&type=template&id=51cea600&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/查找斐波纳契数列中第N个数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3d022c93\"\n  \n)\n\ncomponent.options.__file = \"查找斐波纳契数列中第N个数.md\"\n/* harmony default export */ var _N_ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=39.server-bundle.js.map",
    "40.server-bundle.js": "exports.ids = [40];\nexports.modules = {\n\n/***/ 155:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/induction/水仙花数.md?vue&type=template&id=761ec4ef&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"水仙花数\\\"><a href=\\\"#水仙花数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 水仙花数</h2> <h3 id=\\\"水仙花数的定义：\\\"><a href=\\\"#水仙花数的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 水仙花数的定义：</h3> <p><strong>一个 N 位非负整数，其各位数字的 N 次方和等于该数本身</strong>。</p> <p>栗子：</p> <p>153 = 13^3 + 53^3 + 33^3</p> <p>370 = 3^3 + 7^3 + 0^3</p> <p>371 = 3^3 + 7^3 + 1^3</p> <p>1634 = 14^4 + 64^4 + 34^4 + 44^4。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的推荐：\"),_vm._ssrNode(\"<a href=\\\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"维基百科\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给出<code>n</code>，找到所有的<code>n</code>位十进制水仙花数。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>比如 <code>n = 1</code>, 所有水仙花数为：<code>[0,1,2,3,4,5,6,7,8,9]</code>。</p> <p>而对于 <code>n = 2</code>, 则没有 2 位的水仙花数，返回 <code>[]</code>。</p> <h3 id=\\\"题目分析\\\"><a href=\\\"#题目分析\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析:</h3> <p>弄懂水仙花数！</p> <hr> <h3 id=\\\"判断一个数是否为水仙花数：\\\"><a href=\\\"#判断一个数是否为水仙花数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断一个数是否为水仙花数：</h3> <p>要找出水仙花数，首先我们需要能识别一个数是否为水仙花数：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 判断一个数是否为水仙花数</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTrue</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> n <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数的长度</span>\\n  <span class=\\\"token keyword\\\">const</span> str <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符 等下取数字</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 总数</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">===</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最终相等 即为正确</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h3 id=\\\"找出所有的n位十进制水仙花数\\\"><a href=\\\"#找出所有的n位十进制水仙花数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 找出所有的<code>n</code>位十进制水仙花数</h3> <ul><li>确定查找的范围(找出n位的最大值与最小值)</li> <li>遍历每个数，判断为水仙花数，添加到数组中</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getNarcissisticNumbers</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> min <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// n == 1的时候，min应该等于0，但是min等于1,所以这边手动判断一下。</span>\\n    min <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> min<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> max<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> str <span class=\\\"token operator\\\">=</span> j<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n    <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 判断一个数是否为水仙花数</span>\\n      total <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">===</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br></div></div><p><strong>注意：</strong></p> <p>查找位数过大会出现性能问题，以及最大值溢出问题。</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/水仙花数.md?vue&type=template&id=761ec4ef&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/induction/水仙花数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f3545464\"\n  \n)\n\ncomponent.options.__file = \"水仙花数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=40.server-bundle.js.map",
    "41.server-bundle.js": "exports.ids = [41];\nexports.modules = {\n\n/***/ 154:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/template.md?vue&type=template&id=4c1c82d2&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/template.md?vue&type=template&id=4c1c82d2&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/template.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"8187731a\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\n/* harmony default export */ var template = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=41.server-bundle.js.map",
    "42.server-bundle.js": "exports.ids = [42];\nexports.modules = {\n\n/***/ 153:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/两数之和.md?vue&type=template&id=35de140f&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"两数之和\\\"><a href=\\\"#两数之和\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 两数之和</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。</p> <p>你需要实现的函数 twoSum 需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 0 到 n-1。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 numbers = [2, 7, 11, 15], target = 9, 返回 [0, 1].</p> <p>给出 numbers = [2, 33, 11, 2], target = 4, 返回 [0, 3].</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p><code>target</code>减去每个元素的值，得出来的值，就是我们要搜索的值。</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>转成对象：</li></ol> <p>这是别人的一种解法，比下面的解法复杂点，可以看看，扩展一下思路。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> map <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// key : the complement (target - num)</span>\\n  <span class=\\\"token comment\\\">// value: index for that num</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> numbers<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> num <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>map<span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 找到值</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>map<span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次保存的index 和 刚找到的下标 即结果。</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 第一次进入 保存 要搜索的值和index</span>\\n      map<span class=\\\"token punctuation\\\">[</span>target <span class=\\\"token operator\\\">-</span> num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br></div></div><ol start=\\\"2\\\"><li>双循环</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> target <span class=\\\"token operator\\\">-</span> numbers<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要搜索的值</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;</span> index<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 倒序查找，跳过已经遍历过的值</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">===</span> numbers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 搜索到了 即找到</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><ol start=\\\"3\\\"><li>indexOf()</li></ol> <p><code>indexOf</code>的第二个参数是开始搜索的位置，也可以跳过前面已经搜索过的值。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> target <span class=\\\"token operator\\\">-</span> numbers<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 相减</span>\\n    <span class=\\\"token keyword\\\">let</span> search <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> index <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 跳过前面已经搜索过的，防止2+2=4 搜索两个2在同一个位置</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>search <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> search<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 直接返回值</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/两数之和.md?vue&type=template&id=35de140f&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/两数之和.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"73b575a0\"\n  \n)\n\ncomponent.options.__file = \"两数之和.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=42.server-bundle.js.map",
    "43.server-bundle.js": "exports.ids = [43];\nexports.modules = {\n\n/***/ 152:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/中位数.md?vue&type=template&id=1b6f36f2&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"中位数\\\"><a href=\\\"#中位数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 中位数</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个未排序的整数数组，找到其中位数。</p> <p>中位数是排序后数组的中间值，如果数组的个数是偶数个，则返回排序后数组的第 N/2 个数。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出数组[4, 5, 1, 2, 3]， 返回 3</p> <p>给出数组[7, 9, 4, 5]，返回 5</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <ol><li>升序排序数组</li> <li>模拟几个数组的返回值，找到里面的规律，找出数组中对应元素。</li></ol> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>判断奇数偶数，找到对应的下标</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 升序排序</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> num <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 保存数组长度</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断奇数偶数</span>\\n    <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 奇数转偶数</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span>num <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 减一 对应数组下标</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><ol start=\\\"2\\\"><li>奇数上舍入，找到下标</li></ol> <p>两种写法一样，但无疑第二种写法更为优雅。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span> v2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> v1 <span class=\\\"token operator\\\">-</span> v2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ceil</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// </span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/中位数.md?vue&type=template&id=1b6f36f2&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/中位数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"cbca1ca6\"\n  \n)\n\ncomponent.options.__file = \"中位数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=43.server-bundle.js.map",
    "44.server-bundle.js": "exports.ids = [44];\nexports.modules = {\n\n/***/ 151:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/分解质因数.md?vue&type=template&id=28647fb2&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"分解质因数\\\"><a href=\\\"#分解质因数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 分解质因数</h1> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"质因数的定义：\\\"><a href=\\\"#质因数的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 质因数的定义：</h3> <p>能整除给定正整数的质数。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"百度百科：\"),_vm._ssrNode(\"<a href=\\\"https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E6%95%B0#reference-%5B1%5D-341369-wrap\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"质因数\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <ol><li>将一个整数分解为若干质因数之乘积</li> <li>你需要从小到大排列质因子</li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <ul><li>给出 <code>10</code>, 返回 <code>[2, 5]</code></li> <li>给出 <code>660</code>, 返回 <code>[2, 2, 3, 5, 11]</code></li></ul> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>从小到大排列质因子，需要将同一个质因子整除干净。</p> <p>比如：20 可以被 2 整除两次。</p> <p>提示：需要两层循环。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 分解质因数</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">primeFactorization</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 不需要判定i是否为质数，如果i不为质数，且能整除num时，num早被i的因数所除。故能整除num的i必是质数。</span>\\n  <span class=\\\"token comment\\\">// i * i &gt; num 退出循环 num一开始会在第二层循环被i整除成比较小的数字</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">*</span> i <span class=\\\"token operator\\\">&lt;=</span> num<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">%</span> i <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 直到有余数退出循环</span>\\n      num <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">/</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变num</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没有余数 能整除 这一步会找出所有质因数 不会出现4的那种情况</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// num到最后也是质因数</span>\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/分解质因数.md?vue&type=template&id=28647fb2&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/分解质因数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"13760682\"\n  \n)\n\ncomponent.options.__file = \"分解质因数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=44.server-bundle.js.map",
    "45.server-bundle.js": "exports.ids = [45];\nexports.modules = {\n\n/***/ 150:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/反转整数.md?vue&type=template&id=ac1abdc0&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"反转整数\\\"><a href=\\\"#反转整数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 反转整数</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给定 x = 123，返回 321</p> <p>给定 x = -123，返回 -321</p> <p>给定 x = 1534236469， 返回 0</p> <hr> <h3 id=\\\"这题很简单-自己想一下！\\\"><a href=\\\"#这题很简单-自己想一下！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-2\\\"><a href=\\\"#这题很简单-自己想一下！-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-3\\\"><a href=\\\"#这题很简单-自己想一下！-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <p>给</p> <p>你</p> <p>点</p> <p>时</p> <p>间</p> <p>想</p> <p>一</p> <p>下</p> <hr> <h3 id=\\\"解法：\\\"><a href=\\\"#解法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 解法：</h3> <ol><li>最优：转字符串 再转数组进行操作</li> <li>看到有人用四则运算+遍历反转整数，会把这个解法放到下面</li></ol> <h3 id=\\\"提示\\\"><a href=\\\"#提示\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 提示:</h3> <p>整数溢出的值为<code>Math.pow(2, 31) - 1</code>和<code>Math.pow(-2, 31) + 1</code>，转为数字：<code>2147483647</code>和<code>-2147483647</code></p> <p>这部分跟位操作符，二进制有关，有兴趣可以去搜下。</p> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>转数组操作：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    n <span class=\\\"token operator\\\">=</span> n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 负数提取数字</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'-'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转数字</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    n <span class=\\\"token operator\\\">=</span> n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转为数组 颠倒数组 再合字符 最后转数字</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">&gt;=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">||</span> n <span class=\\\"token operator\\\">&lt;=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断溢出</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><ol start=\\\"2\\\"><li>遍历，一位一位颠倒：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 从个位起一位一位的颠倒</span>\\n    res <span class=\\\"token operator\\\">=</span> res <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// n除以10， 一位数转化完成 到最后小于1 被转成0 退出循环</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">2147483647</span> <span class=\\\"token operator\\\">||</span> res <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147483647</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"转数组操作运行效率也更高点：\\\"><a href=\\\"#转数组操作运行效率也更高点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转数组操作运行效率也更高点：</h3> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fujnet3b8vj318z0kh41p.jpg\\\" alt></p> \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.23</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/反转整数.md?vue&type=template&id=ac1abdc0&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/反转整数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5cc5095c\"\n  \n)\n\ncomponent.options.__file = \"反转整数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=45.server-bundle.js.map",
    "46.server-bundle.js": "exports.ids = [46];\nexports.modules = {\n\n/***/ 149:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/合并排序数组.md?vue&type=template&id=28fa6129&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"合并排序数组\\\"><a href=\\\"#合并排序数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 合并排序数组</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>合并<strong>两个排序的整数数组 A 和 B 变成一个新的排序数组</strong>。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出<code>A=[1,2,3,4]</code>，<code>B=[2,4,5,6]</code>，返回 <code>[1,2,2,3,4,4,5,6]</code></p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>注意 A 和 B 本来就是排序好的数组，最简单的就是用<code>sort</code>排序了。</p> <h3 id=\\\"sort排序\\\"><a href=\\\"#sort排序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>sort</code>排序</h3> <ol><li>把两个数组合并成一个数组</li> <li>用 sort 升序进行排序。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSortedArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 合并数组</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// sort排序</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"先对比完一个数组：\\\"><a href=\\\"#先对比完一个数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先对比完一个数组：</h3> <ol><li><p><strong>初始两个变量分别对应一个数组</strong>，进入循环</p></li> <li><p><strong>i 和 j 不会同时递增</strong>，只在对应数组元素打败另一数组元素时才会递增，只要打败一个即可，因为两个数组一开始就是排序好的</p></li> <li><p><strong>i 和 j 必须有一个超过对应数组长度</strong>(这样至少有一个数组的元素被逐一比较过)</p></li> <li><p>如果一个数组那边超过长度，会退出循环，但是可能由一方的长度还有剩余（比如一个元素打败另一数组的所有元素），所以我们需要<strong>将长度有剩余的数组剩下的元素全都 push 到新数组中</strong>(因为一开始就排序好的，后面出场的只会更强)</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSortedArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// i或者j必须有一个超过对应数组长度 才退出循环 所以至少有一个数组的元素被逐一比较</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 下面两种写法是一样的</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这里会先把j赋值给B[j]， 然后再j++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 上面至少有一个数组已经比较了每个元素 如果还有一方长度有剩余 直接push进来就可以(AB一开始就是排序好的数组)</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/合并排序数组.md?vue&type=template&id=28fa6129&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/合并排序数组.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"76fa6d0e\"\n  \n)\n\ncomponent.options.__file = \"合并排序数组.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=46.server-bundle.js.map",
    "47.server-bundle.js": "exports.ids = [47];\nexports.modules = {\n\n/***/ 148:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/回文.md?vue&type=template&id=358cc167&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"删除一个字母的回文\\\"><a href=\\\"#删除一个字母的回文\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 删除一个字母的回文</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>给定非空字符串 s，您最多可以删除一个字符。判断是否可以成为回文。</p> <p>该字符串仅包含小写字符 a-z,字符串的最大长度为 50000。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>Given s = &quot;aba&quot; return true</p> <p>Given s = &quot;abca&quot; return true // delete c</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li>如果单单是回文的话，就很简单了:</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>s <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>s<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 翻转字符串与原字符相比</span>\\n<span class=\\\"token comment\\\">// 实际上这里做了很多步操作，字符转数组 翻转数组 再转字符串，所以这里性能也不是很好</span>\\n<span class=\\\"token comment\\\">// 如果对性能要求比较高的话，还是通过循环从两侧向中间逐一比较，会更好一点</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ul><li>题目中还有一个要求：删除一个字符，也就是允许一个字符的不同。</li> <li>下面我们的解法主体思路就是<strong>通过循环，从两侧向中间比较</strong>，然后解决当出现不同的情况，如何<strong>保证只允许出现一个不同</strong>。</li></ul> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>出现一处不同 将值传入一个新函数，再进行判断字符串：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 左右两边字符都要尝试一下 一边返回true即可</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isSubPalindrom</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 再有不同之处 返回false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n  <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br></div></div><p>这个写好之后，我在想能不能通过递归的形式来解决，<strong>为什么要创建第二个函数</strong>？</p> <ol start=\\\"2\\\"><li>递归解法：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> validPalindrome <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第一次进入允许出现一次不同</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 左右两边都尝试一下 一边返回true即可</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第二次 再有不同之处 返回false</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n    <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br></div></div><p>相对于上个解法这里就是多设置了一个变量，然后将两方区分开来，但是这样递归我还是觉得太傻了，所以在想你<strong>能不能通过设置变量来处理</strong>？出现两次不同即失败。</p> <ol start=\\\"3\\\"><li>设置一个变量允许一次不同</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> j<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 从两侧向中间递减 i- j-1 减到最后 i&gt;j i=j 退出循环</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果两侧不相同</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removed<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 只允许一次不同</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 转数组删除一个不同元素 下次直接return</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(j, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(i, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 上面两个else 右边-1 或左边+1相不相等 如果两边也不相等即false</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br></div></div>\"),_vm._ssrNode(\"<h3 id=\\\"代码地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm/blob/9bc3c386129f03f93120265c88d4d6250bdcc416/codeSource/Palindrome.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.12</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/回文.md?vue&type=template&id=358cc167&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/回文.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"4ab407b8\"\n  \n)\n\ncomponent.options.__file = \"回文.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=47.server-bundle.js.map",
    "48.server-bundle.js": "exports.ids = [48];\nexports.modules = {\n\n/***/ 147:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/姓名去重.md?vue&type=template&id=346252a0&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"姓名去重\\\"><a href=\\\"#姓名去重\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 姓名去重</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>给一串名字，将他们去重之后返回。两个名字重复是说在忽略大小写的情况下是一样的。</p> <h3 id=\\\"说明：\\\"><a href=\\\"#说明：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 说明：</h3> <p>你可以假设名字只包含大小写字母和空格。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'James'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'james'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Bill Gates'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'bill Gates'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Hello World'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'HELLO WORLD'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Helloworld'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>返回：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'james'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bill gates'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'hello world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'helloworld'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><hr> <h3 id=\\\"这题很简单-自己想一下！\\\"><a href=\\\"#这题很简单-自己想一下！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-2\\\"><a href=\\\"#这题很简单-自己想一下！-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-3\\\"><a href=\\\"#这题很简单-自己想一下！-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <p>给</p> <p>你</p> <p>点</p> <p>时</p> <p>间</p> <p>想</p> <p>一</p> <p>下</p> <hr> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li>思路就是：去重和转小写</li></ul> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <p>题目基本就像下面这样解了，其他的不过是循环的方法，去重的方法不同，事实上都大同小异。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">nameDeduplication</span> <span class=\\\"token operator\\\">=</span> names <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  names<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    names<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 全部转小写</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>names<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 去重</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>再讲一个坑吧：</p> <p>题目描述的时候说是输出是这样的：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;james&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;bill gates&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;hello world&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;helloworld&quot;</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>当我把代码提交之后，告诉我，期望答案是这样的：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;bill gates&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;hello world&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;helloworld&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;james&quot;</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>一般来说不会这么坑：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>names<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 我在后面加了一个sort方法就符合他们的预期答案了。。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"题目比较简单，就不放代码-上面就是-了。\\\"><a href=\\\"#题目比较简单，就不放代码-上面就是-了。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目比较简单，就不放代码(上面就是)了。</h3> \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.16</p>\")],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/姓名去重.md?vue&type=template&id=346252a0&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/姓名去重.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ec96a21\"\n  \n)\n\ncomponent.options.__file = \"姓名去重.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=48.server-bundle.js.map",
    "49.server-bundle.js": "exports.ids = [49];\nexports.modules = {\n\n/***/ 196:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/字符串密钥格式.md?vue&type=template&id=c37cc948&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"字符串密钥格式\\\"><a href=\\\"#字符串密钥格式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串密钥格式</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <ol><li><p>给定字符串 S(非空)，字符串 S 仅由字母数字字符（a-z 和/或 A-Z 和/或 0-9）和短划线（ - ）组成。</p></li> <li><p>给定正整数 K，我们希望重新格式化字符串，使得<strong>每个组包含正好的 K 个字符</strong>，但<strong>第一个组可能比 K 短</strong>，但仍必须包含至少一个字符。</p></li> <li><p>必须在<strong>两个组之间插入短划线</strong>，并且所有<strong>小写字母都应转换为大写</strong></p></li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>Input: S = &quot;5F3Z-2e-9-w&quot;, K = 4</p> <p>Output: &quot;5F3Z-2E9W&quot;</p> <p>Input: S = &quot;2-5g-3-J&quot;, K = 2</p> <p>Output: &quot;2-5G-3J&quot;</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>处理字符串通常需要转成数组来处理，仔细观察输出和规则，总结规律。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li><p>去掉<code>-</code>，等下用<code>join</code>连接。</p></li> <li><p>字符串长度不能被K整除的话，需取余，将不能整除的部分拿出来。</p></li> <li><p>然后每隔几个<code>K</code>每割一下字符串，这里用了正则，返回一个数组。</p></li> <li><p>再跟之前被拿出来的部分，合并成一个数组。</p></li> <li><p>用<code>join</code>将数组转成字符串。</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">licenseKeyFormatting</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">K</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/-/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 去掉所有的-</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 字符串总数</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">%</span> <span class=\\\"token constant\\\">K</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取余</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 字符串剩余的放在这个数组中</span>\\n  <span class=\\\"token comment\\\">// 字符串余数</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      str <span class=\\\"token operator\\\">+=</span> arr<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 有多少个余数就将多少个字符 添加到字符串中</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">===</span> num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除已被添加的字符</span>\\n    <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// S重新变为字符串 用于下面操作</span>\\n    strArr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加到数组 等下用于连接</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> spliceNum <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\\\\\\\w{</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">K</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">}`</span></span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 几个字符串为一个间隔</span>\\n  <span class=\\\"token keyword\\\">let</span> reg <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span>spliceNum<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'gim'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 切割字符串返回数组</span>\\n  strArr <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>strArr2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 连接余数数组和切割的数组</span>\\n  <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 连接字符串 并转为大写</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">licenseKeyFormatting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'5F3Z-2e-9-w'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">licenseKeyFormatting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2-5g-3-J'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/字符串密钥格式.md?vue&type=template&id=c37cc948&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/字符串密钥格式.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1c801bb0\"\n  \n)\n\ncomponent.options.__file = \"字符串密钥格式.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=49.server-bundle.js.map",
    "50.server-bundle.js": "exports.ids = [50];\nexports.modules = {\n\n/***/ 180:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/搜索二维矩阵.md?vue&type=template&id=213a4116&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"搜索二维矩阵\\\"><a href=\\\"#搜索二维矩阵\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 搜索二维矩阵</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>写出一个高效的算法来搜索 m × n 矩阵中的值。</p> <p>这个矩阵具有以下特性：</p> <ol><li>每行中的整数从左到右是从小到大排序的。</li> <li>每行的第一个数大于上一行的最后一个整数。</li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">34</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>给出 <code>target = 3</code>，返回 <code>true</code></p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>双循环找出是否有这个值，根据第二个特性，我们可以跳过一些第二层循环，算法更具效率。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param matrix: matrix, a list of lists of integers\\n * @param target: An integer\\n * @return: a boolean, indicate whether matrix contains target\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">searchMatrix</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>matrix<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">of</span> matrix<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历外层数组</span>\\n    <span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> matrix<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 拿到每行元素</span>\\n    <span class=\\\"token comment\\\">// 判断target是否在当前行中，跳过其他不必要循环</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">&lt;=</span> value<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历行中元素 </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 找到值</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">&lt;</span> value<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 值超过target即找不到(因为是排序的)</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 没有找到即返回false</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div>\")])}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/搜索二维矩阵.md?vue&type=template&id=213a4116&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/搜索二维矩阵.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"9019b7da\"\n  \n)\n\ncomponent.options.__file = \"搜索二维矩阵.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=50.server-bundle.js.map",
    "51.server-bundle.js": "exports.ids = [51];\nexports.modules = {\n\n/***/ 179:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/最大子数组.md?vue&type=template&id=d277c782&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"最大子数组\\\"><a href=\\\"#最大子数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 最大子数组</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出数组[−2,2,−3,4,−1,2,1,−5,3]，符合要求的子数组为[4,−1,2,1]，其最大和为 6</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>本题只要找出最大和即可，保存两个值，一个为元素之间相加的值(需比较元素相加的值与当前元素的大小)，一个为最大值。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> max <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化最大值</span>\\n  <span class=\\\"token keyword\\\">let</span> newMax <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素相加的缓存值</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    newMax <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>newMax <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 相加是否大于当前值</span>\\n    max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>newMax<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 与最大值相比</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> max<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><p>第二种方法更难理解点，可以扩展一下思路：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> nSum <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素相加的缓存值</span>\\n  <span class=\\\"token keyword\\\">var</span> nMax <span class=\\\"token operator\\\">=</span> nSum<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化最大值</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> curNum <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 当前元素</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>curNum <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> nSum <span class=\\\"token operator\\\">=</span> nSum <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> nSum <span class=\\\"token operator\\\">+</span> curNum <span class=\\\"token punctuation\\\">:</span> curNum<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 如果两个值都大于0 两个值相加。否则就取后一个大于0的</span>\\n    <span class=\\\"token keyword\\\">else</span> nSum <span class=\\\"token operator\\\">=</span> nSum <span class=\\\"token operator\\\">&lt;</span> curNum <span class=\\\"token operator\\\">?</span> curNum <span class=\\\"token punctuation\\\">:</span> nSum <span class=\\\"token operator\\\">+</span> curNum<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果新加的值小于0 判断结果是否大于新加的值 小于的话就改为新加的值</span>\\n    nMax <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>nMax<span class=\\\"token punctuation\\\">,</span> nSum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最大值与数组元素相加值比较</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> nMax<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><h3 id=\\\"最大和的数组：\\\"><a href=\\\"#最大和的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 最大和的数组：</h3> <p>如果你想把最大和的数组都找出来，你需要保存数组的开始下标和结束下标，这里我演示了第一个方法，下面那个方法也是一样：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> max <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">:</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    start<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token comment\\\">// 结束的下标 后面要切割数组 需比当前下标+1.把当前值也切割</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> newMax <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">:</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    start<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 相加大于当前值 缓存改值和结束下标</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 小于当前值 重置start end</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>start <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 最大值被超过 把值赋给最大值</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">&lt;</span> newMax<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      max<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">;</span>\\n      max<span class=\\\"token punctuation\\\">.</span>start <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>start<span class=\\\"token punctuation\\\">;</span>\\n      max<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>end<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">.</span>start<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">.</span>end<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 找出最大和的子数组</span>\\n  <span class=\\\"token keyword\\\">return</span> max<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 子数组的最大和</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/最大子数组.md?vue&type=template&id=d277c782&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/最大子数组.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"394bcfc0\"\n  \n)\n\ncomponent.options.__file = \"最大子数组.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=51.server-bundle.js.map",
    "52.server-bundle.js": "exports.ids = [52];\nexports.modules = {\n\n/***/ 178:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/比较字符串.md?vue&type=template&id=7ddb671e&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"比较字符串\\\"><a href=\\\"#比较字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 比较字符串</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>比较两个字符串 A 和 B，确定 A 中是否包含 B 中所有的字符。字符串 A 和 B 中的字符都是 大写字母</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 A = &quot;ABCD&quot; B = &quot;ACD&quot;，返回 true</p> <p>给出 A = &quot;ABCD&quot; B = &quot;AABC&quot;， 返回 false</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param A: A string\\n * @param B: A string\\n * @return: if string A contains all of the characters in B return true else return false\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compareStrings</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>将字符串转成数组来处理</p> <h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compareStrings</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转成数组操作</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// B数组元素和A数组元素成功匹配</span>\\n      <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>find<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除A数组中已匹配到的，保持数量相等</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// B数组中有A不包含的字符串</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareStrings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ABCD'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ACD'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">compareStrings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ABC'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/比较字符串.md?vue&type=template&id=7ddb671e&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/比较字符串.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2993c709\"\n  \n)\n\ncomponent.options.__file = \"比较字符串.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=52.server-bundle.js.map",
    "53.server-bundle.js": "exports.ids = [53];\nexports.modules = {\n\n/***/ 177:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/simple/落单的数.md?vue&type=template&id=fb99694e&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"落单的数\\\"><a href=\\\"#落单的数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 落单的数</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给出 2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 <code>[1,2,2,1,3,4,3]</code>，返回 <code>4</code></p> <p>给出 <code>[7, 10001, 10002, 10003, 10001, 10002, 10003, 10004, 7, 10004, 91985345, 2, 2, 3, 4, 5, 5, 4, 3, 11, 91985345]</code>,返回<code>11</code></p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>有很多解决方式，建议用<code>indexOf</code>来查找是否有值。</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param A: An integer array\\n * @return: An integer\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>转对象，如果第二次出现，删除该值，最后只剩一个值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 判断出现次数</span>\\n            <span class=\\\"token comment\\\">// 第二次出现 </span>\\n            <span class=\\\"token keyword\\\">let</span> test <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">delete</span> res<span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除数组元素 变为undefined</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 第一次出现</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素添加进去</span>\\n            obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> res<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 保存下标 用于等下删除第二次出现的元素</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转成字符串 最终只有一个值输出</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><ol start=\\\"2\\\"><li>查找该值的前后是否有该值，如果没有，即找到落单的值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> v <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token comment\\\">// 如果b数组中没有v(没有push过 代表前面没有v)并且A数组在后面也没有该值(也就是后面也没有v)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> v <span class=\\\"token comment\\\">// 前面没有v 后面也没有v 即是唯一的值</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加v</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><ol start=\\\"3\\\"><li>转成本地变量操作，将该值删除，再查找是否有该值，如果没有即找到该值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//  转成本地变量</span>\\n        s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 将该值删除</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 被删过一次 再查找是否还有这个值</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 如果没有的话 即找到该值</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/落单的数.md?vue&type=template&id=fb99694e&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/simple/落单的数.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f04032ee\"\n  \n)\n\ncomponent.options.__file = \"落单的数.md\"\n/* harmony default export */ var _ = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=53.server-bundle.js.map",
    "54.server-bundle.js": "exports.ids = [54];\nexports.modules = {\n\n/***/ 169:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js?{\"cacheDirectory\":\"../../../../../usr/local/lib/node_modules/vuepress/node_modules/.cache/vuepress\",\"cacheIdentifier\":\"40477e2a-vue-loader-template\"}!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/usr/local/lib/node_modules/vuepress/node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--1-0!/usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib??ref--1-1!/usr/local/lib/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!./docs/algorithm/template.md?vue&type=template&id=1fa50996&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/algorithm/template.md?vue&type=template&id=1fa50996&\n\n// EXTERNAL MODULE: /usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./docs/algorithm/template.md\n\nvar script = {}\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"d28fd134\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\n/* harmony default export */ var template = __webpack_exports__[\"default\"] = (component.exports);\n\n/***/ })\n\n};;\n//# sourceMappingURL=54.server-bundle.js.map",
    "1.server-bundle.js": "exports.ids = [1];\nexports.modules = {\n\n/***/ 145:\n/***/ (function(module, exports) {\n\n\n\n/***/ })\n\n};;\n//# sourceMappingURL=1.server-bundle.js.map"
  },
  "maps": {
    "server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///webpack/bootstrap",
        "webpack:///external \"vue\"",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_wks.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_global.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_export.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_is-object.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_fails.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_an-object.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_descriptors.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-dp.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_ctx.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_hide.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_redefine.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_cof.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_core.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_has.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_defined.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/web.dom.iterable.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iterators.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.iterator.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_strict-method.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.some.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_a-function.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_uid.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_set-to-string-tag.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.assign.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-keys.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-iobject.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-object.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.keys.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.for-each.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_array-methods.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.filter.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.map.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.replace.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_nprogress@0.2.0@nprogress/nprogress.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_library.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_dom-create.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_property-desc.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_an-instance.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_for-of.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-length.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-integer.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_redefine-all.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_set-species.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iobject.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_shared-key.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_enum-bug-keys.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_meta.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iter-define.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.function.name.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.index-of.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_fix-re-wks.js",
        "webpack:///external \"vue-router\"",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.promise.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_classof.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_shared.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_ie8-dom-define.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-primitive.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_task.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_html.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_new-promise-capability.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iter-detect.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-keys-internal.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_array-includes.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-pie.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-sap.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iter-step.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-create.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_is-array.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_is-regexp.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.match.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_inherit-if-required.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_validate-collection.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_lodash.throttle@4.1.1@lodash.throttle/index.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iter-call.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_is-array-iter.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/core.get-iterator-method.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_species-constructor.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_invoke.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_microtask.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_perform.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_user-agent.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_promise-resolve.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-assign.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_to-absolute-index.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-gops.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.object.freeze.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_add-to-unscopables.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_iter-create.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-dps.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-gpo.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_array-species-create.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_array-species-constructor.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.link.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_string-html.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.array.is-array.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.split.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?3596",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue?9a31",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.trim.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_string-trim.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_string-ws.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?5719",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.regexp.constructor.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_set-proto.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-gopd.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_object-gopn.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_flags.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?9f44",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?3f99",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?e03e",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?f755",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?d699",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue?3a54",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?2fa5",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?87e7",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?b97a",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_prismjs@1.15.0@prismjs/themes/prism-tomorrow.css",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/styles/theme.styl",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.string.iterator.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_string-at.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/es6.set.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_collection-strong.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_core-js@2.5.7@core-js/modules/_collection.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue?88a9",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/arrayWithoutHoles.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/iterableToArray.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/nonIterableSpread.js",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/toConsumableArray.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/util.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/dataMixin.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/store.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?108d",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?856b",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?fb80",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?9a7e",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?3b10",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?7260",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/util.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue?ca4c",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLink.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue?a6bb",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Home.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?218d",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?8c2f",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue?ab1d",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue?b5b4",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarButton.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/webpack/noopModule.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?9a55",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?9fa2",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue?97bd",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SearchBox.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?0294",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?d20a",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?5f9f",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?d146",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?0104",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?ce92",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue?ce71",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownTransition.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue?e10d",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/DropdownLink.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue?0020",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NavLinks.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue?e5a8",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Navbar.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?f4dd",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?b9c1",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue?3b3a",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Page.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?b547",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?e9df",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?ffad",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?15b0",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue?8a0e",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarLink.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue?481e",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SidebarGroup.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue?4200",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Sidebar.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?53fa",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?ef37",
        "webpack:////usr/local/lib/node_modules/vuepress/node_modules/_@babel_runtime@7.0.0-beta.47@@babel/runtime/helpers/builtin/es6/typeof.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?e010",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue?1258",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/Layout.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?3c25",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?1283",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue?576f",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/default-theme/NotFound.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/root-mixins/updateMeta.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/root-mixins/activeHeaderLinks.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/root-mixins/index.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/.temp/routes.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/.temp/siteData.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/.temp/enhanceApp.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/.temp/themeEnhanceApp.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/components/Content.js",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue?bd7d",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue?9633",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/OutboundLink.vue",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/components/ClientOnly.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/app.js",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/serverEntry.js"
      ],
      "names": [
        "injectMixins",
        "options",
        "mixins",
        "push",
        "findPageForPath",
        "pages",
        "path",
        "i",
        "length",
        "page",
        "frontmatter",
        "dataMixin",
        "siteData",
        "prepare",
        "store",
        "data",
        "computed",
        "$site",
        "$localeConfig",
        "locales",
        "targetLang",
        "defaultLang",
        "$page",
        "indexOf",
        "$siteTitle",
        "title",
        "$title",
        "siteTitle",
        "selfTitle",
        "home",
        "$description",
        "meta",
        "descriptionMeta",
        "filter",
        "item",
        "name",
        "content",
        "description",
        "$lang",
        "lang",
        "$localePath",
        "$themeLocaleConfig",
        "themeConfig",
        "$route",
        "forEach",
        "Object",
        "keys",
        "freeze",
        "state",
        "disableScrollBehavior",
        "hashRE",
        "extRE",
        "endingSlashRE",
        "outboundRE",
        "normalize",
        "decodeURI",
        "replace",
        "getHash",
        "match",
        "isExternal",
        "test",
        "isMailto",
        "isTel",
        "ensureExt",
        "hashMatch",
        "hash",
        "normalized",
        "route",
        "routeHash",
        "linkHash",
        "routePath",
        "pagePath",
        "resolvePage",
        "rawPath",
        "base",
        "resolvePath",
        "assign",
        "type",
        "console",
        "error",
        "relative",
        "append",
        "firstChar",
        "charAt",
        "stack",
        "split",
        "pop",
        "segments",
        "segment",
        "unshift",
        "join",
        "resolveSidebarItems",
        "site",
        "localePath",
        "localeConfig",
        "pageSidebarConfig",
        "sidebar",
        "resolveHeaders",
        "sidebarConfig",
        "resolveMatchingConfig",
        "config",
        "map",
        "resolveItem",
        "headers",
        "groupHeaders",
        "collapsable",
        "children",
        "h",
        "basePath",
        "slug",
        "lastH2",
        "level",
        "resolveNavLinkItem",
        "linkItem",
        "items",
        "Array",
        "isArray",
        "ensureEndingSlash",
        "isNested",
        "child",
        "props",
        "required",
        "link",
        "exact",
        "some",
        "rootLink",
        "methods",
        "components",
        "NavLink",
        "actionLink",
        "text",
        "actionText",
        "query",
        "focused",
        "focusIndex",
        "showSuggestions",
        "suggestions",
        "trim",
        "toLowerCase",
        "max",
        "searchMaxSuggestions",
        "matches",
        "res",
        "p",
        "getPageLocalePath",
        "j",
        "header",
        "alignRight",
        "navCount",
        "nav",
        "repo",
        "onUp",
        "onDown",
        "go",
        "$router",
        "focus",
        "unfocus",
        "setHeight",
        "style",
        "height",
        "scrollHeight",
        "unsetHeight",
        "DropdownTransition",
        "open",
        "toggle",
        "DropdownLink",
        "userNav",
        "currentLink",
        "routes",
        "themeLocales",
        "languageDropdown",
        "selectText",
        "locale",
        "label",
        "userLinks",
        "repoLink",
        "repoLabel",
        "repoHost",
        "platforms",
        "platform",
        "RegExp",
        "SidebarButton",
        "NavLinks",
        "SearchBox",
        "AlgoliaSearchBox",
        "linksWrapMaxWidth",
        "mounted",
        "MOBILE_DESKTOP_BREAKPOINT",
        "NAVBAR_VERTICAL_PADDING",
        "parseInt",
        "css",
        "$el",
        "handleLinksWrapWidth",
        "document",
        "documentElement",
        "clientWidth",
        "offsetWidth",
        "$refs",
        "siteName",
        "window",
        "addEventListener",
        "algolia",
        "isAlgoliaSearch",
        "apiKey",
        "indexName",
        "el",
        "property",
        "win",
        "ownerDocument",
        "defaultView",
        "getComputedStyle",
        "lastUpdated",
        "Date",
        "toLocaleString",
        "lastUpdatedText",
        "prev",
        "resolvePrev",
        "sidebarItems",
        "next",
        "resolveNext",
        "editLink",
        "editLinks",
        "docsDir",
        "docsBranch",
        "docsRepo",
        "createEditLink",
        "editLinkText",
        "bitbucket",
        "find",
        "offset",
        "cur",
        "functional",
        "render",
        "parent",
        "selfActive",
        "isActive",
        "active",
        "c",
        "renderLink",
        "configDepth",
        "sidebarDepth",
        "maxDepth",
        "displayAllHeaders",
        "renderChildren",
        "to",
        "activeClass",
        "exactActiveClass",
        "class",
        "depth",
        "SidebarLink",
        "SidebarGroup",
        "openGroupIndex",
        "created",
        "refreshIndex",
        "watch",
        "index",
        "resolveOpenGroupIndex",
        "toggleGroup",
        "updateEvent",
        "default",
        "popupConfig",
        "sw",
        "serviceWorker",
        "updatePopup",
        "enabled",
        "Boolean",
        "message",
        "buttonText",
        "reload",
        "skipWaiting",
        "then",
        "location",
        "Home",
        "Page",
        "Sidebar",
        "Navbar",
        "SWUpdatePopup",
        "isSidebarOpen",
        "swUpdateEvent",
        "shouldShowNavbar",
        "navbar",
        "logo",
        "shouldShowSidebar",
        "layout",
        "pageClasses",
        "userPageClass",
        "pageClass",
        "onScroll",
        "nprogress",
        "configure",
        "showSpinner",
        "beforeEach",
        "from",
        "Vue",
        "component",
        "start",
        "afterEach",
        "done",
        "$on",
        "onSWUpdated",
        "toggleSidebar",
        "onTouchStart",
        "e",
        "touchStart",
        "x",
        "changedTouches",
        "clientX",
        "y",
        "clientY",
        "onTouchEnd",
        "dx",
        "dy",
        "Math",
        "abs",
        "msgs",
        "getMsg",
        "floor",
        "random",
        "$ssrContext",
        "currentMetaTags",
        "Set",
        "updateMeta",
        "userMeta",
        "slice",
        "useGlobalDescription",
        "m",
        "descriptionMetas",
        "querySelectorAll",
        "add",
        "updateMetaTags",
        "$watch",
        "beforeDestroy",
        "current",
        "head",
        "removeChild",
        "tag",
        "createElement",
        "setAttribute",
        "key",
        "appendChild",
        "throttle",
        "setActiveHash",
        "sidebarLinks",
        "call",
        "anchors",
        "sidebarLink",
        "anchor",
        "scrollTop",
        "pageYOffset",
        "body",
        "nextAnchor",
        "parentElement",
        "offsetTop",
        "decodeURIComponent",
        "$nextTick",
        "removeEventListener",
        "beforeEnter",
        "comp",
        "redirect",
        "ThemeNotFound",
        "custom",
        "staticClass",
        "_isMounted",
        "$once",
        "$forceUpdate",
        "productionTip",
        "use",
        "mixin",
        "prototype",
        "$withBase",
        "createApp",
        "router",
        "mode",
        "fallback",
        "scrollBehavior",
        "saved",
        "selector",
        "themeEnhanceApp",
        "enhanceApp",
        "app",
        "attrs",
        "id",
        "ref",
        "Promise",
        "resolve",
        "reject",
        "url",
        "context",
        "fullPath",
        "onReady"
      ],
      "mappings": ";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAkB,qBAAqB;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;AACA;AACA,sBAAc;AACd,YAAI;AACJ;;;AAGA;AACA;;;;;;;ACnHA,gC;;;;;;;ACAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC5FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA,yCAAyC;;;;;;;ACLzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,uBAAuB;AACzG,iEAAiE;AACjE,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,eAAe;AACf,eAAe;AACf,eAAe;AACf,gBAAgB;AAChB;;;;;;;AC1CA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA,iCAAiC,QAAQ,mBAAmB,UAAU,EAAE,EAAE;AAC1E,CAAC;;;;;;;ACHD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;AC9BD,iBAAiB;;AAEjB;AACA;AACA;;;;;;;ACJA,6BAA6B;AAC7B,uCAAuC;;;;;;;ACDvC,uBAAuB;AACvB;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD,wBAAwB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzDA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,cAAc;AACd,iBAAiB;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;;;;;;;ACjCA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,cAAc;AACvD,GAAG;AACH;;;;;;;;ACRA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACTD;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;AAEA;AACA,oEAAoE,iCAAiC;AACrG;;;;;;;ACNA;AACA;;AAEA,0CAA0C,mCAAsC;;;;;;;ACHhF;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACRD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA,wCAAwC;AACxC;AACA,8BAA8B;AAC9B,6BAA6B;AAC7B,+BAA+B;AAC/B,mCAAmC;AACnC,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACTD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXD;AACA;;AAEA,CAAC;;AAED;AACA;AAAA;AAAA;AAAA;AAAA;AACA,GAAG,QAIH;;AAEA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uB;AACA;AACA;AACA,SAAS;AACT,6BAA6B;;AAE7B;AACA,yB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB;AAChB,KAAK;AACL,gBAAgB;AAChB,KAAK;AACL,gBAAgB;AAChB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;AC1dD;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,mEAAmE,gBAAgB;AACnF;AACA;AACA,GAAG,4CAA4C,gCAAgC;AAC/E;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC,GAAG;AACH;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,CAAC;AACD;AACA,qBAAqB;AACrB;AACA,SAAS;AACT,GAAG,EAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA,8BAA8B,aAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA,yCAAyC,oCAAoC;AAC7E,6CAA6C,oCAAoC;AACjF,KAAK,4BAA4B,oCAAoC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;;;;;;;ACfD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACdD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;;;;;;;AC3BA,uC;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,kCAAkC;AACrD,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe,uCAAuC;AACtD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,yBAAyB,KAAK;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB;AACxB,gBAAgB;AAChB,oBAAoB;AACpB,wBAAwB;AACxB,gBAAgB;AAChB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,oBAAoB;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,CAAC;;;;;;;AC7RD;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB,EAAE;;AAE/C;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA,kDAAkD;;AAElD;AACA,qEAAqE;AACrE,CAAC;AACD;AACA;AACA;AACA,CAAC;;;;;;;ACXD;AACA,qEAAsE,mBAAmB,UAAU,EAAE,EAAE;AACvG,CAAC;;;;;;;ACFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnFA;AACA;;;;;;;;ACDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACjBA;AACA;;AAEA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA,iCAAiC,SAAS,EAAE;AAC5C,CAAC,YAAY;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS,qBAAqB;AAC3D,iCAAiC,aAAa;AAC9C;AACA,GAAG,YAAY;AACf;AACA;;;;;;;ACrBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,YAAY,eAAe;AAChC;AACA,KAAK;AACL;AACA;;;;;;;ACtBA,cAAc;;;;;;;ACAd;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qDAAqD,OAAO,EAAE;AAC9D;;;;;;;ACTA;AACA,UAAU;AACV;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;ACxCA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;ACTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO,YAAY;AAC9B,WAAW,QAAQ;AACnB;AACA,WAAW,OAAO;AAClB;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,8CAA8C,kBAAkB;AAChpB,WAAW,OAAO;AAClB,WAAW,OAAO,YAAY;AAC9B,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACtbA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,uCAAuC,sBAAsB,EAAE;AAC/D;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;ACpEA;AACA;AACA,YAAY;AACZ,GAAG;AACH,YAAY;AACZ;AACA;;;;;;;ACNA;AACA;;AAEA;;;;;;;ACHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU,EAAE;AAChD,mBAAmB,sCAAsC;AACzD,CAAC,qCAAqC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;ACjCD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;;;;;;;ACAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACRD;AACA;AACA;AACA,6FAAwF;AACxF;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;AAEA;AACA,4FAAkF,aAAa,EAAE;;AAEjG;AACA,qDAAqD,4BAA4B;AACjF;AACA;;;;;;;ACZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACZA;AACA;;AAEA;AACA;AACA;;;;;;;ACLA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;AClBA;AACA;;AAEA,6BAA6B,mCAAkC;;;;;;;ACH/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;ACtEuiB,wkBAAoB,C;;;;;;;;;;;ACAX,ilBAAoB,C;;;;;;;ACArkB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC7BA;AACA;;;;;;;;;;;;ACD6iB,6kBAAoB,C;;;;;;ACAjkB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB,EAAE;AAC5C,0BAA0B,gBAAgB;AAC1C,KAAK;AACL;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;;AAEA;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO,YAAY,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;;;;;;;ACfA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZsjB,slBAAoB,C;;;;;;;;;;;ACA1B,glBAAoB,C;;;;;;;;;;;ACAxB,4kBAAoB,C;;;;;;;;;;;ACAtB,0kBAAoB,C;;;;;;;;;;;ACAtB,wkBAAoB,C;;;;;;;;;;;ACAb,+kBAAoB,C;;;;;;;;;;;ACAnB,glBAAoB,C;;;;;;;;;;;ACAzB,2kBAAoB,C;;;;;;;;;;;ACAd,ilBAAoB,C;;;;;;;;;;;ACA7S,kVAAoB,C;;;;;;;;;;;ACA8G,+bAAoB,C;;;;;;;ACA9a;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B,cAAc;AACd;AACA,CAAC;AACD;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,UAAU;AACV,CAAC;;;;;;;AChBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,mEAAmE;AAC5F,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACbD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B;AAC7B,0BAA0B;AAC1B,0BAA0B;AAC1B,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8EAA8E,OAAO;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,qBAAqB;AACrB,0BAA0B;AAC1B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO,mCAAmC,gCAAgC,aAAa;AACvF,8BAA8B,mCAAmC,aAAa;AAC9E;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,qDAAqD;AACrD;AACA,kDAAkD,iBAAiB,EAAE;AACrE;AACA,wDAAwD,aAAa,EAAE,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;ACpFkkB,glBAAoB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAtlB;AACA;AACA,iDAAiD,gBAAgB;AACjE;AACA;;AAEA;AACA;AACA,C;;ACRA;AACA;AACA,C;;ACFA;AACA;AACA,C;;ACFA;AACA;AACA;AACA;AACA;AACA,C;;;ACLO,SAASA,YAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwC;AAAA;;AAC7C,MAAI,CAACD,QAAQC,MAAb,EAAqB;AACnBD,YAAQC,MAAR,GAAiB,EAAjB;AACD;;AACD,6BAAQA,MAAR,EAAeC,IAAf,2CAAuBD,MAAvB;AACD;AAEM,SAASE,eAAT,CAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AAC5C,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAME,OAAOJ,MAAME,CAAN,CAAb;;AACA,QAAIE,KAAKH,IAAL,KAAcA,IAAlB,EAAwB;AACtB,aAAOG,IAAP;AACD;AACF;;AACD,SAAO;AACLH,UAAM,EADD;AAELI,iBAAa;AAFR,GAAP;AAID,C;;;;;;;;;;AClBD;AACA;AAEe,SAASC,SAAT,CAAoBC,QAApB,EAA8B;AAC3CC,UAAQD,QAAR;AACA,MAAME,QAAQ,IAAI,sBAAJ,CAAQ;AACpBC,UAAM;AAAEH;AAAF;AADc,GAAR,CAAd;;AAIA,MAAI,KAAJ,EAAgB,EAKf;;AAED,SAAO;AACLI,cAAU;AACRC,WADQ,mBACC;AACP,eAAOH,MAAMF,QAAb;AACD,OAHO;AAIRM,mBAJQ,2BAIS;AAAA,kCACS,KAAKD,KADd,CACPE,OADO;AAAA,YACPA,OADO,oCACG,EADH;AAEf,YAAIC,UAAJ;AACA,YAAIC,WAAJ;;AACA,aAAK,IAAMf,IAAX,IAAmBa,OAAnB,EAA4B;AAC1B,cAAIb,SAAS,GAAb,EAAkB;AAChBe,0BAAcF,QAAQb,IAAR,CAAd;AACD,WAFD,MAEO,IAAI,KAAKgB,KAAL,CAAWhB,IAAX,CAAgBiB,OAAhB,CAAwBjB,IAAxB,MAAkC,CAAtC,EAAyC;AAC9Cc,yBAAaD,QAAQb,IAAR,CAAb;AACD;AACF;;AACD,eAAOc,cAAcC,WAAd,IAA6B,EAApC;AACD,OAhBO;AAiBRG,gBAjBQ,wBAiBM;AACZ,eAAO,KAAKN,aAAL,CAAmBO,KAAnB,IAA4B,KAAKR,KAAL,CAAWQ,KAAvC,IAAgD,EAAvD;AACD,OAnBO;AAoBRC,YApBQ,oBAoBE;AACR,YAAMjB,OAAO,KAAKa,KAAlB;AACA,YAAMK,YAAY,KAAKH,UAAvB;AACA,YAAMI,YAAYnB,KAAKC,WAAL,CAAiBmB,IAAjB,GAAwB,IAAxB,GAChBpB,KAAKC,WAAL,CAAiBe,KAAjB,IAA0B;AAC1BhB,aAAKgB,KAFW,CAEL;AAFb;AAIA,eAAOE,YACHC,YACGA,YAAY,KAAZ,GAAoBD,SADvB,GAEEA,SAHC,GAIHC,aAAa,UAJjB;AAKD,OAhCO;AAiCRE,kBAjCQ,0BAiCQ;AACd;AACA,YAAI,KAAKR,KAAL,CAAWZ,WAAX,CAAuBqB,IAA3B,EAAiC;AAC/B,cAAMC,kBAAkB,KAAKV,KAAL,CAAWZ,WAAX,CAAuBqB,IAAvB,CAA4BE,MAA5B,CAAmC;AAAA,mBAAQC,KAAKC,IAAL,KAAc,aAAtB;AAAA,WAAnC,EAAwE,CAAxE,CAAxB;AACA,cAAIH,eAAJ,EAAqB,OAAOA,gBAAgBI,OAAvB;AACtB;;AACD,eAAO,KAAKd,KAAL,CAAWZ,WAAX,CAAuB2B,WAAvB,IAAsC,KAAKnB,aAAL,CAAmBmB,WAAzD,IAAwE,KAAKpB,KAAL,CAAWoB,WAAnF,IAAkG,EAAzG;AACD,OAxCO;AAyCRC,WAzCQ,mBAyCC;AACP,eAAO,KAAKhB,KAAL,CAAWZ,WAAX,CAAuB6B,IAAvB,IAA+B,KAAKrB,aAAL,CAAmBqB,IAAlD,IAA0D,OAAjE;AACD,OA3CO;AA4CRC,iBA5CQ,yBA4CO;AACb,eAAO,KAAKtB,aAAL,CAAmBZ,IAAnB,IAA2B,GAAlC;AACD,OA9CO;AA+CRmC,wBA/CQ,gCA+Cc;AACpB,eAAO,CAAC,KAAKxB,KAAL,CAAWyB,WAAX,CAAuBvB,OAAvB,IAAkC,EAAnC,EAAuC,KAAKqB,WAA5C,KAA4D,EAAnE;AACD,OAjDO;AAkDRlB,WAlDQ,mBAkDC;AACP,eAAO,eAAAlB,CACL,KAAKa,KAAL,CAAWZ,KADN,EAEL,KAAKsC,MAAL,CAAYrC,IAFP,CAAP;AAID;AAvDO;AADL,GAAP;AA2DD;;AAED,SAASO,OAAT,CAAkBD,QAAlB,EAA4B;AAC1BA,WAASP,KAAT,CAAeuC,OAAf,CAAuB,gBAAQ;AAC7B,QAAI,CAACnC,KAAKC,WAAV,EAAuB;AACrBD,WAAKC,WAAL,GAAmB,EAAnB;AACD;AACF,GAJD;;AAKA,MAAIE,SAASO,OAAb,EAAsB;AACpB0B,WAAOC,IAAP,CAAYlC,SAASO,OAArB,EAA8ByB,OAA9B,CAAsC,gBAAQ;AAC5ChC,eAASO,OAAT,CAAiBb,IAAjB,EAAuBA,IAAvB,GAA8BA,IAA9B;AACD,KAFD;AAGD;;AACDuC,SAAOE,MAAP,CAAcnC,QAAd;AACD,C;;ACzFD;AACA;AACA,IAAMoC,QAAQ;AACZC,yBAAuB;AADX,CAAd;AAIA,8CAAeD,KAAf,E;;ACNA,ICAA,0CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,wDAAwD,yDAAyD,sCAAsC,IAAI,oCAAoC,8EAA8E,OAAO,yBAAyB,KAAK,oCAAoC,6BAA6B,WAAW,4CAA4C,cAAc,+IAA+I,gBAAgB,yDAAyD,OAAO,kCAAkC,0BAA0B,WAAW,yCAAyC,cAAc,4CAA4C,OAAO,iCAAiC;AACn9B;;;;;;;;;;AEDA,ICAA,wCDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,mBAAmB,igBAAigB,mCAAmC,uBAAuB,qKAAqK,8IAA8I,2CAA2C,OAAO,aAAa;AAC1iC,ICAA,iDDAA;;;;;;AEDA,ICAA,2CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,qDAAqD,8BAA8B,iCAAiC,0CAA0C,uCAAuC,6KAA6K;AAC3c,ICAA,oDDAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEDO,IAAME,SAAS,MAAf;AACA,IAAMC,QAAQ,cAAd;AACA,IAAMC,gBAAgB,KAAtB;AACA,IAAMC,aAAa,yBAAnB;AAEA,SAASC,SAAT,CAAoBhD,IAApB,EAA0B;AAC/B,SAAOiD,UAAUjD,IAAV,EACJkD,OADI,CACIN,MADJ,EACY,EADZ,EAEJM,OAFI,CAEIL,KAFJ,EAEW,EAFX,CAAP;AAGD;AAEM,SAASM,OAAT,CAAkBnD,IAAlB,EAAwB;AAC7B,MAAMoD,QAAQpD,KAAKoD,KAAL,CAAWR,MAAX,CAAd;;AACA,MAAIQ,KAAJ,EAAW;AACT,WAAOA,MAAM,CAAN,CAAP;AACD;AACF;AAEM,SAASC,UAAT,CAAqBrD,IAArB,EAA2B;AAChC,SAAO+C,WAAWO,IAAX,CAAgBtD,IAAhB,CAAP;AACD;AAEM,SAASuD,QAAT,CAAmBvD,IAAnB,EAAyB;AAC9B,SAAO,WAAWsD,IAAX,CAAgBtD,IAAhB,CAAP;AACD;AAEM,SAASwD,KAAT,CAAgBxD,IAAhB,EAAsB;AAC3B,SAAO,QAAQsD,IAAR,CAAatD,IAAb,CAAP;AACD;AAEM,SAASyD,SAAT,CAAoBzD,IAApB,EAA0B;AAC/B,MAAIqD,WAAWrD,IAAX,CAAJ,EAAsB;AACpB,WAAOA,IAAP;AACD;;AACD,MAAM0D,YAAY1D,KAAKoD,KAAL,CAAWR,MAAX,CAAlB;AACA,MAAMe,OAAOD,YAAYA,UAAU,CAAV,CAAZ,GAA2B,EAAxC;AACA,MAAME,aAAaZ,UAAUhD,IAAV,CAAnB;;AAEA,MAAI8C,cAAcQ,IAAd,CAAmBM,UAAnB,CAAJ,EAAoC;AAClC,WAAO5D,IAAP;AACD;;AACD,SAAO4D,aAAa,OAAb,GAAuBD,IAA9B;AACD;AAEM,SAAS,aAAT,CAAmBE,KAAnB,EAA0B7D,IAA1B,EAAgC;AACrC,MAAM8D,YAAYD,MAAMF,IAAxB;AACA,MAAMI,WAAWZ,QAAQnD,IAAR,CAAjB;;AACA,MAAI+D,YAAYD,cAAcC,QAA9B,EAAwC;AACtC,WAAO,KAAP;AACD;;AACD,MAAMC,YAAYhB,UAAUa,MAAM7D,IAAhB,CAAlB;AACA,MAAMiE,WAAWjB,UAAUhD,IAAV,CAAjB;AACA,SAAOgE,cAAcC,QAArB;AACD;AAEM,SAASC,WAAT,CAAsBnE,KAAtB,EAA6BoE,OAA7B,EAAsCC,IAAtC,EAA4C;AACjD,MAAIA,IAAJ,EAAU;AACRD,cAAUE,YAAYF,OAAZ,EAAqBC,IAArB,CAAV;AACD;;AACD,MAAMpE,OAAOgD,UAAUmB,OAAV,CAAb;;AACA,OAAK,IAAIlE,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAI+C,UAAUjD,MAAME,CAAN,EAASD,IAAnB,MAA6BA,IAAjC,EAAuC;AACrC,aAAOuC,OAAO+B,MAAP,CAAc,EAAd,EAAkBvE,MAAME,CAAN,CAAlB,EAA4B;AACjCsE,cAAM,MAD2B;AAEjCvE,cAAMyD,UAAUU,OAAV;AAF2B,OAA5B,CAAP;AAID;AACF;;AACDK,UAAQC,KAAR,gEAAqEN,OAArE;AACA,SAAO,EAAP;AACD;;AAED,SAASE,WAAT,CAAsBK,QAAtB,EAAgCN,IAAhC,EAAsCO,MAAtC,EAA8C;AAC5C,MAAMC,YAAYF,SAASG,MAAT,CAAgB,CAAhB,CAAlB;;AACA,MAAID,cAAc,GAAlB,EAAuB;AACrB,WAAOF,QAAP;AACD;;AAED,MAAIE,cAAc,GAAd,IAAqBA,cAAc,GAAvC,EAA4C;AAC1C,WAAOR,OAAOM,QAAd;AACD;;AAED,MAAMI,QAAQV,KAAKW,KAAL,CAAW,GAAX,CAAd,CAV4C,CAY5C;AACA;AACA;;AACA,MAAI,CAACJ,MAAD,IAAW,CAACG,MAAMA,MAAM5E,MAAN,GAAe,CAArB,CAAhB,EAAyC;AACvC4E,UAAME,GAAN;AACD,GAjB2C,CAmB5C;;;AACA,MAAMC,WAAWP,SAASxB,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,EAA4B6B,KAA5B,CAAkC,GAAlC,CAAjB;;AACA,OAAK,IAAI9E,IAAI,CAAb,EAAgBA,IAAIgF,SAAS/E,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,QAAMiF,UAAUD,SAAShF,CAAT,CAAhB;;AACA,QAAIiF,YAAY,IAAhB,EAAsB;AACpBJ,YAAME,GAAN;AACD,KAFD,MAEO,IAAIE,YAAY,GAAhB,EAAqB;AAC1BJ,YAAMjF,IAAN,CAAWqF,OAAX;AACD;AACF,GA5B2C,CA8B5C;;;AACA,MAAIJ,MAAM,CAAN,MAAa,EAAjB,EAAqB;AACnBA,UAAMK,OAAN,CAAc,EAAd;AACD;;AAED,SAAOL,MAAMM,IAAN,CAAW,GAAX,CAAP;AACD;;AAEM,SAASC,mBAAT,CAA8BlF,IAA9B,EAAoC0D,KAApC,EAA2CyB,IAA3C,EAAiDC,UAAjD,EAA6D;AAAA,MAC1DxF,KAD0D,GACnCuF,IADmC,CAC1DvF,KAD0D;AAAA,MACnDqC,WADmD,GACnCkD,IADmC,CACnDlD,WADmD;AAGlE,MAAMoD,eAAeD,cAAcnD,YAAYvB,OAA1B,GACjBuB,YAAYvB,OAAZ,CAAoB0E,UAApB,KAAmCnD,WADlB,GAEjBA,WAFJ;AAIA,MAAMqD,oBAAoBtF,KAAKC,WAAL,CAAiBsF,OAAjB,IAA4BF,aAAaE,OAAzC,IAAoDtD,YAAYsD,OAA1F;;AACA,MAAID,sBAAsB,MAA1B,EAAkC;AAChC,WAAOE,eAAexF,IAAf,CAAP;AACD;;AAED,MAAMyF,gBAAgBJ,aAAaE,OAAb,IAAwBtD,YAAYsD,OAA1D;;AACA,MAAI,CAACE,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD,GAFD,MAEO;AAAA,gCACoBC,sBAAsBhC,KAAtB,EAA6B+B,aAA7B,CADpB;AAAA,QACGxB,IADH,yBACGA,IADH;AAAA,QACS0B,MADT,yBACSA,MADT;;AAEL,WAAOA,SACHA,OAAOC,GAAP,CAAW;AAAA,aAAQC,YAAYpE,IAAZ,EAAkB7B,KAAlB,EAAyBqE,IAAzB,CAAR;AAAA,KAAX,CADG,GAEH,EAFJ;AAGD;AACF;;AAED,SAASuB,cAAT,CAAyBxF,IAAzB,EAA+B;AAC7B,MAAM8F,UAAUC,aAAa/F,KAAK8F,OAAL,IAAgB,EAA7B,CAAhB;AACA,SAAO,CAAC;AACN1B,UAAM,OADA;AAEN4B,iBAAa,KAFP;AAGNhF,WAAOhB,KAAKgB,KAHN;AAINiF,cAAUH,QAAQF,GAAR,CAAY;AAAA,aAAM;AAC1BxB,cAAM,MADoB;AAE1BpD,eAAOkF,EAAElF,KAFiB;AAG1BmF,kBAAUnG,KAAKH,IAHW;AAI1BA,cAAMG,KAAKH,IAAL,GAAY,GAAZ,GAAkBqG,EAAEE,IAJA;AAK1BH,kBAAUC,EAAED,QAAF,IAAc;AALE,OAAN;AAAA,KAAZ;AAJJ,GAAD,CAAP;AAYD;;AAEM,SAASF,YAAT,CAAuBD,OAAvB,EAAgC;AACrC;AACAA,YAAUA,QAAQF,GAAR,CAAY;AAAA,WAAKxD,OAAO+B,MAAP,CAAc,EAAd,EAAkB+B,CAAlB,CAAL;AAAA,GAAZ,CAAV;AACA,MAAIG,MAAJ;AACAP,UAAQ3D,OAAR,CAAgB,aAAK;AACnB,QAAI+D,EAAEI,KAAF,KAAY,CAAhB,EAAmB;AACjBD,eAASH,CAAT;AACD,KAFD,MAEO,IAAIG,MAAJ,EAAY;AACjB,OAACA,OAAOJ,QAAP,KAAoBI,OAAOJ,QAAP,GAAkB,EAAtC,CAAD,EAA4CvG,IAA5C,CAAiDwG,CAAjD;AACD;AACF,GAND;AAOA,SAAOJ,QAAQtE,MAAR,CAAe;AAAA,WAAK0E,EAAEI,KAAF,KAAY,CAAjB;AAAA,GAAf,CAAP;AACD;AAEM,SAASC,kBAAT,CAA6BC,QAA7B,EAAuC;AAC5C,SAAOpE,OAAO+B,MAAP,CAAcqC,QAAd,EAAwB;AAC7BpC,UAAMoC,SAASC,KAAT,IAAkBD,SAASC,KAAT,CAAe1G,MAAjC,GAA0C,OAA1C,GAAoD;AAD7B,GAAxB,CAAP;AAGD;AAEM,SAAS2F,qBAAT,CAAgChC,KAAhC,EAAuCiC,MAAvC,EAA+C;AACpD,MAAIe,MAAMC,OAAN,CAAchB,MAAd,CAAJ,EAA2B;AACzB,WAAO;AACL1B,YAAM,GADD;AAEL0B,cAAQA;AAFH,KAAP;AAID;;AACD,OAAK,IAAM1B,IAAX,IAAmB0B,MAAnB,EAA2B;AACzB,QAAIiB,kBAAkBlD,MAAM7D,IAAxB,EAA8BiB,OAA9B,CAAsCmD,IAAtC,MAAgD,CAApD,EAAuD;AACrD,aAAO;AACLA,kBADK;AAEL0B,gBAAQA,OAAO1B,IAAP;AAFH,OAAP;AAID;AACF;;AACD,SAAO,EAAP;AACD;;AAED,SAAS2C,iBAAT,CAA4B/G,IAA5B,EAAkC;AAChC,SAAO,eAAesD,IAAf,CAAoBtD,IAApB,IACHA,IADG,GAEHA,OAAO,GAFX;AAGD;;AAED,SAASgG,WAAT,CAAsBpE,IAAtB,EAA4B7B,KAA5B,EAAmCqE,IAAnC,EAAyC4C,QAAzC,EAAmD;AACjD,MAAI,OAAOpF,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOsC,YAAYnE,KAAZ,EAAmB6B,IAAnB,EAAyBwC,IAAzB,CAAP;AACD,GAFD,MAEO,IAAIyC,MAAMC,OAAN,CAAclF,IAAd,CAAJ,EAAyB;AAC9B,WAAOW,OAAO+B,MAAP,CAAcJ,YAAYnE,KAAZ,EAAmB6B,KAAK,CAAL,CAAnB,EAA4BwC,IAA5B,CAAd,EAAiD;AACtDjD,aAAOS,KAAK,CAAL;AAD+C,KAAjD,CAAP;AAGD,GAJM,MAIA;AACL,QAAIoF,QAAJ,EAAc;AACZxC,cAAQC,KAAR,CACE,yDACA,6CAFF;AAID;;AACD,QAAM2B,WAAWxE,KAAKwE,QAAL,IAAiB,EAAlC;AACA,WAAO;AACL7B,YAAM,OADD;AAELpD,aAAOS,KAAKT,KAFP;AAGLiF,gBAAUA,SAASL,GAAT,CAAa;AAAA,eAASC,YAAYiB,KAAZ,EAAmBlH,KAAnB,EAA0BqE,IAA1B,EAAgC,IAAhC,CAAT;AAAA,OAAb,CAHL;AAIL+B,mBAAavE,KAAKuE,WAAL,KAAqB;AAJ7B,KAAP;AAMD;AACF,C;;;;;;;ACvND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,oEAAe;AACbe,SAAO;AACLtF,UAAM;AACJuF,gBAAU;AADN;AADD,GADM;AAObzG,YAAU;AACR0G,QADQ,kBACA;AACN,aAAO,SAAA3D,CAAU,KAAK7B,IAAL,CAAUwF,IAApB,CAAP;AACD,KAHO;AAKRC,SALQ,mBAKC;AAAA;;AACP,UAAI,KAAK1G,KAAL,CAAWE,OAAf,EAAwB;AACtB,eAAO0B,OAAOC,IAAP,CAAY,KAAK7B,KAAL,CAAWE,OAAvB,EAAgCyG,IAAhC,CAAqC;AAAA,iBAAYC,aAAa,MAAKH,IAA9B;AAAA,SAArC,CAAP;AACD;;AACD,aAAO,KAAKA,IAAL,KAAc,GAArB;AACD;AAVO,GAPG;AAoBbI,WAAS;AACPnE,gBAAA,UADO;AAEPE,cAAA,QAFO;AAGPC,WAAA,KAAAA;AAHO;AApBI,CAAf,E;;ACtByS,oHAAoB,C;;;;;ACA3R;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6D;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,iEAAe;AACbiE,cAAY;AAAEC,aAAA,OAAAA;AAAF,GADC;AAGbhH,YAAU;AACRD,QADQ,kBACA;AACN,aAAO,KAAKO,KAAL,CAAWZ,WAAlB;AACD,KAHO;AAKRuH,cALQ,wBAKM;AACZ,aAAO;AACLP,cAAM,KAAK3G,IAAL,CAAUkH,UADX;AAELC,cAAM,KAAKnH,IAAL,CAAUoH;AAFX,OAAP;AAID;AAVO;AAHG,CAAf,E;;ACrDsS,8GAAoB,C;;ACAxR;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+D;;ACxBA,ICAA,0CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,oBAAoB,qBAAqB,sBAAsB,IAAI,kCAAkC,8BAA8B,sCAAsC,+BAA+B,sBAAsB,yCAAyC,0BAA0B,sEAAsE,mDAAmD,8CAA8C,0CAA0C;AAC3kB;AACA,KAAK,oEAAoE,OAAO,uBAAuB,qGAAqG,uBAAuB;AACnO,ICAA,mDDAA;;;;;;AEHA,ICAA,iDDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,iCAAiC,yBAAyB,8BAA8B;AAClM,ICAA,0DDAA;;;;;;AEDkC;AAClC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iF;;ACvBA,+CAAe,EAAf,E;;ACAA,ICAA,6CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,yBAAyB,+IAA+I,yBAAyB,oEAAoE,gCAAgC,qDAAqD,2CAA2C,gCAAgC,iPAAiP;AAChwB,ICAA,sDDAA;;;;;;;;;;;;AEDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sEAAe;AACbpH,MADa,kBACL;AACN,WAAO;AACLqH,aAAO,EADF;AAELC,eAAS,KAFJ;AAGLC,kBAAY;AAHP,KAAP;AAKD,GAPY;AASbtH,YAAU;AACRuH,mBADQ,6BACW;AACjB,aACE,KAAKF,OAAL,IACA,KAAKG,WADL,IAEA,KAAKA,WAAL,CAAiBhI,MAHnB;AAKD,KAPO;AASRgI,eATQ,yBASO;AACb,UAAMJ,QAAQ,KAAKA,KAAL,CAAWK,IAAX,GAAkBC,WAAlB,EAAd;;AACA,UAAI,CAACN,KAAL,EAAY;AACV;AACD;;AAJY,wBAMkB,KAAKnH,KANvB;AAAA,UAMLZ,KANK,eAMLA,KANK;AAAA,UAMEqC,WANF,eAMEA,WANF;AAOb,UAAMiG,MAAMjG,YAAYkG,oBAAZ,IAAoC,CAAhD;AACA,UAAM/C,aAAa,KAAKrD,WAAxB;;AACA,UAAMqG,UAAU,SAAVA,OAAU;AAAA,eACd3G,KAAKT,KAAL,IACAS,KAAKT,KAAL,CAAWiH,WAAX,GAAyBnH,OAAzB,CAAiC6G,KAAjC,IAA0C,CAAC,CAF7B;AAAA,OAAhB;;AAIA,UAAMU,MAAM,EAAZ;;AACA,WAAK,IAAIvI,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,YAAIuI,IAAItI,MAAJ,IAAcmI,GAAlB,EAAuB;AACvB,YAAMI,IAAI1I,MAAME,CAAN,CAAV,CAFqC,CAGrC;;AACA,YAAI,KAAKyI,iBAAL,CAAuBD,CAAvB,MAA8BlD,UAAlC,EAA8C;AAC5C;AACD;;AACD,YAAIgD,QAAQE,CAAR,CAAJ,EAAgB;AACdD,cAAI3I,IAAJ,CAAS4I,CAAT;AACD,SAFD,MAEO,IAAIA,EAAExC,OAAN,EAAe;AACpB,eAAK,IAAI0C,IAAI,CAAb,EAAgBA,IAAIF,EAAExC,OAAF,CAAU/F,MAA9B,EAAsCyI,GAAtC,EAA2C;AACzC,gBAAIH,IAAItI,MAAJ,IAAcmI,GAAlB,EAAuB;AACvB,gBAAMhC,IAAIoC,EAAExC,OAAF,CAAU0C,CAAV,CAAV;;AACA,gBAAIJ,QAAQlC,CAAR,CAAJ,EAAgB;AACdmC,kBAAI3I,IAAJ,CAAS0C,OAAO+B,MAAP,CAAc,EAAd,EAAkBmE,CAAlB,EAAqB;AAC5BzI,sBAAMyI,EAAEzI,IAAF,GAAS,GAAT,GAAeqG,EAAEE,IADK;AAE5BqC,wBAAQvC;AAFoB,eAArB,CAAT;AAID;AACF;AACF;AACF;;AACD,aAAOmC,GAAP;AACD,KA9CO;AAgDR;AACAK,cAjDQ,wBAiDM;AACZ,UAAMC,WAAW,CAAC,KAAKnI,KAAL,CAAWyB,WAAX,CAAuB2G,GAAvB,IAA8B,EAA/B,EAAmC7I,MAApD;AACA,UAAM8I,OAAO,KAAKrI,KAAL,CAAWqI,IAAX,GAAkB,CAAlB,GAAsB,CAAnC;AACA,aAAOF,WAAWE,IAAX,IAAmB,CAA1B;AACD;AArDO,GATG;AAiEbxB,WAAS;AACPkB,qBADO,6BACYvI,IADZ,EACkB;AACvB,WAAK,IAAMoF,UAAX,IAAyB,KAAK5E,KAAL,CAAWE,OAAX,IAAsB,EAA/C,EAAmD;AACjD,YAAI0E,eAAe,GAAf,IAAsBpF,KAAKH,IAAL,CAAUiB,OAAV,CAAkBsE,UAAlB,MAAkC,CAA5D,EAA+D;AAC7D,iBAAOA,UAAP;AACD;AACF;;AACD,aAAO,GAAP;AACD,KARM;AAUP0D,QAVO,kBAUC;AACN,UAAI,KAAKhB,eAAT,EAA0B;AACxB,YAAI,KAAKD,UAAL,GAAkB,CAAtB,EAAyB;AACvB,eAAKA,UAAL;AACD,SAFD,MAEO;AACL,eAAKA,UAAL,GAAkB,KAAKE,WAAL,CAAiBhI,MAAjB,GAA0B,CAA5C;AACD;AACF;AACF,KAlBM;AAoBPgJ,UApBO,oBAoBG;AACR,UAAI,KAAKjB,eAAT,EAA0B;AACxB,YAAI,KAAKD,UAAL,GAAkB,KAAKE,WAAL,CAAiBhI,MAAjB,GAA0B,CAAhD,EAAmD;AACjD,eAAK8H,UAAL;AACD,SAFD,MAEO;AACL,eAAKA,UAAL,GAAkB,CAAlB;AACD;AACF;AACF,KA5BM;AA8BPmB,MA9BO,cA8BHlJ,CA9BG,EA8BA;AACL,UAAI,CAAC,KAAKgI,eAAV,EAA2B;AACzB;AACD;;AACD,WAAKmB,OAAL,CAAavJ,IAAb,CAAkB,KAAKqI,WAAL,CAAiBjI,CAAjB,EAAoBD,IAAtC;AACA,WAAK8H,KAAL,GAAa,EAAb;AACA,WAAKE,UAAL,GAAkB,CAAlB;AACD,KArCM;AAuCPqB,SAvCO,iBAuCApJ,CAvCA,EAuCG;AACR,WAAK+H,UAAL,GAAkB/H,CAAlB;AACD,KAzCM;AA2CPqJ,WA3CO,qBA2CI;AACT,WAAKtB,UAAL,GAAkB,CAAC,CAAnB;AACD;AA7CM;AAjEI,CAAf,E;;ACtC2S,wHAAoB,C;;ACA7R;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yE;;ACxBA,ICAA,4CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,wDAAwD,wBAAwB,wCAAwC,oGAAoG,OAAO,aAAa,gBAAgB,OAAO,aAAa,MAAM;AACnX,ICAA,qDDAA;;;;;;;;;AEDA,ICAA,gDDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,kBAAkB,kOAAkO,aAAa,gEAAgE,6BAA6B,iDAAiD,gBAAgB,sDAAsD,8HAA8H,uCAAuC,+CAA+C,gBAAgB,qDAAqD,gBAAgB,OAAO,qBAAqB,MAAM,iBAAiB,OAAO,gBAAgB,MAAM;AAC99B,ICAA,yDDAA;;;;;;AEDA,ICAA,sDDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,wBAAwB,OAAO,kBAAkB,KAAK,kFAAkF;AACjO,ICAA,+DDAA;;;;;;AEDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,+EAAe;AACbnG,QAAM,oBADO;AAGb2F,WAAS;AACP+B,aADO,qBACI3C,KADJ,EACW;AAChB;AACAA,YAAM4C,KAAN,CAAYC,MAAZ,GAAqB7C,MAAM8C,YAAN,GAAqB,IAA1C;AACD,KAJM;AAMPC,eANO,uBAMM/C,KANN,EAMa;AAClBA,YAAM4C,KAAN,CAAYC,MAAZ,GAAqB,EAArB;AACD;AARM;AAHI,CAAf,E;;ACZoT,0IAAoB,C;;ACAtS;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2F;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,yEAAe;AACbhC,cAAY;AAAEC,aAAA,OAAF;AAAWkC,wBAAA,kBAAAA;AAAX,GADC;AAGbnJ,MAHa,kBAGL;AACN,WAAO;AACLoJ,YAAM;AADD,KAAP;AAGD,GAPY;AASb3C,SAAO;AACLtF,UAAM;AACJuF,gBAAU;AADN;AADD,GATM;AAebK,WAAS;AACPsC,UADO,oBACG;AACR,WAAKD,IAAL,GAAY,CAAC,KAAKA,IAAlB;AACD;AAHM;AAfI,CAAf,E;;ACvD8S,8HAAoB,C;;ACAhS;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+E;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,qEAAe;AACbpC,cAAY;AAAEC,aAAA,OAAF;AAAWqC,kBAAA,YAAAA;AAAX,GADC;AAGbrJ,YAAU;AACRsJ,WADQ,qBACG;AACT,aAAO,KAAK7H,kBAAL,CAAwB4G,GAAxB,IAA+B,KAAKpI,KAAL,CAAWyB,WAAX,CAAuB2G,GAAtD,IAA6D,EAApE;AACD,KAHO;AAKRA,OALQ,iBAKD;AAAA;;AAAA,UACGlI,OADH,GACe,KAAKF,KADpB,CACGE,OADH;;AAEL,UAAIA,WAAW0B,OAAOC,IAAP,CAAY3B,OAAZ,EAAqBX,MAArB,GAA8B,CAA7C,EAAgD;AAC9C,YAAM+J,cAAc,KAAKjJ,KAAL,CAAWhB,IAA/B;AACA,YAAMkK,SAAS,KAAKd,OAAL,CAAazJ,OAAb,CAAqBuK,MAApC;AACA,YAAMC,eAAe,KAAKxJ,KAAL,CAAWyB,WAAX,CAAuBvB,OAAvB,IAAkC,EAAvD;AACA,YAAMuJ,mBAAmB;AACvBxC,gBAAM,KAAKzF,kBAAL,CAAwBkI,UAAxB,IAAsC,WADrB;AAEvBzD,iBAAOrE,OAAOC,IAAP,CAAY3B,OAAZ,EAAqBkF,GAArB,CAAyB,gBAAQ;AACtC,gBAAMuE,SAASzJ,QAAQb,IAAR,CAAf;AACA,gBAAM4H,OAAOuC,aAAanK,IAAb,KAAsBmK,aAAanK,IAAb,EAAmBuK,KAAzC,IAAkDD,OAAOrI,IAAtE;AACA,gBAAImF,IAAJ,CAHsC,CAItC;;AACA,gBAAIkD,OAAOrI,IAAP,KAAgB,MAAKD,KAAzB,EAAgC;AAC9BoF,qBAAO6C,WAAP;AACD,aAFD,MAEO;AACL;AACA7C,qBAAO6C,YAAY/G,OAAZ,CAAoB,MAAKtC,aAAL,CAAmBZ,IAAvC,EAA6CA,IAA7C,CAAP,CAFK,CAGL;;AACA,kBAAI,CAACkK,OAAO5C,IAAP,CAAY;AAAA,uBAASzD,MAAM7D,IAAN,KAAeoH,IAAxB;AAAA,eAAZ,CAAL,EAAgD;AAC9CA,uBAAOpH,IAAP;AACD;AACF;;AACD,mBAAO;AAAE4H,wBAAF;AAAQR;AAAR,aAAP;AACD,WAhBM;AAFgB,SAAzB;AAoBA,kCAAW,KAAK4C,OAAhB,UAAyBI,gBAAzB;AACD;;AACD,aAAO,KAAKJ,OAAZ;AACD,KAlCO;AAoCRQ,aApCQ,uBAoCK;AACX,aAAO,CAAC,KAAKzB,GAAL,IAAY,EAAb,EAAiBhD,GAAjB,CAAqB,gBAAQ;AAClC,eAAOxD,OAAO+B,MAAP,CAAc,kBAAAoC,CAAmBU,IAAnB,CAAd,EAAwC;AAC7CR,iBAAO,CAACQ,KAAKR,KAAL,IAAc,EAAf,EAAmBb,GAAnB,CAAuB,kBAAvB;AADsC,SAAxC,CAAP;AAGD,OAJM,CAAP;AAKD,KA1CO;AA4CR0E,YA5CQ,sBA4CI;AAAA,UACFzB,IADE,GACO,KAAKrI,KAAL,CAAWyB,WADlB,CACF4G,IADE;;AAEV,UAAIA,IAAJ,EAAU;AACR,eAAO,WAAW1F,IAAX,CAAgB0F,IAAhB,IACHA,IADG,gCAEmBA,IAFnB,CAAP;AAGD;AACF,KAnDO;AAqDR0B,aArDQ,uBAqDK;AACX,UAAI,CAAC,KAAKD,QAAV,EAAoB;;AACpB,UAAI,KAAK9J,KAAL,CAAWyB,WAAX,CAAuBsI,SAA3B,EAAsC;AACpC,eAAO,KAAK/J,KAAL,CAAWyB,WAAX,CAAuBsI,SAA9B;AACD;;AAED,UAAMC,WAAW,KAAKF,QAAL,CAAcrH,KAAd,CAAoB,mBAApB,EAAyC,CAAzC,CAAjB;AACA,UAAMwH,YAAY,CAAC,QAAD,EAAW,QAAX,EAAqB,WAArB,CAAlB;;AACA,WAAK,IAAI3K,IAAI,CAAb,EAAgBA,IAAI2K,UAAU1K,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,YAAM4K,WAAWD,UAAU3K,CAAV,CAAjB;;AACA,YAAI,IAAI6K,MAAJ,CAAWD,QAAX,EAAqB,GAArB,EAA0BvH,IAA1B,CAA+BqH,QAA/B,CAAJ,EAA8C;AAC5C,iBAAOE,QAAP;AACD;AACF;;AAED,aAAO,QAAP;AACD;AArEO;AAHG,CAAf,E;;ACxC0S,sHAAoB,C;;ACA5R;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uE;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,mEAAe;AACbpD,cAAY;AAAEsD,mBAAA,aAAF;AAAiBC,cAAA,QAAjB;AAA2BC,eAAA,SAA3B;AAAsCC,sBAAA,UAAAA;AAAtC,GADC;AAGbzK,MAHa,kBAGL;AACN,WAAO;AACL0K,yBAAmB;AADd,KAAP;AAGD,GAPY;AASbC,SATa,qBASF;AAAA;;AACT,QAAMC,4BAA4B,GAAlC,CADS,CAC6B;;AACtC,QAAMC,0BAA0BC,SAASC,IAAI,KAAKC,GAAT,EAAc,aAAd,CAAT,IAAyCF,SAASC,IAAI,KAAKC,GAAT,EAAc,cAAd,CAAT,CAAzE;;AACA,QAAMC,uBAAuB,SAAvBA,oBAAuB,GAAM;AACjC,UAAIC,SAASC,eAAT,CAAyBC,WAAzB,GAAuCR,yBAA3C,EAAsE;AACpE,cAAKF,iBAAL,GAAyB,IAAzB;AACD,OAFD,MAEO;AACL,cAAKA,iBAAL,GAAyB,MAAKM,GAAL,CAASK,WAAT,GAAuBR,uBAAvB,IACtB,MAAKS,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAoBF,WAA3C,IAA0D,CADpC,CAAzB;AAED;AACF,KAPD;;AAQAJ;AACAO,WAAOC,gBAAP,CAAwB,QAAxB,EAAkCR,oBAAlC,EAAwD,KAAxD;AACD,GAtBY;AAwBbhL,YAAU;AACRyL,WADQ,qBACG;AACT,aAAO,KAAKhK,kBAAL,CAAwBgK,OAAxB,IAAmC,KAAKxL,KAAL,CAAWyB,WAAX,CAAuB+J,OAA1D,IAAqE,EAA5E;AACD,KAHO;AAKRC,mBALQ,6BAKW;AACjB,aAAO,KAAKD,OAAL,IAAgB,KAAKA,OAAL,CAAaE,MAA7B,IAAuC,KAAKF,OAAL,CAAaG,SAA3D;AACD;AAPO;AAxBG,CAAf;;AAmCA,SAASd,GAAT,CAAce,EAAd,EAAkBC,QAAlB,EAA4B;AAC1B;AACA,MAAMC,MAAMF,GAAGG,aAAH,CAAiBC,WAA7B,CAF0B,CAG1B;;AACA,SAAOF,IAAIG,gBAAJ,CAAqBL,EAArB,EAAyB,IAAzB,EAA+BC,QAA/B,CAAP;AACD,C;;ACpFuS,kHAAoB,C;;ACA1R;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mE;;ACxBA,ICAA,wCDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,mBAAmB,gDAAgD,OAAO,gBAAgB,4zBAA4zB,0BAA0B,oBAAoB,gNAAgN,OAAO,oBAAoB;AACzxC,ICAA,iDDAA;;;;;;;;;;AEDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,iEAAe;AACbtF,SAAO,CAAC,cAAD,CADM;AAGbxG,YAAU;AACRmM,eADQ,yBACO;AACb,UAAI,KAAK7L,KAAL,CAAW6L,WAAf,EAA4B;AAC1B,eAAO,IAAIC,IAAJ,CAAS,KAAK9L,KAAL,CAAW6L,WAApB,EAAiCE,cAAjC,CAAgD,KAAK/K,KAArD,CAAP;AACD;AACF,KALO;AAORgL,mBAPQ,6BAOW;AACjB,UAAI,OAAO,KAAK7K,kBAAL,CAAwB0K,WAA/B,KAA+C,QAAnD,EAA6D;AAC3D,eAAO,KAAK1K,kBAAL,CAAwB0K,WAA/B;AACD;;AACD,UAAI,OAAO,KAAKlM,KAAL,CAAWyB,WAAX,CAAuByK,WAA9B,KAA8C,QAAlD,EAA4D;AAC1D,eAAO,KAAKlM,KAAL,CAAWyB,WAAX,CAAuByK,WAA9B;AACD;;AACD,aAAO,cAAP;AACD,KAfO;AAiBRI,QAjBQ,kBAiBA;AACN,UAAMA,OAAO,KAAKjM,KAAL,CAAWZ,WAAX,CAAuB6M,IAApC;;AACA,UAAIA,SAAS,KAAb,EAAoB;AAClB;AACD,OAFD,MAEO,IAAIA,IAAJ,EAAU;AACf,eAAO,WAAA/I,CAAY,KAAKvD,KAAL,CAAWZ,KAAvB,EAA8BkN,IAA9B,EAAoC,KAAK5K,MAAL,CAAYrC,IAAhD,CAAP;AACD,OAFM,MAEA;AACL,eAAOkN,YAAY,KAAKlM,KAAjB,EAAwB,KAAKmM,YAA7B,CAAP;AACD;AACF,KA1BO;AA4BRC,QA5BQ,kBA4BA;AACN,UAAMA,OAAO,KAAKpM,KAAL,CAAWZ,WAAX,CAAuBgN,IAApC;;AACA,UAAIA,SAAS,KAAb,EAAoB;AAClB;AACD,OAFD,MAEO,IAAIA,IAAJ,EAAU;AACf,eAAO,WAAAlJ,CAAY,KAAKvD,KAAL,CAAWZ,KAAvB,EAA8BqN,IAA9B,EAAoC,KAAK/K,MAAL,CAAYrC,IAAhD,CAAP;AACD,OAFM,MAEA;AACL,eAAOqN,YAAY,KAAKrM,KAAjB,EAAwB,KAAKmM,YAA7B,CAAP;AACD;AACF,KArCO;AAuCRG,YAvCQ,sBAuCI;AACV,UAAI,KAAKtM,KAAL,CAAWZ,WAAX,CAAuBkN,QAAvB,KAAoC,KAAxC,EAA+C;AAC7C;AACD;;AAHS,kCAUN,KAAK3M,KAAL,CAAWyB,WAVL;AAAA,UAKR4G,IALQ,yBAKRA,IALQ;AAAA,UAMRuE,SANQ,yBAMRA,SANQ;AAAA,yDAORC,OAPQ;AAAA,UAORA,OAPQ,uCAOE,EAPF;AAAA,yDAQRC,UARQ;AAAA,UAQRA,UARQ,uCAQK,QARL;AAAA,yDASRC,QATQ;AAAA,UASRA,QATQ,uCASG1E,IATH;AAYV,UAAIhJ,OAAO,SAAAgD,CAAU,KAAKhC,KAAL,CAAWhB,IAArB,CAAX;;AACA,UAAI,aAAA8C,CAAcQ,IAAd,CAAmBtD,IAAnB,CAAJ,EAA8B;AAC5BA,gBAAQ,WAAR;AACD,OAFD,MAEO;AACLA,gBAAQ,KAAR;AACD;;AACD,UAAI0N,YAAYH,SAAhB,EAA2B;AACzB,eAAO,KAAKI,cAAL,CAAoB3E,IAApB,EAA0B0E,QAA1B,EAAoCF,OAApC,EAA6CC,UAA7C,EAAyDzN,IAAzD,CAAP;AACD;AACF,KA5DO;AA8DR4N,gBA9DQ,0BA8DQ;AACd,aACE,KAAKzL,kBAAL,CAAwByL,YAAxB,IACA,KAAKjN,KAAL,CAAWyB,WAAX,CAAuBwL,YADvB,oBADF;AAKD;AApEO,GAHG;AA0EbpG,WAAS;AACPmG,kBADO,0BACS3E,IADT,EACe0E,QADf,EACyBF,OADzB,EACkCC,UADlC,EAC8CzN,IAD9C,EACoD;AACzD,UAAM6N,YAAY,eAAlB;;AACA,UAAIA,UAAUvK,IAAV,CAAe0F,IAAf,CAAJ,EAA0B;AACxB,YAAM5E,QAAO,UAAArB,CAAWO,IAAX,CAAgBoK,QAAhB,IACTA,QADS,GAET1E,IAFJ;;AAGA,eACE5E,MAAKlB,OAAL,CAAa,aAAb,EAA4B,EAA5B,eACKuK,UADL,KAEED,UAAU,MAAMA,QAAQtK,OAAR,CAAgB,aAAhB,EAA+B,EAA/B,CAAhB,GAAqD,EAFvD,IAGClD,IAHD,iCAIwByN,UAJxB,kCADF;AAOD;;AAED,UAAMrJ,OAAO,UAAArB,CAAWO,IAAX,CAAgBoK,QAAhB,IACTA,QADS,gCAEaA,QAFb,CAAb;AAIA,aACEtJ,KAAKlB,OAAL,CAAa,aAAb,EAA4B,EAA5B,oBACSuK,UADT,KAECD,UAAU,MAAMA,QAAQtK,OAAR,CAAgB,aAAhB,EAA+B,EAA/B,CAAhB,GAAqD,EAFtD,IAGAlD,IAJF;AAMD;AA1BM;AA1EI,CAAf;;AAwGA,SAASkN,WAAT,CAAsB/M,IAAtB,EAA4ByG,KAA5B,EAAmC;AACjC,SAAOkH,KAAK3N,IAAL,EAAWyG,KAAX,EAAkB,CAAC,CAAnB,CAAP;AACD;;AAED,SAASyG,WAAT,CAAsBlN,IAAtB,EAA4ByG,KAA5B,EAAmC;AACjC,SAAOkH,KAAK3N,IAAL,EAAWyG,KAAX,EAAkB,CAAlB,CAAP;AACD;;AAED,SAASkH,IAAT,CAAe3N,IAAf,EAAqByG,KAArB,EAA4BmH,MAA5B,EAAoC;AAClC,MAAMvF,MAAM,EAAZ;AACA5B,QAAMtE,OAAN,CAAc,gBAAQ;AACpB,QAAIV,KAAK2C,IAAL,KAAc,OAAlB,EAA2B;AACzBiE,UAAI3I,IAAJ,+BAAY+B,KAAKwE,QAAL,IAAiB,EAA7B;AACD,KAFD,MAEO;AACLoC,UAAI3I,IAAJ,CAAS+B,IAAT;AACD;AACF,GAND;;AAOA,OAAK,IAAI3B,IAAI,CAAb,EAAgBA,IAAIuI,IAAItI,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,QAAM+N,MAAMxF,IAAIvI,CAAJ,CAAZ;;AACA,QAAI+N,IAAIzJ,IAAJ,KAAa,MAAb,IAAuByJ,IAAIhO,IAAJ,KAAaG,KAAKH,IAA7C,EAAmD;AACjD,aAAOwI,IAAIvI,IAAI8N,MAAR,CAAP;AACD;AACF;AACF,C;;ACjMqS,8GAAoB,C;;ACAxR;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+D;;ACxBA,ICAA,2CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,8KAA8K,+EAA+E,OAAO,+GAA+G,KAAK,0BAA0B,qBAAqB,oBAAoB,OAAO,aAAa,MAAM;AACrlB,ICAA,oDDAA;;;;;;AEDA,ICAA,gDDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,mCAAmC,kDAAkD,sDAAsD,iBAAiB,iPAAiP,8CAA8C,4CAA4C,kCAAkC,OAAO,cAAc,MAAM;AAC9oB,ICAA,yDDAA;;;;;;;;AEAA;AAEA,wEAAe;AACbE,cAAY,IADC;AAGb/G,SAAO,CAAC,MAAD,CAHM;AAKbgH,QALa,kBAKL7H,CALK,QAKoD;AAAA,2BAApD8H,MAAoD;AAAA,QAA1CnN,KAA0C,eAA1CA,KAA0C;AAAA,QAAnCL,KAAmC,eAAnCA,KAAmC;AAAA,QAA5B0B,MAA4B,eAA5BA,MAA4B;AAAA,QAATT,IAAS,QAAlBsF,KAAkB,CAATtF,IAAS;AAC/D;AACA;AACA,QAAMwM,aAAa,aAAAC,CAAShM,MAAT,EAAiBT,KAAK5B,IAAtB,CAAnB,CAH+D,CAI/D;AACA;;AACA,QAAMsO,SAAS1M,KAAK2C,IAAL,KAAc,MAAd,GACX6J,cAAcxM,KAAKwE,QAAL,CAAckB,IAAd,CAAmB;AAAA,aAAK,aAAA+G,CAAShM,MAAT,EAAiBT,KAAK0E,QAAL,GAAgB,GAAhB,GAAsBiI,EAAEhI,IAAzC,CAAL;AAAA,KAAnB,CADH,GAEX6H,UAFJ;AAGA,QAAMhH,OAAOoH,WAAWnI,CAAX,EAAczE,KAAK5B,IAAnB,EAAyB4B,KAAKT,KAAL,IAAcS,KAAK5B,IAA5C,EAAkDsO,MAAlD,CAAb;AACA,QAAMG,cAAczN,MAAMZ,WAAN,CAAkBsO,YAAlB,IAAkC,IAAlC,GAChB1N,MAAMZ,WAAN,CAAkBsO,YADF,GAEhB/N,MAAMyB,WAAN,CAAkBsM,YAFtB;AAGA,QAAMC,WAAWF,eAAe,IAAf,GAAsB,CAAtB,GAA0BA,WAA3C;AACA,QAAMG,oBAAoB,CAAC,CAACjO,MAAMyB,WAAN,CAAkBwM,iBAA9C;;AACA,QAAIhN,KAAK2C,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAO,CAAC6C,IAAD,EAAOyH,eAAexI,CAAf,EAAkBzE,KAAKwE,QAAvB,EAAiCxE,KAAK0E,QAAtC,EAAgDjE,MAAhD,EAAwDsM,QAAxD,CAAP,CAAP;AACD,KAFD,MAEO,IAAI,CAACL,UAAUM,iBAAX,KAAiChN,KAAKqE,OAAtC,IAAiD,CAAC,MAAArD,CAAOU,IAAP,CAAY1B,KAAK5B,IAAjB,CAAtD,EAA8E;AACnF,UAAMoG,WAAW,YAAAF,CAAatE,KAAKqE,OAAlB,CAAjB;AACA,aAAO,CAACmB,IAAD,EAAOyH,eAAexI,CAAf,EAAkBD,QAAlB,EAA4BxE,KAAK5B,IAAjC,EAAuCqC,MAAvC,EAA+CsM,QAA/C,CAAP,CAAP;AACD,KAHM,MAGA;AACL,aAAOvH,IAAP;AACD;AACF;AA5BY,CAAf;;AA+BA,SAASoH,UAAT,CAAqBnI,CAArB,EAAwByI,EAAxB,EAA4BlH,IAA5B,EAAkC0G,MAAlC,EAA0C;AACxC,SAAOjI,EAAE,aAAF,EAAiB;AACtBa,WAAO;AACL4H,YADK;AAELC,mBAAa,EAFR;AAGLC,wBAAkB;AAHb,KADe;AAMtBC,WAAO;AACLX,oBADK;AAEL,sBAAgB;AAFX;AANe,GAAjB,EAUJ1G,IAVI,CAAP;AAWD;;AAED,SAASiH,cAAT,CAAyBxI,CAAzB,EAA4BD,QAA5B,EAAsCpG,IAAtC,EAA4C6D,KAA5C,EAAmD8K,QAAnD,EAAwE;AAAA,MAAXO,KAAW,uEAAH,CAAG;AACtE,MAAI,CAAC9I,QAAD,IAAa8I,QAAQP,QAAzB,EAAmC,OAAO,IAAP;AACnC,SAAOtI,EAAE,IAAF,EAAQ;AAAE4I,WAAO;AAAT,GAAR,EAA0C7I,SAASL,GAAT,CAAa,aAAK;AACjE,QAAMuI,SAAS,aAAAD,CAASxK,KAAT,EAAgB7D,OAAO,GAAP,GAAauO,EAAEhI,IAA/B,CAAf;AACA,WAAOF,EAAE,IAAF,EAAQ;AAAE4I,aAAO;AAAT,KAAR,EAAyC,CAC9CT,WAAWnI,CAAX,EAAcrG,OAAO,GAAP,GAAauO,EAAEhI,IAA7B,EAAmCgI,EAAEpN,KAArC,EAA4CmN,MAA5C,CAD8C,EAE9CO,eAAexI,CAAf,EAAkBkI,EAAEnI,QAApB,EAA8BpG,IAA9B,EAAoC6D,KAApC,EAA2C8K,QAA3C,EAAqDO,QAAQ,CAA7D,CAF8C,CAAzC,CAAP;AAID,GANgD,CAA1C,CAAP;AAOD,C;;ACzD4S,4HAAoB,C;;ACAjU;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6E;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,yEAAe;AACbrN,QAAM,cADO;AAEbqF,SAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,aAA1B,CAFM;AAGbO,cAAY;AAAE0H,iBAAA,WAAF;AAAevF,wBAAA,kBAAAA;AAAf;AAHC,CAAf,E;;ACpC8S,8HAAoB,C;;ACAhS;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+E;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,oEAAe;AACbnC,cAAY;AAAE2H,kBAAA,YAAF;AAAgBD,iBAAA,WAAhB;AAA6BnE,cAAA,QAAAA;AAA7B,GADC;AAGb9D,SAAO,CAAC,OAAD,CAHM;AAKbzG,MALa,kBAKL;AACN,WAAO;AACL4O,sBAAgB;AADX,KAAP;AAGD,GATY;AAWbC,SAXa,qBAWF;AACT,SAAKC,YAAL;AACD,GAbY;AAebC,SAAO;AACL,YADK,oBACO;AACV,WAAKD,YAAL;AACD;AAHI,GAfM;AAqBb/H,WAAS;AACP+H,gBADO,0BACS;AACd,UAAME,QAAQC,sBACZ,KAAKrN,MADO,EAEZ,KAAKuE,KAFO,CAAd;;AAIA,UAAI6I,QAAQ,CAAC,CAAb,EAAgB;AACd,aAAKJ,cAAL,GAAsBI,KAAtB;AACD;AACF,KATM;AAWPE,eAXO,uBAWMF,KAXN,EAWa;AAClB,WAAKJ,cAAL,GAAsBI,UAAU,KAAKJ,cAAf,GAAgC,CAAC,CAAjC,GAAqCI,KAA3D;AACD,KAbM;AAePpB,YAfO,oBAeGlO,IAfH,EAeS;AACd,aAAO,aAAAkO,CAAS,KAAKhM,MAAd,EAAsBlC,KAAKH,IAA3B,CAAP;AACD;AAjBM;AArBI,CAAf;;AA0CA,SAAS0P,qBAAT,CAAgC7L,KAAhC,EAAuC+C,KAAvC,EAA8C;AAC5C,OAAK,IAAI3G,IAAI,CAAb,EAAgBA,IAAI2G,MAAM1G,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,QAAM2B,OAAOgF,MAAM3G,CAAN,CAAb;;AACA,QAAI2B,KAAK2C,IAAL,KAAc,OAAd,IAAyB3C,KAAKwE,QAAL,CAAckB,IAAd,CAAmB;AAAA,aAAK,aAAA+G,CAASxK,KAAT,EAAgB0K,EAAEvO,IAAlB,CAAL;AAAA,KAAnB,CAA7B,EAA+E;AAC7E,aAAOC,CAAP;AACD;AACF;;AACD,SAAO,CAAC,CAAR;AACD,C;;AC7EwS,oHAAoB,C;;ACA3R;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qE;;ACxBA,ICAA,iDDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,wBAAwB,OAAO,0BAA0B,0BAA0B,8BAA8B,yEAAyE,IAAI,oBAAoB;AAC3S,ICAA,0DDAA;;;;;;AEDA,wBAAwB,2EAA2E,oCAAoC,mBAAmB,GAAG,EAAE,OAAO,oCAAoC,8HAA8H,GAAG,EAAE,sBAAsB;;AAEnW;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,C;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,0EAAe;AACbiH,SAAO;AACL0I,iBAAa;AACXrL,YAAMhC,MADK;AAEXsN,eAAS;AAFE;AADR,GADM;AAQbnP,YAAU;AACRoP,eADQ,yBACO;AAAA,iBACQ,CAAC,KAAK3N,kBAAN,EAA0B,KAAKxB,KAAL,CAAWyB,WAArC,CADR;;AACb,+CAAwE;AAAnE,YAAM0D,iBAAN;AACH,YAAMiK,KAAKjK,OAAOkK,aAAlB;;AACA,YAAID,MAAMA,GAAGE,WAAb,EAA0B;AACxB,iBAAO,QAAOF,GAAGE,WAAV,MAA0B,QAA1B,GAAqCF,GAAGE,WAAxC,GAAsD,EAA7D;AACD;AACF;;AACD,aAAO,IAAP;AACD,KATO;AAWRC,WAXQ,qBAWG;AACT,aAAOC,QAAQ,KAAKL,WAAL,IAAoB,KAAKF,WAAjC,CAAP;AACD,KAbO;AAeRQ,WAfQ,qBAeG;AACT,UAAM7B,IAAI,KAAKuB,WAAf;AACA,aAAQvB,KAAKA,EAAE6B,OAAR,IAAoB,2BAA3B;AACD,KAlBO;AAoBRC,cApBQ,wBAoBM;AACZ,UAAM9B,IAAI,KAAKuB,WAAf;AACA,aAAQvB,KAAKA,EAAE8B,UAAR,IAAuB,SAA9B;AACD;AAvBO,GARG;AAkCb7I,WAAS;AACP8I,UADO,oBACG;AACR,UAAI,KAAKV,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBW,WAAjB,GAA+BC,IAA/B,CAAoC,YAAM;AACxCC,mBAASH,MAAT,CAAgB,IAAhB;AACD,SAFD;AAGA,aAAKV,WAAL,GAAmB,IAAnB;AACD;AACF;AARM;AAlCI,CAAf,E;;ACb+S,gIAAoB,C;;ACAjS;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iF;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mEAAe;AACbnI,cAAY;AAAEiJ,UAAA,IAAF;AAAQC,UAAA,IAAR;AAAcC,aAAA,OAAd;AAAuBC,YAAA,MAAvB;AAA+BC,mBAAA,aAAAA;AAA/B,GADC;AAGbrQ,MAHa,kBAGL;AACN,WAAO;AACLsQ,qBAAe,KADV;AAELC,qBAAe;AAFV,KAAP;AAID,GARY;AAUbtQ,YAAU;AACRuQ,oBADQ,8BACY;AAAA,UACV7O,WADU,GACM,KAAKzB,KADX,CACVyB,WADU;AAAA,UAEVhC,WAFU,GAEM,KAAKY,KAFX,CAEVZ,WAFU;;AAGlB,UACEA,YAAY8Q,MAAZ,KAAuB,KAAvB,IACA9O,YAAY8O,MAAZ,KAAuB,KAFzB,EAEgC;AAC9B,eAAO,KAAP;AACD;;AACD,aACE,KAAK9P,MAAL,IACAgB,YAAY+O,IADZ,IAEA/O,YAAY4G,IAFZ,IAGA5G,YAAY2G,GAHZ,IAIA,KAAK5G,kBAAL,CAAwB4G,GAL1B;AAOD,KAhBO;AAkBRqI,qBAlBQ,+BAkBa;AAAA,UACXhR,WADW,GACK,KAAKY,KADV,CACXZ,WADW;AAEnB,aACE,CAACA,YAAYiR,MAAb,IACA,CAACjR,YAAYmB,IADb,IAEAnB,YAAYsF,OAAZ,KAAwB,KAFxB,IAGA,KAAKyH,YAAL,CAAkBjN,MAJpB;AAMD,KA1BO;AA4BRiN,gBA5BQ,0BA4BQ;AACd,aAAO,mBAAA9H,CACL,KAAKrE,KADA,EAEL,KAAKqB,MAFA,EAGL,KAAK1B,KAHA,EAIL,KAAKuB,WAJA,CAAP;AAMD,KAnCO;AAqCRoP,eArCQ,yBAqCO;AACb,UAAMC,gBAAgB,KAAKvQ,KAAL,CAAWZ,WAAX,CAAuBoR,SAA7C;AACA,aAAO,CACL;AACE,qBAAa,CAAC,KAAKP,gBADrB;AAEE,wBAAgB,KAAKF,aAFvB;AAGE,sBAAc,CAAC,KAAKK;AAHtB,OADK,EAMLG,aANK,CAAP;AAQD;AA/CO,GAVG;AA4DbnG,SA5Da,qBA4DF;AAAA;;AACTa,WAAOC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKuF,QAAvC,EADS,CAGT;;AACAC,IAAA,mBAAAA,CAAUC,SAAV,CAAoB;AAAEC,mBAAa;AAAf,KAApB;AAEA,SAAKxI,OAAL,CAAayI,UAAb,CAAwB,UAAC/C,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC1C,UAAI0B,GAAG9O,IAAH,KAAY8R,KAAK9R,IAAjB,IAAyB,CAAC,sBAAA+R,CAAIC,SAAJ,CAAclD,GAAGjN,IAAjB,CAA9B,EAAsD;AACpD6P,QAAA,mBAAAA,CAAUO,KAAV;AACD;;AACD7E;AACD,KALD;AAOA,SAAKhE,OAAL,CAAa8I,SAAb,CAAuB,YAAM;AAC3BR,MAAA,mBAAAA,CAAUS,IAAV;AACA,YAAKpB,aAAL,GAAqB,KAArB;AACD,KAHD;AAKA,SAAKqB,GAAL,CAAS,YAAT,EAAuB,KAAKC,WAA5B;AACD,GA/EY;AAiFb7K,WAAS;AACP8K,iBADO,yBACQxD,EADR,EACY;AACjB,WAAKiC,aAAL,GAAqB,OAAOjC,EAAP,KAAc,SAAd,GAA0BA,EAA1B,GAA+B,CAAC,KAAKiC,aAA1D;AACD,KAHM;AAKP;AACAwB,gBANO,wBAMOC,CANP,EAMU;AACf,WAAKC,UAAL,GAAkB;AAChBC,WAAGF,EAAEG,cAAF,CAAiB,CAAjB,EAAoBC,OADP;AAEhBC,WAAGL,EAAEG,cAAF,CAAiB,CAAjB,EAAoBG;AAFP,OAAlB;AAID,KAXM;AAaPC,cAbO,sBAaKP,CAbL,EAaQ;AACb,UAAMQ,KAAKR,EAAEG,cAAF,CAAiB,CAAjB,EAAoBC,OAApB,GAA8B,KAAKH,UAAL,CAAgBC,CAAzD;AACA,UAAMO,KAAKT,EAAEG,cAAF,CAAiB,CAAjB,EAAoBG,OAApB,GAA8B,KAAKL,UAAL,CAAgBI,CAAzD;;AACA,UAAIK,KAAKC,GAAL,CAASH,EAAT,IAAeE,KAAKC,GAAL,CAASF,EAAT,CAAf,IAA+BC,KAAKC,GAAL,CAASH,EAAT,IAAe,EAAlD,EAAsD;AACpD,YAAIA,KAAK,CAAL,IAAU,KAAKP,UAAL,CAAgBC,CAAhB,IAAqB,EAAnC,EAAuC;AACrC,eAAKJ,aAAL,CAAmB,IAAnB;AACD,SAFD,MAEO;AACL,eAAKA,aAAL,CAAmB,KAAnB;AACD;AACF;AACF,KAvBM;AAyBPD,eAzBO,uBAyBMG,CAzBN,EAyBS;AACd,WAAKxB,aAAL,GAAqBwB,CAArB;AACD;AA3BM;AAjFI,CAAf,E;;ACpEwS,kHAAoB,C;;ACA1R;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mE;;AC1BA,ICAA,4CDAA,gBAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,8BAA8B,qKAAqK,OAAO,UAAU;AAC9T,ICAA,qDDAA;;;;;;AEDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMY,OAAO,sHAAb;AAOA,qEAAe;AACb5L,WAAS;AACP6L,UADO,oBACG;AACR,aAAOD,KAAKF,KAAKI,KAAL,CAAWJ,KAAKK,MAAL,KAAgBH,KAAKlT,MAAhC,CAAL,CAAP;AACD;AAHM;AADI,CAAf,E;;AClB0S,sHAAoB,C;;ACA5R;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uE;;;;;;;;;;;;;;;;;;ACnBA,+CAAe;AACboP,SADa,qBACF;AACT,QAAI,KAAKkE,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBrS,KAAjB,GAAyB,KAAKC,MAA9B;AACA,WAAKoS,WAAL,CAAiBvR,IAAjB,GAAwB,KAAKD,KAA7B;AACA,WAAKwR,WAAL,CAAiBzR,WAAjB,GAA+B,KAAKf,KAAL,CAAWe,WAAX,IAA0B,KAAKP,YAA9D;AACD;AACF,GAPY;AASb4J,SATa,qBASF;AAAA;;AACT;AACA,SAAKqI,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;;AAEA,QAAMC,aAAa,SAAbA,UAAa,GAAM;AACvBhI,eAASxK,KAAT,GAAiB,MAAKC,MAAtB;AACAuK,eAASC,eAAT,CAAyB3J,IAAzB,GAAgC,MAAKD,KAArC;AACA,UAAM4R,WAAW,MAAK5S,KAAL,CAAWZ,WAAX,CAAuBqB,IAAvB,IAA+B,EAAhD;AACA,UAAMA,OAAOmS,SAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,uBAAuBF,SAASjS,MAAT,CAAgB;AAAA,eAAKoS,EAAElS,IAAF,KAAW,aAAhB;AAAA,OAAhB,EAA+C3B,MAA/C,KAA0D,CAAvF,CALuB,CAOvB;;AACA,UAAI4T,oBAAJ,EAA0B;AACxBrS,aAAK5B,IAAL,CAAU;AAAEgC,gBAAM,aAAR;AAAuBC,mBAAS,MAAKN;AAArC,SAAV;AACD,OAVsB,CAYvB;;;AACA,UAAMwS,mBAAmBrI,SAASsI,gBAAT,CAA0B,0BAA1B,CAAzB;;AACA,UAAID,iBAAiB9T,MAArB,EAA6B;AAC3B8T,yBAAiB1R,OAAjB,CAAyB;AAAA,iBAAK,MAAKmR,eAAL,CAAqBS,GAArB,CAAyBH,CAAzB,CAAL;AAAA,SAAzB;AACD;;AAED,YAAKN,eAAL,GAAuB,IAAIC,GAAJ,CAAQS,eAAe1S,IAAf,EAAqB,MAAKgS,eAA1B,CAAR,CAAvB;AACD,KAnBD;;AAoBA,SAAKW,MAAL,CAAY,OAAZ,EAAqBT,UAArB;AACAA;AACD,GAnCY;AAqCbU,eArCa,2BAqCI;AACfF,mBAAe,IAAf,EAAqB,KAAKV,eAA1B;AACD;AAvCY,CAAf;;AA0CA,SAASU,cAAT,CAAyB1S,IAAzB,EAA+B6S,OAA/B,EAAwC;AACtC,MAAIA,OAAJ,EAAa;AACX,uBAAIA,OAAJ,EAAahS,OAAb,CAAqB,aAAK;AACxBqJ,eAAS4I,IAAT,CAAcC,WAAd,CAA0BjG,CAA1B;AACD,KAFD;AAGD;;AACD,MAAI9M,IAAJ,EAAU;AACR,WAAOA,KAAKsE,GAAL,CAAS,aAAK;AACnB,UAAM0O,MAAM9I,SAAS+I,aAAT,CAAuB,MAAvB,CAAZ;AACAnS,aAAOC,IAAP,CAAYuR,CAAZ,EAAezR,OAAf,CAAuB,eAAO;AAC5BmS,YAAIE,YAAJ,CAAiBC,GAAjB,EAAsBb,EAAEa,GAAF,CAAtB;AACD,OAFD;AAGAjJ,eAAS4I,IAAT,CAAcM,WAAd,CAA0BJ,GAA1B;AACA,aAAOA,GAAP;AACD,KAPM,CAAP;AAQD;AACF,C;;;;;;;;;AC1DD;AACA;AAEA,sDAAe;AACbrJ,SADa,qBACF;AACTa,WAAOC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKuF,QAAvC;AACD,GAHY;AAIbjK,WAAS;AACPiK,cAAU,gDAAAqD,CAAS,YAAY;AAC7B,WAAKC,aAAL;AACD,KAFS,EAEP,GAFO,CADH;AAIPA,iBAJO,2BAIU;AAAA;;AACf,UAAMC,eAAe,GAAGnB,KAAH,CAASoB,IAAT,CAActJ,SAASsI,gBAAT,CAA0B,eAA1B,CAAd,CAArB;AACA,UAAMiB,UAAU,GAAGrB,KAAH,CAASoB,IAAT,CAActJ,SAASsI,gBAAT,CAA0B,gBAA1B,CAAd,EACftS,MADe,CACR;AAAA,eAAUqT,aAAa1N,IAAb,CAAkB;AAAA,iBAAe6N,YAAYxR,IAAZ,KAAqByR,OAAOzR,IAA3C;AAAA,SAAlB,CAAV;AAAA,OADQ,CAAhB;AAGA,UAAM0R,YAAYnC,KAAK7K,GAAL,CAChB4D,OAAOqJ,WADS,EAEhB3J,SAASC,eAAT,CAAyByJ,SAFT,EAGhB1J,SAAS4J,IAAT,CAAcF,SAHE,CAAlB;;AAMA,WAAK,IAAIpV,IAAI,CAAb,EAAgBA,IAAIiV,QAAQhV,MAA5B,EAAoCD,GAApC,EAAyC;AACvC,YAAMmV,SAASF,QAAQjV,CAAR,CAAf;AACA,YAAMuV,aAAaN,QAAQjV,IAAI,CAAZ,CAAnB;AAEA,YAAMoO,WAAWpO,MAAM,CAAN,IAAWoV,cAAc,CAAzB,IAChBA,aAAaD,OAAOK,aAAP,CAAqBC,SAArB,GAAiC,EAA9C,KACA,CAACF,UAAD,IAAeH,YAAYG,WAAWC,aAAX,CAAyBC,SAAzB,GAAqC,EADhE,CADD;;AAIA,YAAIrH,YAAYsH,mBAAmB,KAAKtT,MAAL,CAAYsB,IAA/B,MAAyCgS,mBAAmBP,OAAOzR,IAA1B,CAAzD,EAA0F;AACxFnD,UAAA,SAAAA,CAAMmC,qBAAN,GAA8B,IAA9B;AACA,eAAKyG,OAAL,CAAalG,OAAb,CAAqByS,mBAAmBP,OAAOzR,IAA1B,CAArB,EAAsD,YAAM;AAC1D;AACA,kBAAKiS,SAAL,CAAe,YAAM;AACnBpV,cAAA,SAAAA,CAAMmC,qBAAN,GAA8B,KAA9B;AACD,aAFD;AAGD,WALD;AAMA;AACD;AACF;AACF;AAlCM,GAJI;AAwCb0R,eAxCa,2BAwCI;AACfpI,WAAO4J,mBAAP,CAA2B,QAA3B,EAAqC,KAAKpE,QAA1C;AACD;AA1CY,CAAf,E;;ACHA;AACA;AAEA,gDAAe,CACb,UADa,EACD;AACZ,iBAFa,CAEK;AAFL,CAAf,E;;ACHA;AAEA;AACA;AACA;AACA;AAEA,YAAA/R,CAAa,MAAb,EAA0B,WAA1B;AACA,YAAAA,CAAa,QAAb,EAA4B,WAA5B;AAEO,IAAM,aAAAwK,GAAS,CACpB;AACErI,QAAM,gBADR;AAEE7B,QAAM,GAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAuEoD,IAAvE,CAA4E,gBAAQ;AAClFuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,gBAAd,EAAgC+D,KAAKlG,OAArC;AACAzC;AACD,KAHD;AAID;AATH,CADoB,EAYpB;AACEpN,QAAM,aADR;AAEEgW,YAAU;AAFZ,CAZoB,EAgBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,8DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAhBoB,EA2BpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CA3BoB,EA+BpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,oFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAA6FoD,IAA7F,CAAkG,gBAAQ;AACxGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA/BoB,EA0CpB;AACEpN,QAAM,oCADR;AAEEgW,YAAU;AAFZ,CA1CoB,EA8CpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,2CAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAoGoD,IAApG,CAAyG,gBAAQ;AAC/GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA9CoB,EAyDpB;AACEvL,QAAM,iBADR;AAEE7B,QAAM,2GAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAoGoD,IAApG,CAAyG,gBAAQ;AAC/GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAzDoB,EAoEpB;AACEpN,QAAM,2CADR;AAEEgW,YAAU;AAFZ,CApEoB,EAwEpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,uGAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAwFoD,IAAxF,CAA6F,gBAAQ;AACnGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAxEoB,EAmFpB;AACEpN,QAAM,+BADR;AAEEgW,YAAU;AAFZ,CAnFoB,EAuFpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,4EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,sFAAqFoD,IAArF,CAA0F,gBAAQ;AAChGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAvFoB,EAkGpB;AACEpN,QAAM,4BADR;AAEEgW,YAAU;AAFZ,CAlGoB,EAsGpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,+EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAwFoD,IAAxF,CAA6F,gBAAQ;AACnGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAtGoB,EAiHpB;AACEpN,QAAM,+BADR;AAEEgW,YAAU;AAFZ,CAjHoB,EAqHpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,4EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAqFoD,IAArF,CAA0F,gBAAQ;AAChGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CArHoB,EAgIpB;AACEpN,QAAM,4BADR;AAEEgW,YAAU;AAFZ,CAhIoB,EAoIpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,8FAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CApIoB,EA+IpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CA/IoB,EAmJpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,8FAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAnJoB,EA8JpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CA9JoB,EAkKpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,mDAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAoFoD,IAApF,CAAyF,gBAAQ;AAC/FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAlKoB,EA6KpB;AACEpN,QAAM,2BADR;AAEEgW,YAAU;AAFZ,CA7KoB,EAiLpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,cAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAkFoD,IAAlF,CAAuF,gBAAQ;AAC7FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAjLoB,EA4LpB;AACEpN,QAAM,wBADR;AAEEgW,YAAU;AAFZ,CA5LoB,EAgMpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,gFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAhMoB,EA2MpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CA3MoB,EA+MpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,qDAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA/MoB,EA0NpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CA1NoB,EA8NpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,8DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA9NoB,EAyOpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CAzOoB,EA6OpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,sIAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA+FoD,IAA/F,CAAoG,gBAAQ;AAC1GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA7OoB,EAwPpB;AACEpN,QAAM,sCADR;AAEEgW,YAAU;AAFZ,CAxPoB,EA4PpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,yCAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAkFoD,IAAlF,CAAuF,gBAAQ;AAC7FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA5PoB,EAuQpB;AACEpN,QAAM,yBADR;AAEEgW,YAAU;AAFZ,CAvQoB,EA2QpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,6EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA3QoB,EAsRpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CAtRoB,EA0RpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,yGAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAkGoD,IAAlG,CAAuG,gBAAQ;AAC7GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA1RoB,EAqSpB;AACEpN,QAAM,yCADR;AAEEgW,YAAU;AAFZ,CArSoB,EAySpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,sDAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAzSoB,EAoTpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CApToB,EAwTpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,8FAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA+FoD,IAA/F,CAAoG,gBAAQ;AAC1GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAxToB,EAmUpB;AACEpN,QAAM,sCADR;AAEEgW,YAAU;AAFZ,CAnUoB,EAuUpB;AACEnU,QAAM,gBADR;AAEE7B,QAAM,yFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA0FoD,IAA1F,CAA+F,gBAAQ;AACrGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,gBAAd,EAAgC+D,KAAKlG,OAArC;AACAzC;AACD,KAHD;AAID;AATH,CAvUoB,EAkVpB;AACEpN,QAAM,iCADR;AAEEgW,YAAU;AAFZ,CAlVoB,EAsVpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,oHAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA6FoD,IAA7F,CAAkG,gBAAQ;AACxGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAtVoB,EAiWpB;AACEpN,QAAM,oCADR;AAEEgW,YAAU;AAFZ,CAjWoB,EAqWpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,gFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CArWoB,EAgXpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CAhXoB,EAoXpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,gFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CApXoB,EA+XpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CA/XoB,EAmYpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,yFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA0FoD,IAA1F,CAA+F,gBAAQ;AACrGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAnYoB,EA8YpB;AACEpN,QAAM,iCADR;AAEEgW,YAAU;AAFZ,CA9YoB,EAkZpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,6GAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsGoD,IAAtG,CAA2G,gBAAQ;AACjHuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAlZoB,EA6ZpB;AACEpN,QAAM,6CADR;AAEEgW,YAAU;AAFZ,CA7ZoB,EAiapB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,2BAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAoFoD,IAApF,CAAyF,gBAAQ;AAC/FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAjaoB,EA4apB;AACEvL,QAAM,iBADR;AAEE7B,QAAM,8CAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA5aoB,EAubpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CAvboB,EA2bpB;AACEnU,QAAM,gBADR;AAEE7B,QAAM,gFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,gBAAd,EAAgC+D,KAAKlG,OAArC;AACAzC;AACD,KAHD;AAID;AATH,CA3boB,EAscpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CAtcoB,EA0cpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,gFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA1coB,EAqdpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CArdoB,EAydpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,yGAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA0FoD,IAA1F,CAA+F,gBAAQ;AACrGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAzdoB,EAoepB;AACEpN,QAAM,iCADR;AAEEgW,YAAU;AAFZ,CApeoB,EAwepB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,aAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAiFoD,IAAjF,CAAsF,gBAAQ;AAC5FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAxeoB,EAmfpB;AACEpN,QAAM,uBADR;AAEEgW,YAAU;AAFZ,CAnfoB,EAufpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,0EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA2FoD,IAA3F,CAAgG,gBAAQ;AACtGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAvfoB,EAkgBpB;AACEpN,QAAM,kCADR;AAEEgW,YAAU;AAFZ,CAlgBoB,EAsgBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,kFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA2FoD,IAA3F,CAAgG,gBAAQ;AACtGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAtgBoB,EAihBpB;AACEpN,QAAM,kCADR;AAEEgW,YAAU;AAFZ,CAjhBoB,EAqhBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,yIAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAkGoD,IAAlG,CAAuG,gBAAQ;AAC7GuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CArhBoB,EAgiBpB;AACEpN,QAAM,yCADR;AAEEgW,YAAU;AAFZ,CAhiBoB,EAoiBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,gEAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CApiBoB,EA+iBpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CA/iBoB,EAmjBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,iCAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAA0FoD,IAA1F,CAA+F,gBAAQ;AACrGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAnjBoB,EA8jBpB;AACEvL,QAAM,iBADR;AAEE7B,QAAM,6DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA9jBoB,EAykBpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CAzkBoB,EA6kBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,oDAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAqFoD,IAArF,CAA0F,gBAAQ;AAChGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA7kBoB,EAwlBpB;AACEpN,QAAM,4BADR;AAEEgW,YAAU;AAFZ,CAxlBoB,EA4lBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,sEAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA5lBoB,EAumBpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CAvmBoB,EA2mBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,6DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA3mBoB,EAsnBpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CAtnBoB,EA0nBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,+EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAwFoD,IAAxF,CAA6F,gBAAQ;AACnGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CA1nBoB,EAqoBpB;AACEpN,QAAM,+BADR;AAEEgW,YAAU;AAFZ,CAroBoB,EAyoBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,2CAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAoFoD,IAApF,CAAyF,gBAAQ;AAC/FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAzoBoB,EAopBpB;AACEpN,QAAM,2BADR;AAEEgW,YAAU;AAFZ,CAppBoB,EAwpBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,6DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAxpBoB,EAmqBpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CAnqBoB,EAuqBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,wFAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAyFoD,IAAzF,CAA8F,gBAAQ;AACpGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAvqBoB,EAkrBpB;AACEpN,QAAM,gCADR;AAEEgW,YAAU;AAFZ,CAlrBoB,EAsrBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,+EAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAwFoD,IAAxF,CAA6F,gBAAQ;AACnGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAtrBoB,EAisBpB;AACEpN,QAAM,+BADR;AAEEgW,YAAU;AAFZ,CAjsBoB,EAqsBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,sEAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CArsBoB,EAgtBpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CAhtBoB,EAotBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,sEAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAuFoD,IAAvF,CAA4F,gBAAQ;AAClGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAptBoB,EA+tBpB;AACEpN,QAAM,8BADR;AAEEgW,YAAU;AAFZ,CA/tBoB,EAmuBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,6DAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAsFoD,IAAtF,CAA2F,gBAAQ;AACjGuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAnuBoB,EA8uBpB;AACEpN,QAAM,6BADR;AAEEgW,YAAU;AAFZ,CA9uBoB,EAkvBpB;AACEnU,QAAM,iBADR;AAEE7B,QAAM,0BAFR;AAGEgS,aAAW,MAHb;AAIE8D,eAAa,qBAAChH,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AAC/B,uFAAmFoD,IAAnF,CAAwF,gBAAQ;AAC9FuB,MAAA,sBAAAA,CAAIC,SAAJ,CAAc,iBAAd,EAAiC+D,KAAKlG,OAAtC;AACAzC;AACD,KAHD;AAID;AATH,CAlvBoB,EA6vBpB;AACEpN,QAAM,GADR;AAEEgS,aAAW,QAAAiE;AAFb,CA7vBoB,CAAf,C;;ACVA,IAAM,iBAAA3V,GAAW;AACtB,WAAS,aADa;AAEtB,iBAAe,uBAFO;AAGtB,UAAQ,kBAHc;AAItB,WAAS,CACP;AACE,WAAO,gBADT;AAEE,YAAQ,GAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KADS,CALb;AAYE,mBAAe;AACb,cAAQ,IADK;AAEb,mBAAa,WAFA;AAGb,oBAAc,QAHD;AAIb,oBAAc,cAJD;AAKb,kBAAY,CACV;AACE,iBAAS,IADX;AAEE,mBAAW;AAFb,OADU,EAKV;AACE,iBAAS,IADX;AAEE,mBAAW;AAFb,OALU,EASV;AACE,iBAAS,MADX;AAEE,mBAAW;AAFb,OATU,CALC;AAmBb,gBAAU;AAnBG;AAZjB,GADO,EAmCP;AACE,WAAO,iBADT;AAEE,YAAQ,8DAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,UAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,mBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,qCAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,gCAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,uCAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,wCAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAlES;AALb,GAnCO,EAiHP;AACE,WAAO,iBADT;AAEE,YAAQ,oFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,iBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA9CS;AALb,GAjHO,EA2KP;AACE,WAAO,iBADT;AAEE,YAAQ,2CAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,4BAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAXS;AALb,GA3KO,EAkMP;AACE,WAAO,iBADT;AAEE,YAAQ,2GAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,8CAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,8CAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,sCAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KApCS;AALb,GAlMO,EAkPP;AACE,WAAO,iBADT;AAEE,YAAQ,uGAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,WAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAlES;AALb,GAlPO,EAgUP;AACE,WAAO,iBADT;AAEE,YAAQ,4EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS;AALb,GAhUO,EAkVP;AACE,WAAO,iBADT;AAEE,YAAQ,+EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,WAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,+BAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,gCAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,mBAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,kCAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KAjFS,EAsFT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAtFS,EA2FT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KA3FS,EAgGT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KAhGS,EAqGT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KArGS,EA0GT;AACE,eAAS,CADX;AAEE,eAAS,6BAFX;AAGE,cAAQ;AAHV,KA1GS,EA+GT;AACE,eAAS,CADX;AAEE,eAAS,iCAFX;AAGE,cAAQ;AAHV,KA/GS,EAoHT;AACE,eAAS,CADX;AAEE,eAAS,kCAFX;AAGE,cAAQ;AAHV,KApHS,EAyHT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAzHS,EA8HT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA9HS,EAmIT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAnIS,EAwIT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAxIS,EA6IT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KA7IS,EAkJT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KAlJS,EAuJT;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KAvJS,EA4JT;AACE,eAAS,CADX;AAEE,eAAS,0BAFX;AAGE,cAAQ;AAHV,KA5JS,EAiKT;AACE,eAAS,CADX;AAEE,eAAS,wBAFX;AAGE,cAAQ;AAHV,KAjKS,EAsKT;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KAtKS,EA2KT;AACE,eAAS,CADX;AAEE,eAAS,oCAFX;AAGE,cAAQ;AAHV,KA3KS,EAgLT;AACE,eAAS,CADX;AAEE,eAAS,iDAFX;AAGE,cAAQ;AAHV,KAhLS,EAqLT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KArLS;AALb,GAlVO,EAmhBP;AACE,WAAO,iBADT;AAEE,YAAQ,4EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAhBS;AALb,GAnhBO,EA+iBP;AACE,WAAO,iBADT;AAEE,YAAQ,8FAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,iBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAXS;AALb,GA/iBO,EAskBP;AACE,WAAO,iBADT;AAEE,YAAQ,8FAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,OAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KADS;AALb,GAtkBO,EAmlBP;AACE,WAAO,iBADT;AAEE,YAAQ,mDAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,uBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,gDAFX;AAGE,cAAQ;AAHV,KAjFS;AALb,GAnlBO,EAgrBP;AACE,WAAO,iBADT;AAEE,YAAQ,cAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAXS;AALb,GAhrBO,EAusBP;AACE,WAAO,iBADT;AAEE,YAAQ,gFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,YAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KAhBS;AALb,GAvsBO,EAmuBP;AACE,WAAO,iBADT;AAEE,YAAQ,qDAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,cAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,2CAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,2BAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KApCS;AALb,GAnuBO,EAmxBP;AACE,WAAO,iBADT;AAEE,YAAQ,8DAFV;AAGE,mBAAe,IAHjB;AAIE,aAAS,oCAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,oCAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAvES;AALb,GAnxBO,EAs2BP;AACE,WAAO,iBADT;AAEE,YAAQ,sIAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,cAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,mBAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAlES;AALb,GAt2BO,EAo7BP;AACE,WAAO,iBADT;AAEE,YAAQ,yCAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,WAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,yBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA9CS;AALb,GAp7BO,EA8+BP;AACE,WAAO,iBADT;AAEE,YAAQ,6EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,YAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,mBAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAjFS,EAsFT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAtFS,EA2FT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA3FS,EAgGT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhGS;AALb,GA9+BO,EA0lCP;AACE,WAAO,iBADT;AAEE,YAAQ,yGAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,gBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KA9CS;AALb,GA1lCO,EAopCP;AACE,WAAO,iBADT;AAEE,YAAQ,sDAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,KAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,oIAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAppCO,EA+rCP;AACE,WAAO,iBADT;AAEE,YAAQ,8FAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,eAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,4BAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KApCS;AALb,GA/rCO,EA+uCP;AACE,WAAO,gBADT;AAEE,YAAQ,yFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,SAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,qBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KAXS;AALb,GA/uCO,EAswCP;AACE,WAAO,iBADT;AAEE,YAAQ,oHAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,YAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAtwCO,EAizCP;AACE,WAAO,iBADT;AAEE,YAAQ,gFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KArBS;AALb,GAjzCO,EAk1CP;AACE,WAAO,iBADT;AAEE,YAAQ,gFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KADS;AALb,GAl1CO,EA+1CP;AACE,WAAO,iBADT;AAEE,YAAQ,yFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,WAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAjFS,EAsFT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAtFS;AALb,GA/1CO,EAi8CP;AACE,WAAO,iBADT;AAEE,YAAQ,6GAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,UAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAj8CO,EA4+CP;AACE,WAAO,iBADT;AAEE,YAAQ,2BAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,IAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KANS;AALb,GA5+CO,EA8/CP;AACE,WAAO,iBADT;AAEE,YAAQ,8CAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,kBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,uBAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,6BAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,2CAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,wBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,sCAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAjFS;AALb,GA9/CO,EA2lDP;AACE,WAAO,gBADT;AAEE,YAAQ,gFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,wBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,wBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,mBAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA3lDO,EA0pDP;AACE,WAAO,iBADT;AAEE,YAAQ,gFAFV;AAGE,mBAAe,IAHjB;AAIE,aAAS,0BAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,0BAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,YAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,oBAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KA5ES,EAiFT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAjFS;AALb,GA1pDO,EAuvDP;AACE,WAAO,iBADT;AAEE,YAAQ,yGAFV;AAGE,mBAAe,IAHjB;AAIE,aAAS,iBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,aAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,oCAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KAnDS,EAwDT;AACE,eAAS,CADX;AAEE,eAAS,6BAFX;AAGE,cAAQ;AAHV,KAxDS,EA6DT;AACE,eAAS,CADX;AAEE,eAAS,kBAFX;AAGE,cAAQ;AAHV,KA7DS,EAkET;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KAlES,EAuET;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KAvES,EA4ET;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA5ES;AALb,GAvvDO,EA+0DP;AACE,WAAO,iBADT;AAEE,YAAQ,aAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KAXS;AALb,GA/0DO,EAs2DP;AACE,WAAO,iBADT;AAEE,YAAQ,0EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,YAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA1BS;AALb,GAt2DO,EA44DP;AACE,WAAO,iBADT;AAEE,YAAQ,kFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,eAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KArBS;AALb,GA54DO,EA66DP;AACE,WAAO,iBADT;AAEE,YAAQ,yIAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,iBAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,iBAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KA1BS;AALb,GA76DO,EAm9DP;AACE,WAAO,iBADT;AAEE,YAAQ,gEAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,UAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAn9DO,EA8/DP;AACE,WAAO,iBADT;AAEE,YAAQ,iCAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,IAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA9/DO,EA6jEP;AACE,WAAO,iBADT;AAEE,YAAQ,6DAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA7jEO,EA4nEP;AACE,WAAO,iBADT;AAEE,YAAQ,oDAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,KAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA5nEO,EA2rEP;AACE,WAAO,iBADT;AAEE,YAAQ,sEAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,OAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA1BS;AALb,GA3rEO,EAiuEP;AACE,WAAO,iBADT;AAEE,YAAQ,6DAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,gBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GAjuEO,EAgyEP;AACE,WAAO,iBADT;AAEE,YAAQ,+EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAhyEO,EA20EP;AACE,WAAO,iBADT;AAEE,YAAQ,2CAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,WAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,WAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GA30EO,EAs3EP;AACE,WAAO,iBADT;AAEE,YAAQ,6DAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,cAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,sBAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,eAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GAt3EO,EAq7EP;AACE,WAAO,iBADT;AAEE,YAAQ,wFAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,SAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA1BS;AALb,GAr7EO,EA29EP;AACE,WAAO,iBADT;AAEE,YAAQ,+EAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,QAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA1BS;AALb,GA39EO,EAigFP;AACE,WAAO,iBADT;AAEE,YAAQ,sEAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,OAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS;AALb,GAjgFO,EA4iFP;AACE,WAAO,iBADT;AAEE,YAAQ,sEAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,OAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA5iFO,EA2mFP;AACE,WAAO,iBADT;AAEE,YAAQ,6DAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,MAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,MAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA3mFO,EA0qFP;AACE,WAAO,iBADT;AAEE,YAAQ,0BAFV;AAGE,mBAAe,aAHjB;AAIE,aAAS,IAJX;AAKE,eAAW,CACT;AACE,eAAS,CADX;AAEE,eAAS,IAFX;AAGE,cAAQ;AAHV,KADS,EAMT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KANS,EAWT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAXS,EAgBT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KAhBS,EAqBT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KArBS,EA0BT;AACE,eAAS,CADX;AAEE,eAAS,OAFX;AAGE,cAAQ;AAHV,KA1BS,EA+BT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KA/BS,EAoCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KApCS,EAyCT;AACE,eAAS,CADX;AAEE,eAAS,SAFX;AAGE,cAAQ;AAHV,KAzCS,EA8CT;AACE,eAAS,CADX;AAEE,eAAS,KAFX;AAGE,cAAQ;AAHV,KA9CS,EAmDT;AACE,eAAS,CADX;AAEE,eAAS,QAFX;AAGE,cAAQ;AAHV,KAnDS;AALb,GA1qFO,CAJa;AA8uFtB,iBAAe;AACb,WAAO,CACL;AACE,cAAQ,MADV;AAEE,cAAQ;AAFV,KADK,EAKL;AACE,cAAQ,MADV;AAEE,cAAQ;AAFV,KALK,EASL;AACE,cAAQ,IADV;AAEE,cAAQ;AAFV,KATK,EAaL;AACE,cAAQ,QADV;AAEE,eAAS,CACP;AACE,gBAAQ,UADV;AAEE,gBAAQ;AAFV,OADO,EAKP;AACE,gBAAQ,MADV;AAEE,gBAAQ;AAFV,OALO,EASP;AACE,gBAAQ,MADV;AAEE,gBAAQ;AAFV,OATO,EAaP;AACE,gBAAQ,YADV;AAEE,gBAAQ;AAFV,OAbO;AAFX,KAbK,CADM;AAoCb,eAAW;AACT,sBAAgB,CACd,cADc,EAEd;AACE,iBAAS,IADX;AAEE,oBAAY,CACV,0BADU,EAEV,yBAFU,EAGV,sCAHU,EAIV,0BAJU,EAKV,uBALU,EAMV,uBANU,EAOV,sBAPU,EAQV,sCARU,EASV,yBATU;AAFd,OAFc,EAgBd;AACE,iBAAS,KADX;AAEE,oBAAY,CACV,yBADU,EAEV,iCAFU,EAGV,wBAHU,EAIV,2BAJU,EAKV,wBALU,EAMV,oBANU;AAFd,OAhBc,EA2Bd;AACE,iBAAS,IADX;AAEE,oBAAY,CACV,iCADU,EAEV,+BAFU,EAGV,4BAHU,EAIV,2BAJU,EAKV,4BALU,EAMV,2BANU;AAFd,OA3Bc,EAsCd;AACE,iBAAS,WADX;AAEE,oBAAY,CACV,2BADU,EAEV,4BAFU,EAGV,2BAHU,EAIV,yBAJU;AAFd,OAtCc,EA+Cd;AACE,iBAAS,KADX;AAEE,oBAAY,CACV,wCADU;AAFd,OA/Cc,EAqDd;AACE,iBAAS,KADX;AAEE,oBAAY,CACV,yBADU,EAEV,+BAFU;AAFd,OArDc,EA4Dd;AACE,iBAAS,IADX;AAEE,oBAAY,CACV,oCADU,EAEV,yBAFU;AAFd,OA5Dc,CADP;AAqET,qBAAe,CACb,aADa,EAEb;AACE,iBAAS,IADX;AAEE,oBAAY,CACV,oCADU,EAEV,6BAFU,EAGV,2BAHU,EAIV,6BAJU;AAFd,OAFa,EAWb;AACE,iBAAS,IADX;AAEE,oBAAY,CACV,wBADU,EAEV,uBAFU,EAGV,wBAHU,EAIV,yBAJU,EAKV,yBALU,EAMV,2BANU,EAOV,0BAPU,EAQV,0BARU,EASV,yBATU,EAUV,wBAVU,EAWV,wBAXU,EAYV,sBAZU;AAFd,OAXa;AArEN,KApCE;AAuIb,oBAAgB,CAvIH;AAwIb,mBAAe;AAxIF;AA9uFO,CAAjB,C;;;ACAP,+CAAe,YAAY,CAAE,C;;ACA7B,oDAAe,YAAY,CAAE,C;;ACA7B,4CAAe;AACb2N,cAAY,IADC;AAGb/G,SAAO;AACLgP,YAAQ;AACN3R,YAAM4L,OADA;AAENN,eAAS;AAFH;AADH,GAHM;AAUb3B,QAVa,kBAUL7H,CAVK,QAUuB;AAAA,QAAvB8H,MAAuB,QAAvBA,MAAuB;AAAA,QAAfjH,KAAe,QAAfA,KAAe;AAAA,QAARzG,IAAQ,QAARA,IAAQ;AAClC,WAAO4F,EAAE8H,OAAOnN,KAAP,CAAa4T,GAAf,EAAoB;AACzB3F,aAAO,CAAC/H,MAAMgP,MAAN,GAAe,QAAf,GAA0B,EAA3B,EAA+BzV,KAAKwO,KAApC,EAA2CxO,KAAK0V,WAAhD,CADkB;AAEzB3M,aAAO/I,KAAK+I;AAFa,KAApB,CAAP;AAID;AAfY,CAAf,E;;ACAA,ICAA,gEDAA,sBAAgC,cAAc,iBAAiB,mCAAmC,kIAAkI;AACpO,ICAA,yEDAA;;;;;;AEDkC;AAClC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+E;;ACvBA,+CAAe;AACbyE,cAAY,IADC;AAEbC,QAFa,kBAEL7H,CAFK,QAEoB;AAAA,QAApB8H,MAAoB,QAApBA,MAAoB;AAAA,QAAZ/H,QAAY,QAAZA,QAAY;;AAC/B,QAAI+H,OAAOiI,UAAX,EAAuB;AACrB,aAAOhQ,QAAP;AACD,KAFD,MAEO;AACL+H,aAAOkI,KAAP,CAAa,cAAb,EAA6B,YAAM;AACjClI,eAAOmI,YAAP;AACD,OAFD;AAGD;AACF;AAVY,CAAf,E;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;CAGA;;AACA,uF,CAEA;;AACA;AACA;CAGA;;AACA,IAAI,KAAJ,EAAgB,iBAUf;;AAED,sBAAAvE,CAAIjM,MAAJ,CAAWyQ,aAAX,GAA2B,KAA3B;AACA,sBAAAxE,CAAIyE,GAAJ,CAAQ,6BAAR,E,CACA;;AACA,sBAAAzE,CAAI0E,KAAJ,CAAU,SAAApW,CAAU,iBAAV,CAAV,E,CACA;;AACA,sBAAA0R,CAAIC,SAAJ,CAAc,SAAd,EAAyB,OAAzB;AACA,sBAAAD,CAAIC,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACA,sBAAAD,CAAIC,SAAJ,CAAc,OAAd,EAAuB;AAAA,SAAM,iFAAN;AAAA,CAAvB,E,CACA;;AACA,sBAAAD,CAAIC,SAAJ,CAAc,YAAd,EAA4B,UAA5B,E,CAEA;;AACA,sBAAAD,CAAI2E,SAAJ,CAAcC,SAAd,GAA0B,UAAU3W,IAAV,EAAgB;AACxC,MAAMoE,OAAO,KAAKzD,KAAL,CAAWyD,IAAxB;;AACA,MAAIpE,KAAK6E,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1B,WAAOT,OAAOpE,KAAK6T,KAAL,CAAW,CAAX,CAAd;AACD,GAFD,MAEO;AACL,WAAO7T,IAAP;AACD;AACF,CAPD;;AASO,SAAS4W,SAAT,GAAsB;AAC3B,MAAMC,SAAS,IAAI,6BAAJ,CAAW;AACxBzS,UAAM,iBAAA9D,CAAS8D,IADS;AAExB0S,UAAM,SAFkB;AAGxBC,cAAU,KAHc;AAIxB7M,YAAA,aAJwB;AAKxB8M,oBAAgB,wBAAClI,EAAD,EAAKgD,IAAL,EAAWmF,KAAX,EAAqB;AACnC,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAP;AACD,OAFD,MAEO,IAAInI,GAAGnL,IAAP,EAAa;AAClB,YAAI,SAAAnD,CAAMmC,qBAAV,EAAiC;AAC/B,iBAAO,KAAP;AACD;;AACD,eAAO;AACLuU,oBAAUpI,GAAGnL;AADR,SAAP;AAGD,OAPM,MAOA;AACL,eAAO;AAAE+O,aAAG,CAAL;AAAQG,aAAG;AAAX,SAAP;AACD;AACF;AAlBuB,GAAX,CAAf,CAD2B,CAsB3B;;AACAgE,SAAOhF,UAAP,CAAkB,UAAC/C,EAAD,EAAKgD,IAAL,EAAW1E,IAAX,EAAoB;AACpC,QAAI,CAAC,eAAe9J,IAAf,CAAoBwL,GAAG9O,IAAvB,CAAL,EAAmC;AACjCoN,WAAK7K,OAAO+B,MAAP,CAAc,EAAd,EAAkBwK,EAAlB,EAAsB;AACzB9O,cAAM8O,GAAG9O,IAAH,GAAU;AADS,OAAtB,CAAL;AAGD,KAJD,MAIO;AACLoN;AACD;AACF,GARD;AAUA,MAAMzN,UAAU,EAAhB;AAEAwX,EAAA,eAAAA,CAAgB;AAAEpF,SAAA,sBAAF;AAAOpS,oBAAP;AAAgBkX,kBAAhB;AAAwBvW,cAAA,iBAAAA;AAAxB,GAAhB;AACA8W,EAAA,UAAAA,CAAW;AAAErF,SAAA,sBAAF;AAAOpS,oBAAP;AAAgBkX,kBAAhB;AAAwBvW,cAAA,iBAAAA;AAAxB,GAAX;AAEA,MAAM+W,MAAM,IAAI,sBAAJ,CACV9U,OAAO+B,MAAP,CAAc3E,OAAd,EAAuB;AACrBkX,kBADqB;AAErB3I,UAFqB,kBAEb7H,CAFa,EAEV;AACT,aAAOA,EAAE,KAAF,EAAS;AAAEiR,eAAO;AAAEC,cAAI;AAAN;AAAT,OAAT,EAAkC,CACvClR,EAAE,aAAF,EAAiB;AAAEmR,aAAK;AAAP,OAAjB,CADuC,CAAlC,CAAP;AAGD;AANoB,GAAvB,CADU,CAAZ;AAWA,SAAO;AAAEH,YAAF;AAAOR;AAAP,GAAP;AACD,C;;;ACrGD;AAEA,iFAAe;AAAA,SAAW,IAAIY,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,qBACjC,SAAAf,EADiC;AAAA,QACjDS,GADiD,cACjDA,GADiD;AAAA,QAC5CR,MAD4C,cAC5CA,MAD4C;;AAAA,QAEjDe,GAFiD,GAEzCC,OAFyC,CAEjDD,GAFiD;AAAA,QAGjDE,QAHiD,GAGpCjB,OAAOa,OAAP,CAAeE,GAAf,EAAoB/T,KAHgB,CAGjDiU,QAHiD;;AAKzD,QAAIA,aAAaF,GAAjB,EAAsB;AACpB,aAAOD,OAAO;AAAEC,aAAKE;AAAP,OAAP,CAAP;AACD;;AAEDjB,WAAOhX,IAAP,CAAY+X,GAAZ;AACAf,WAAOkB,OAAP,CAAe;AAAA,aAAML,QAAQL,GAAR,CAAN;AAAA,KAAf;AACD,GAXyB,CAAX;AAAA,CAAf,E",
      "file": "server-bundle.js",
      "sourcesContent": [
        " \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// require() chunk loading for javascript\n\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] !== 0) {\n \t\t\tvar chunk = require(\"./\" + chunkId + \".server-bundle.js\");\n \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n \t\t\tfor(var moduleId in moreModules) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/web_accumulate/\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 90);\n",
        "module.exports = require(\"vue\");",
        "/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n",
        "var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n",
        "// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n",
        "var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n",
        "module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n",
        "module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n",
        "var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n",
        "// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n",
        "var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n",
        "// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n",
        "var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n",
        "var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n",
        "var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n",
        "var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n",
        "var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n",
        "// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n",
        "var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n",
        "module.exports = {};\n",
        "'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n",
        "'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n",
        "'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n",
        "module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n",
        "var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n",
        "var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n",
        "// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n",
        "// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n",
        "// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n",
        "// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n",
        "// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n",
        "'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n",
        "// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n",
        "'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n",
        "'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n",
        "// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n",
        "/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n;(function(root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.NProgress = factory();\n  }\n\n})(this, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n\n",
        "module.exports = false;\n",
        "var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n",
        "module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n",
        "module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n",
        "var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n",
        "// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n",
        "// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n",
        "var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n",
        "'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n",
        "// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n",
        "var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n",
        "// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n",
        "var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n",
        "'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n",
        "var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n",
        "'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n",
        "'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n",
        "module.exports = require(\"vue-router\");",
        "'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n",
        "// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n",
        "var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n",
        "module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n",
        "// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n",
        "var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n",
        "var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n",
        "'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n",
        "var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n",
        "var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n",
        "// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n",
        "exports.f = {}.propertyIsEnumerable;\n",
        "// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n",
        "module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n",
        "// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n",
        "// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n",
        "// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n",
        "// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n",
        "var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n",
        "var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n",
        "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n",
        "// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n",
        "// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n",
        "var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n",
        "// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n",
        "// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n",
        "var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n",
        "module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n",
        "var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n",
        "var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n",
        "'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n",
        "var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n",
        "exports.f = Object.getOwnPropertySymbols;\n",
        "// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n",
        "// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n",
        "'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n",
        "var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n",
        "// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n",
        "// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n",
        "var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n",
        "'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n",
        "var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n",
        "// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n",
        "// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = require('./_is-regexp');\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarButton.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarButton.vue?vue&type=style&index=0&lang=stylus&\"",
        "'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n",
        "var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n",
        "module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SearchBox.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SearchBox.vue?vue&type=style&index=0&lang=stylus&\"",
        "var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n",
        "// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n",
        "var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n",
        "// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n",
        "'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownTransition.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownTransition.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownLink.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownLink.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLinks.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLinks.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Page.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Page.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarLink.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarLink.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarGroup.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarGroup.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Sidebar.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Sidebar.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SWUpdatePopup.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SWUpdatePopup.vue?vue&type=style&index=0&lang=stylus&\"",
        "import mod from \"-!../../_css-loader@0.28.11@css-loader/locals.js??ref--8-oneOf-1-0!../../_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--8-oneOf-1-1!./prism-tomorrow.css?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../_css-loader@0.28.11@css-loader/locals.js??ref--8-oneOf-1-0!../../_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--8-oneOf-1-1!./prism-tomorrow.css?vue&type=style&index=0&lang=css&\"",
        "import mod from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!./theme.styl?vue&type=style&index=1&lang=stylus&\"; export default mod; export * from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!./theme.styl?vue&type=style&index=1&lang=stylus&\"",
        "'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n",
        "var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n",
        "'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n",
        "'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n",
        "'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n",
        "import mod from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./OutboundLink.vue?vue&type=style&index=0&lang=stylus&\"; export default mod; export * from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./OutboundLink.vue?vue&type=style&index=0&lang=stylus&\"",
        "export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}",
        "export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}",
        "export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}",
        "import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}",
        "export function injectMixins (options, mixins) {\n  if (!options.mixins) {\n    options.mixins = []\n  }\n  options.mixins.push(...mixins)\n}\n\nexport function findPageForPath (pages, path) {\n  for (let i = 0; i < pages.length; i++) {\n    const page = pages[i]\n    if (page.path === path) {\n      return page\n    }\n  }\n  return {\n    path: '',\n    frontmatter: {}\n  }\n}\n",
        "import Vue from 'vue'\nimport { findPageForPath } from './util'\n\nexport default function dataMixin (siteData) {\n  prepare(siteData)\n  const store = new Vue({\n    data: { siteData }\n  })\n\n  if (module.hot) {\n    module.hot.accept('./.temp/siteData', () => {\n      prepare(siteData)\n      store.siteData = siteData\n    })\n  }\n\n  return {\n    computed: {\n      $site () {\n        return store.siteData\n      },\n      $localeConfig () {\n        const { locales = {}} = this.$site\n        let targetLang\n        let defaultLang\n        for (const path in locales) {\n          if (path === '/') {\n            defaultLang = locales[path]\n          } else if (this.$page.path.indexOf(path) === 0) {\n            targetLang = locales[path]\n          }\n        }\n        return targetLang || defaultLang || {}\n      },\n      $siteTitle () {\n        return this.$localeConfig.title || this.$site.title || ''\n      },\n      $title () {\n        const page = this.$page\n        const siteTitle = this.$siteTitle\n        const selfTitle = page.frontmatter.home ? null : (\n          page.frontmatter.title || // explicit title\n          page.title // inferred title\n        )\n        return siteTitle\n          ? selfTitle\n            ? (selfTitle + ' | ' + siteTitle)\n            : siteTitle\n          : selfTitle || 'VuePress'\n      },\n      $description () {\n        // #565 hoist description from meta\n        if (this.$page.frontmatter.meta) {\n          const descriptionMeta = this.$page.frontmatter.meta.filter(item => item.name === 'description')[0]\n          if (descriptionMeta) return descriptionMeta.content\n        }\n        return this.$page.frontmatter.description || this.$localeConfig.description || this.$site.description || ''\n      },\n      $lang () {\n        return this.$page.frontmatter.lang || this.$localeConfig.lang || 'en-US'\n      },\n      $localePath () {\n        return this.$localeConfig.path || '/'\n      },\n      $themeLocaleConfig () {\n        return (this.$site.themeConfig.locales || {})[this.$localePath] || {}\n      },\n      $page () {\n        return findPageForPath(\n          this.$site.pages,\n          this.$route.path\n        )\n      }\n    }\n  }\n}\n\nfunction prepare (siteData) {\n  siteData.pages.forEach(page => {\n    if (!page.frontmatter) {\n      page.frontmatter = {}\n    }\n  })\n  if (siteData.locales) {\n    Object.keys(siteData.locales).forEach(path => {\n      siteData.locales[path].path = path\n    })\n  }\n  Object.freeze(siteData)\n}\n",
        "// It is not yet time to use Vuex to manage the global state\n// singleton object as a global store.\nconst state = {\n  disableScrollBehavior: false\n}\n\nexport default state\n",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"theme-container\",class:_vm.pageClasses,on:{\"touchstart\":_vm.onTouchStart,\"touchend\":_vm.onTouchEnd}},[(_vm.shouldShowNavbar)?_c('Navbar',{on:{\"toggle-sidebar\":_vm.toggleSidebar}}):_vm._e(),_vm._ssrNode(\" <div class=\\\"sidebar-mask\\\"></div> \"),_c('Sidebar',{attrs:{\"items\":_vm.sidebarItems},on:{\"toggle-sidebar\":_vm.toggleSidebar}},[_vm._t(\"sidebar-top\",null,{slot:\"top\"}),_vm._v(\" \"),_vm._t(\"sidebar-bottom\",null,{slot:\"bottom\"})],2),_vm._ssrNode(\" \"),(_vm.$page.frontmatter.layout)?_vm._ssrNode(\"<div class=\\\"custom-layout\\\">\",\"</div>\",[_c(_vm.$page.frontmatter.layout,{tag:\"component\"})],1):(_vm.$page.frontmatter.home)?_c('Home'):_c('Page',{attrs:{\"sidebar-items\":_vm.sidebarItems}},[_vm._t(\"page-top\",null,{slot:\"top\"}),_vm._v(\" \"),_vm._t(\"page-bottom\",null,{slot:\"bottom\"})],2),_vm._ssrNode(\" \"),_c('SWUpdatePopup',{attrs:{\"updateEvent\":_vm.swUpdateEvent}})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"home\"},[_vm._ssrNode(\"<div class=\\\"hero\\\">\",\"</div>\",[_vm._ssrNode(((_vm.data.heroImage)?(\"<img\"+(_vm._ssrAttr(\"src\",_vm.$withBase(_vm.data.heroImage)))+\" alt=\\\"hero\\\">\"):\"<!---->\")+\" <h1>\"+_vm._ssrEscape(_vm._s(_vm.data.heroText || _vm.$title || 'Hello'))+\"</h1> <p class=\\\"description\\\">\"+_vm._ssrEscape(\"\\n      \"+_vm._s(_vm.data.tagline || _vm.$description || 'Welcome to your VuePress site')+\"\\n    \")+\"</p> \"),(_vm.data.actionText && _vm.data.actionLink)?_vm._ssrNode(\"<p class=\\\"action\\\">\",\"</p>\",[_c('NavLink',{staticClass:\"action-button\",attrs:{\"item\":_vm.actionLink}})],1):_vm._e()],2),_vm._ssrNode(\" \"+((_vm.data.features && _vm.data.features.length)?(\"<div class=\\\"features\\\">\"+(_vm._ssrList((_vm.data.features),function(feature){return (\"<div class=\\\"feature\\\"><h2>\"+_vm._ssrEscape(_vm._s(feature.title))+\"</h2> <p>\"+_vm._ssrEscape(_vm._s(feature.details))+\"</p></div>\")}))+\"</div>\"):\"<!---->\")+\" \"),_c('Content',{attrs:{\"custom\":\"\"}}),_vm._ssrNode(\" \"+((_vm.data.footer)?(\"<div class=\\\"footer\\\">\"+_vm._ssrEscape(\"\\n    \"+_vm._s(_vm.data.footer)+\"\\n  \")+\"</div>\"):\"<!---->\"))],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.isExternal(_vm.link))?_c('router-link',{staticClass:\"nav-link\",attrs:{\"to\":_vm.link,\"exact\":_vm.exact}},[_vm._v(_vm._s(_vm.item.text))]):_c('a',{staticClass:\"nav-link external\",attrs:{\"href\":_vm.link,\"target\":_vm.isMailto(_vm.link) || _vm.isTel(_vm.link) ? null : '_blank',\"rel\":_vm.isMailto(_vm.link) || _vm.isTel(_vm.link) ? null : 'noopener noreferrer'}},[_vm._v(\"\\n  \"+_vm._s(_vm.item.text)+\"\\n  \"),_c('OutboundLink')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "export const hashRE = /#.*$/\nexport const extRE = /\\.(md|html)$/\nexport const endingSlashRE = /\\/$/\nexport const outboundRE = /^(https?:|mailto:|tel:)/\n\nexport function normalize (path) {\n  return decodeURI(path)\n    .replace(hashRE, '')\n    .replace(extRE, '')\n}\n\nexport function getHash (path) {\n  const match = path.match(hashRE)\n  if (match) {\n    return match[0]\n  }\n}\n\nexport function isExternal (path) {\n  return outboundRE.test(path)\n}\n\nexport function isMailto (path) {\n  return /^mailto:/.test(path)\n}\n\nexport function isTel (path) {\n  return /^tel:/.test(path)\n}\n\nexport function ensureExt (path) {\n  if (isExternal(path)) {\n    return path\n  }\n  const hashMatch = path.match(hashRE)\n  const hash = hashMatch ? hashMatch[0] : ''\n  const normalized = normalize(path)\n\n  if (endingSlashRE.test(normalized)) {\n    return path\n  }\n  return normalized + '.html' + hash\n}\n\nexport function isActive (route, path) {\n  const routeHash = route.hash\n  const linkHash = getHash(path)\n  if (linkHash && routeHash !== linkHash) {\n    return false\n  }\n  const routePath = normalize(route.path)\n  const pagePath = normalize(path)\n  return routePath === pagePath\n}\n\nexport function resolvePage (pages, rawPath, base) {\n  if (base) {\n    rawPath = resolvePath(rawPath, base)\n  }\n  const path = normalize(rawPath)\n  for (let i = 0; i < pages.length; i++) {\n    if (normalize(pages[i].path) === path) {\n      return Object.assign({}, pages[i], {\n        type: 'page',\n        path: ensureExt(rawPath)\n      })\n    }\n  }\n  console.error(`[vuepress] No matching page found for sidebar item \"${rawPath}\"`)\n  return {}\n}\n\nfunction resolvePath (relative, base, append) {\n  const firstChar = relative.charAt(0)\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  const stack = base.split('/')\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop()\n  }\n\n  // resolve relative path\n  const segments = relative.replace(/^\\//, '').split('/')\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i]\n    if (segment === '..') {\n      stack.pop()\n    } else if (segment !== '.') {\n      stack.push(segment)\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('')\n  }\n\n  return stack.join('/')\n}\n\nexport function resolveSidebarItems (page, route, site, localePath) {\n  const { pages, themeConfig } = site\n\n  const localeConfig = localePath && themeConfig.locales\n    ? themeConfig.locales[localePath] || themeConfig\n    : themeConfig\n\n  const pageSidebarConfig = page.frontmatter.sidebar || localeConfig.sidebar || themeConfig.sidebar\n  if (pageSidebarConfig === 'auto') {\n    return resolveHeaders(page)\n  }\n\n  const sidebarConfig = localeConfig.sidebar || themeConfig.sidebar\n  if (!sidebarConfig) {\n    return []\n  } else {\n    const { base, config } = resolveMatchingConfig(route, sidebarConfig)\n    return config\n      ? config.map(item => resolveItem(item, pages, base))\n      : []\n  }\n}\n\nfunction resolveHeaders (page) {\n  const headers = groupHeaders(page.headers || [])\n  return [{\n    type: 'group',\n    collapsable: false,\n    title: page.title,\n    children: headers.map(h => ({\n      type: 'auto',\n      title: h.title,\n      basePath: page.path,\n      path: page.path + '#' + h.slug,\n      children: h.children || []\n    }))\n  }]\n}\n\nexport function groupHeaders (headers) {\n  // group h3s under h2\n  headers = headers.map(h => Object.assign({}, h))\n  let lastH2\n  headers.forEach(h => {\n    if (h.level === 2) {\n      lastH2 = h\n    } else if (lastH2) {\n      (lastH2.children || (lastH2.children = [])).push(h)\n    }\n  })\n  return headers.filter(h => h.level === 2)\n}\n\nexport function resolveNavLinkItem (linkItem) {\n  return Object.assign(linkItem, {\n    type: linkItem.items && linkItem.items.length ? 'links' : 'link'\n  })\n}\n\nexport function resolveMatchingConfig (route, config) {\n  if (Array.isArray(config)) {\n    return {\n      base: '/',\n      config: config\n    }\n  }\n  for (const base in config) {\n    if (ensureEndingSlash(route.path).indexOf(base) === 0) {\n      return {\n        base,\n        config: config[base]\n      }\n    }\n  }\n  return {}\n}\n\nfunction ensureEndingSlash (path) {\n  return /(\\.html|\\/)$/.test(path)\n    ? path\n    : path + '/'\n}\n\nfunction resolveItem (item, pages, base, isNested) {\n  if (typeof item === 'string') {\n    return resolvePage(pages, item, base)\n  } else if (Array.isArray(item)) {\n    return Object.assign(resolvePage(pages, item[0], base), {\n      title: item[1]\n    })\n  } else {\n    if (isNested) {\n      console.error(\n        '[vuepress] Nested sidebar groups are not supported. ' +\n        'Consider using navbar + categories instead.'\n      )\n    }\n    const children = item.children || []\n    return {\n      type: 'group',\n      title: item.title,\n      children: children.map(child => resolveItem(child, pages, base, true)),\n      collapsable: item.collapsable !== false\n    }\n  }\n}\n",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { isExternal, isMailto, isTel, ensureExt } from './util'\n\nexport default {\n  props: {\n    item: {\n      required: true\n    }\n  },\n\n  computed: {\n    link () {\n      return ensureExt(this.item.link)\n    },\n\n    exact () {\n      if (this.$site.locales) {\n        return Object.keys(this.$site.locales).some(rootLink => rootLink === this.link)\n      }\n      return this.link === '/'\n    }\n  },\n\n  methods: {\n    isExternal,\n    isMailto,\n    isTel\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLink.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLink.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./NavLink.vue?vue&type=template&id=4d7db10e&\"\nimport script from \"./NavLink.vue?vue&type=script&lang=js&\"\nexport * from \"./NavLink.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"66179a98\"\n  \n)\n\ncomponent.options.__file = \"NavLink.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport NavLink from './NavLink.vue'\n\nexport default {\n  components: { NavLink },\n\n  computed: {\n    data () {\n      return this.$page.frontmatter\n    },\n\n    actionLink () {\n      return {\n        link: this.data.actionLink,\n        text: this.data.actionText\n      }\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=06612431&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./Home.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"5f03fd10\"\n  \n)\n\ncomponent.options.__file = \"Home.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:\"navbar\"},[_c('SidebarButton',{on:{\"toggle-sidebar\":function($event){_vm.$emit('toggle-sidebar')}}}),_vm._ssrNode(\" \"),_c('router-link',{staticClass:\"home-link\",attrs:{\"to\":_vm.$localePath}},[(_vm.$site.themeConfig.logo)?_c('img',{staticClass:\"logo\",attrs:{\"src\":_vm.$withBase(_vm.$site.themeConfig.logo),\"alt\":_vm.$siteTitle}}):_vm._e(),_vm._v(\" \"),(_vm.$siteTitle)?_c('span',{ref:\"siteName\",staticClass:\"site-name\",class:{ 'can-hide': _vm.$site.themeConfig.logo }},[_vm._v(_vm._s(_vm.$siteTitle))]):_vm._e()]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"links\\\"\"+(_vm._ssrStyle(null,{\n      'max-width': _vm.linksWrapMaxWidth + 'px'\n    }, null))+\">\",\"</div>\",[(_vm.isAlgoliaSearch)?_c('AlgoliaSearchBox',{attrs:{\"options\":_vm.algolia}}):(_vm.$site.themeConfig.search !== false)?_c('SearchBox'):_vm._e(),_vm._ssrNode(\" \"),_c('NavLinks',{staticClass:\"can-hide\"})],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar-button\",on:{\"click\":function($event){_vm.$emit('toggle-sidebar')}}},[_vm._ssrNode(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 448 512\\\" class=\\\"icon\\\"><path fill=\\\"currentColor\\\" d=\\\"M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z\\\"></path></svg>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "import { render, staticRenderFns } from \"./SidebarButton.vue?vue&type=template&id=07ab6e96&\"\nvar script = {}\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SidebarButton.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"2864d636\"\n  \n)\n\ncomponent.options.__file = \"SidebarButton.vue\"\nexport default component.exports",
        "export default {}\n",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"search-box\"},[_vm._ssrNode(\"<input aria-label=\\\"Search\\\" autocomplete=\\\"off\\\" spellcheck=\\\"false\\\"\"+(_vm._ssrAttr(\"value\",_vm.query))+(_vm._ssrClass(null,{ 'focused': _vm.focused }))+\"> \"+((_vm.showSuggestions)?(\"<ul\"+(_vm._ssrClass(\"suggestions\",{ 'align-right': _vm.alignRight }))+\">\"+(_vm._ssrList((_vm.suggestions),function(s,i){return (\"<li\"+(_vm._ssrClass(\"suggestion\",{ focused: i === _vm.focusIndex }))+\"><a\"+(_vm._ssrAttr(\"href\",s.path))+\"><span class=\\\"page-title\\\">\"+_vm._ssrEscape(_vm._s(s.title || s.path))+\"</span> \"+((s.header)?(\"<span class=\\\"header\\\">\"+_vm._ssrEscape(\"> \"+_vm._s(s.header.title))+\"</span>\"):\"<!---->\")+\"</a></li>\")}))+\"</ul>\"):\"<!---->\"))])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data () {\n    return {\n      query: '',\n      focused: false,\n      focusIndex: 0\n    }\n  },\n\n  computed: {\n    showSuggestions () {\n      return (\n        this.focused &&\n        this.suggestions &&\n        this.suggestions.length\n      )\n    },\n\n    suggestions () {\n      const query = this.query.trim().toLowerCase()\n      if (!query) {\n        return\n      }\n\n      const { pages, themeConfig } = this.$site\n      const max = themeConfig.searchMaxSuggestions || 5\n      const localePath = this.$localePath\n      const matches = item => (\n        item.title &&\n        item.title.toLowerCase().indexOf(query) > -1\n      )\n      const res = []\n      for (let i = 0; i < pages.length; i++) {\n        if (res.length >= max) break\n        const p = pages[i]\n        // filter out results that do not match current locale\n        if (this.getPageLocalePath(p) !== localePath) {\n          continue\n        }\n        if (matches(p)) {\n          res.push(p)\n        } else if (p.headers) {\n          for (let j = 0; j < p.headers.length; j++) {\n            if (res.length >= max) break\n            const h = p.headers[j]\n            if (matches(h)) {\n              res.push(Object.assign({}, p, {\n                path: p.path + '#' + h.slug,\n                header: h\n              }))\n            }\n          }\n        }\n      }\n      return res\n    },\n\n    // make suggestions align right when there are not enough items\n    alignRight () {\n      const navCount = (this.$site.themeConfig.nav || []).length\n      const repo = this.$site.repo ? 1 : 0\n      return navCount + repo <= 2\n    }\n  },\n\n  methods: {\n    getPageLocalePath (page) {\n      for (const localePath in this.$site.locales || {}) {\n        if (localePath !== '/' && page.path.indexOf(localePath) === 0) {\n          return localePath\n        }\n      }\n      return '/'\n    },\n\n    onUp () {\n      if (this.showSuggestions) {\n        if (this.focusIndex > 0) {\n          this.focusIndex--\n        } else {\n          this.focusIndex = this.suggestions.length - 1\n        }\n      }\n    },\n\n    onDown () {\n      if (this.showSuggestions) {\n        if (this.focusIndex < this.suggestions.length - 1) {\n          this.focusIndex++\n        } else {\n          this.focusIndex = 0\n        }\n      }\n    },\n\n    go (i) {\n      if (!this.showSuggestions) {\n        return\n      }\n      this.$router.push(this.suggestions[i].path)\n      this.query = ''\n      this.focusIndex = 0\n    },\n\n    focus (i) {\n      this.focusIndex = i\n    },\n\n    unfocus () {\n      this.focusIndex = -1\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SearchBox.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SearchBox.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./SearchBox.vue?vue&type=template&id=a25c4144&\"\nimport script from \"./SearchBox.vue?vue&type=script&lang=js&\"\nexport * from \"./SearchBox.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SearchBox.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"41523f3a\"\n  \n)\n\ncomponent.options.__file = \"SearchBox.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.userLinks.length || _vm.repoLink)?_c('nav',{staticClass:\"nav-links\"},[_vm._l((_vm.userLinks),function(item){return _vm._ssrNode(\"<div class=\\\"nav-item\\\">\",\"</div>\",[(item.type === 'links')?_c('DropdownLink',{attrs:{\"item\":item}}):_c('NavLink',{attrs:{\"item\":item}})],1)}),_vm._ssrNode(\" \"),(_vm.repoLink)?_vm._ssrNode(\"<a\"+(_vm._ssrAttr(\"href\",_vm.repoLink))+\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" class=\\\"repo-link\\\">\",\"</a>\",[_vm._ssrNode(_vm._ssrEscape(\"\\n    \"+_vm._s(_vm.repoLabel)+\"\\n    \")),_c('OutboundLink')],2):_vm._e()],2):_vm._e()}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dropdown-wrapper\",class:{ open: _vm.open }},[_vm._ssrNode(\"<a class=\\\"dropdown-title\\\"><span class=\\\"title\\\">\"+_vm._ssrEscape(_vm._s(_vm.item.text))+\"</span> <span\"+(_vm._ssrClass(\"arrow\",_vm.open ? 'down' : 'right'))+\"></span></a> \"),_c('DropdownTransition',[_c('ul',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.open),expression:\"open\"}],staticClass:\"nav-dropdown\"},_vm._l((_vm.item.items),function(subItem,index){return _c('li',{key:subItem.link || index,staticClass:\"dropdown-item\"},[(subItem.type === 'links')?_c('h4',[_vm._v(_vm._s(subItem.text))]):_vm._e(),_vm._v(\" \"),(subItem.type === 'links')?_c('ul',{staticClass:\"dropdown-subitem-wrapper\"},_vm._l((subItem.items),function(childSubItem){return _c('li',{key:childSubItem.link,staticClass:\"dropdown-subitem\"},[_c('NavLink',{attrs:{\"item\":childSubItem}})],1)})):_c('NavLink',{attrs:{\"item\":subItem}})],1)}))])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"name\":\"dropdown\"},on:{\"enter\":_vm.setHeight,\"after-enter\":_vm.unsetHeight,\"before-leave\":_vm.setHeight}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'DropdownTransition',\n\n  methods: {\n    setHeight (items) {\n      // explicitly set height so that it can be transitioned\n      items.style.height = items.scrollHeight + 'px'\n    },\n\n    unsetHeight (items) {\n      items.style.height = ''\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownTransition.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownTransition.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./DropdownTransition.vue?vue&type=template&id=9764533c&\"\nimport script from \"./DropdownTransition.vue?vue&type=script&lang=js&\"\nexport * from \"./DropdownTransition.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./DropdownTransition.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"424f379f\"\n  \n)\n\ncomponent.options.__file = \"DropdownTransition.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport NavLink from './NavLink.vue'\nimport DropdownTransition from './DropdownTransition.vue'\n\nexport default {\n  components: { NavLink, DropdownTransition },\n\n  data () {\n    return {\n      open: false\n    }\n  },\n\n  props: {\n    item: {\n      required: true\n    }\n  },\n\n  methods: {\n    toggle () {\n      this.open = !this.open\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownLink.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./DropdownLink.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./DropdownLink.vue?vue&type=template&id=72e438d1&\"\nimport script from \"./DropdownLink.vue?vue&type=script&lang=js&\"\nexport * from \"./DropdownLink.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./DropdownLink.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"8e5aa578\"\n  \n)\n\ncomponent.options.__file = \"DropdownLink.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DropdownLink from './DropdownLink.vue'\nimport { resolveNavLinkItem } from './util'\nimport NavLink from './NavLink.vue'\n\nexport default {\n  components: { NavLink, DropdownLink },\n\n  computed: {\n    userNav () {\n      return this.$themeLocaleConfig.nav || this.$site.themeConfig.nav || []\n    },\n\n    nav () {\n      const { locales } = this.$site\n      if (locales && Object.keys(locales).length > 1) {\n        const currentLink = this.$page.path\n        const routes = this.$router.options.routes\n        const themeLocales = this.$site.themeConfig.locales || {}\n        const languageDropdown = {\n          text: this.$themeLocaleConfig.selectText || 'Languages',\n          items: Object.keys(locales).map(path => {\n            const locale = locales[path]\n            const text = themeLocales[path] && themeLocales[path].label || locale.lang\n            let link\n            // Stay on the current page\n            if (locale.lang === this.$lang) {\n              link = currentLink\n            } else {\n              // Try to stay on the same page\n              link = currentLink.replace(this.$localeConfig.path, path)\n              // fallback to homepage\n              if (!routes.some(route => route.path === link)) {\n                link = path\n              }\n            }\n            return { text, link }\n          })\n        }\n        return [...this.userNav, languageDropdown]\n      }\n      return this.userNav\n    },\n\n    userLinks () {\n      return (this.nav || []).map(link => {\n        return Object.assign(resolveNavLinkItem(link), {\n          items: (link.items || []).map(resolveNavLinkItem)\n        })\n      })\n    },\n\n    repoLink () {\n      const { repo } = this.$site.themeConfig\n      if (repo) {\n        return /^https?:/.test(repo)\n          ? repo\n          : `https://github.com/${repo}`\n      }\n    },\n\n    repoLabel () {\n      if (!this.repoLink) return\n      if (this.$site.themeConfig.repoLabel) {\n        return this.$site.themeConfig.repoLabel\n      }\n\n      const repoHost = this.repoLink.match(/^https?:\\/\\/[^/]+/)[0]\n      const platforms = ['GitHub', 'GitLab', 'Bitbucket']\n      for (let i = 0; i < platforms.length; i++) {\n        const platform = platforms[i]\n        if (new RegExp(platform, 'i').test(repoHost)) {\n          return platform\n        }\n      }\n\n      return 'Source'\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLinks.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NavLinks.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./NavLinks.vue?vue&type=template&id=2b07c402&\"\nimport script from \"./NavLinks.vue?vue&type=script&lang=js&\"\nexport * from \"./NavLinks.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./NavLinks.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"55847622\"\n  \n)\n\ncomponent.options.__file = \"NavLinks.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SidebarButton from './SidebarButton.vue'\nimport AlgoliaSearchBox from '@AlgoliaSearchBox'\nimport SearchBox from './SearchBox.vue'\nimport NavLinks from './NavLinks.vue'\n\nexport default {\n  components: { SidebarButton, NavLinks, SearchBox, AlgoliaSearchBox },\n\n  data () {\n    return {\n      linksWrapMaxWidth: null\n    }\n  },\n\n  mounted () {\n    const MOBILE_DESKTOP_BREAKPOINT = 719 // refer to config.styl\n    const NAVBAR_VERTICAL_PADDING = parseInt(css(this.$el, 'paddingLeft')) + parseInt(css(this.$el, 'paddingRight'))\n    const handleLinksWrapWidth = () => {\n      if (document.documentElement.clientWidth < MOBILE_DESKTOP_BREAKPOINT) {\n        this.linksWrapMaxWidth = null\n      } else {\n        this.linksWrapMaxWidth = this.$el.offsetWidth - NAVBAR_VERTICAL_PADDING -\n          (this.$refs.siteName && this.$refs.siteName.offsetWidth || 0)\n      }\n    }\n    handleLinksWrapWidth()\n    window.addEventListener('resize', handleLinksWrapWidth, false)\n  },\n\n  computed: {\n    algolia () {\n      return this.$themeLocaleConfig.algolia || this.$site.themeConfig.algolia || {}\n    },\n\n    isAlgoliaSearch () {\n      return this.algolia && this.algolia.apiKey && this.algolia.indexName\n    }\n  }\n}\n\nfunction css (el, property) {\n  // NOTE: Known bug, will return 'auto' if style value is 'auto'\n  const win = el.ownerDocument.defaultView\n  // null means not to return pseudo styles\n  return win.getComputedStyle(el, null)[property]\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Navbar.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./Navbar.vue?vue&type=template&id=07d000ac&\"\nimport script from \"./Navbar.vue?vue&type=script&lang=js&\"\nexport * from \"./Navbar.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./Navbar.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"b436682e\"\n  \n)\n\ncomponent.options.__file = \"Navbar.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page\"},[_vm._t(\"top\"),_vm._ssrNode(\" \"),_c('Content',{attrs:{\"custom\":false}}),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div class=\\\"page-edit\\\">\",\"</div>\",[(_vm.editLink)?_vm._ssrNode(\"<div class=\\\"edit-link\\\">\",\"</div>\",[_vm._ssrNode(\"<a\"+(_vm._ssrAttr(\"href\",_vm.editLink))+\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\"+_vm._ssrEscape(_vm._s(_vm.editLinkText))+\"</a> \"),_c('OutboundLink')],2):_vm._e(),_vm._ssrNode(\" \"+((_vm.lastUpdated)?(\"<div class=\\\"last-updated\\\"><span class=\\\"prefix\\\">\"+_vm._ssrEscape(_vm._s(_vm.lastUpdatedText)+\": \")+\"</span> <span class=\\\"time\\\">\"+_vm._ssrEscape(_vm._s(_vm.lastUpdated))+\"</span></div>\"):\"<!---->\"))],2),_vm._ssrNode(\" \"),(_vm.prev || _vm.next)?_vm._ssrNode(\"<div class=\\\"page-nav\\\">\",\"</div>\",[_vm._ssrNode(\"<p class=\\\"inner\\\">\",\"</p>\",[(_vm.prev)?_vm._ssrNode(\"<span class=\\\"prev\\\">\",\"</span>\",[_vm._ssrNode(\"\\n        ←\\n        \"),(_vm.prev)?_c('router-link',{staticClass:\"prev\",attrs:{\"to\":_vm.prev.path}},[_vm._v(\"\\n          \"+_vm._s(_vm.prev.title || _vm.prev.path)+\"\\n        \")]):_vm._e()],2):_vm._e(),_vm._ssrNode(\" \"),(_vm.next)?_vm._ssrNode(\"<span class=\\\"next\\\">\",\"</span>\",[(_vm.next)?_c('router-link',{attrs:{\"to\":_vm.next.path}},[_vm._v(\"\\n          \"+_vm._s(_vm.next.title || _vm.next.path)+\"\\n        \")]):_vm._e(),_vm._ssrNode(\"\\n        →\\n      \")],2):_vm._e()],2)]):_vm._e(),_vm._ssrNode(\" \"),_vm._t(\"bottom\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { resolvePage, normalize, outboundRE, endingSlashRE } from './util'\n\nexport default {\n  props: ['sidebarItems'],\n\n  computed: {\n    lastUpdated () {\n      if (this.$page.lastUpdated) {\n        return new Date(this.$page.lastUpdated).toLocaleString(this.$lang)\n      }\n    },\n\n    lastUpdatedText () {\n      if (typeof this.$themeLocaleConfig.lastUpdated === 'string') {\n        return this.$themeLocaleConfig.lastUpdated\n      }\n      if (typeof this.$site.themeConfig.lastUpdated === 'string') {\n        return this.$site.themeConfig.lastUpdated\n      }\n      return 'Last Updated'\n    },\n\n    prev () {\n      const prev = this.$page.frontmatter.prev\n      if (prev === false) {\n        return\n      } else if (prev) {\n        return resolvePage(this.$site.pages, prev, this.$route.path)\n      } else {\n        return resolvePrev(this.$page, this.sidebarItems)\n      }\n    },\n\n    next () {\n      const next = this.$page.frontmatter.next\n      if (next === false) {\n        return\n      } else if (next) {\n        return resolvePage(this.$site.pages, next, this.$route.path)\n      } else {\n        return resolveNext(this.$page, this.sidebarItems)\n      }\n    },\n\n    editLink () {\n      if (this.$page.frontmatter.editLink === false) {\n        return\n      }\n      const {\n        repo,\n        editLinks,\n        docsDir = '',\n        docsBranch = 'master',\n        docsRepo = repo\n      } = this.$site.themeConfig\n\n      let path = normalize(this.$page.path)\n      if (endingSlashRE.test(path)) {\n        path += 'README.md'\n      } else {\n        path += '.md'\n      }\n      if (docsRepo && editLinks) {\n        return this.createEditLink(repo, docsRepo, docsDir, docsBranch, path)\n      }\n    },\n\n    editLinkText () {\n      return (\n        this.$themeLocaleConfig.editLinkText ||\n        this.$site.themeConfig.editLinkText ||\n        `Edit this page`\n      )\n    }\n  },\n\n  methods: {\n    createEditLink (repo, docsRepo, docsDir, docsBranch, path) {\n      const bitbucket = /bitbucket.org/\n      if (bitbucket.test(repo)) {\n        const base = outboundRE.test(docsRepo)\n          ? docsRepo\n          : repo\n        return (\n          base.replace(endingSlashRE, '') +\n           `/${docsBranch}` +\n           (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') +\n           path +\n           `?mode=edit&spa=0&at=${docsBranch}&fileviewer=file-view-default`\n        )\n      }\n\n      const base = outboundRE.test(docsRepo)\n        ? docsRepo\n        : `https://github.com/${docsRepo}`\n\n      return (\n        base.replace(endingSlashRE, '') +\n        `/edit/${docsBranch}` +\n        (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') +\n        path\n      )\n    }\n  }\n}\n\nfunction resolvePrev (page, items) {\n  return find(page, items, -1)\n}\n\nfunction resolveNext (page, items) {\n  return find(page, items, 1)\n}\n\nfunction find (page, items, offset) {\n  const res = []\n  items.forEach(item => {\n    if (item.type === 'group') {\n      res.push(...item.children || [])\n    } else {\n      res.push(item)\n    }\n  })\n  for (let i = 0; i < res.length; i++) {\n    const cur = res[i]\n    if (cur.type === 'page' && cur.path === page.path) {\n      return res[i + offset]\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Page.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Page.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./Page.vue?vue&type=template&id=4f4e45d3&\"\nimport script from \"./Page.vue?vue&type=script&lang=js&\"\nexport * from \"./Page.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./Page.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"20b31728\"\n  \n)\n\ncomponent.options.__file = \"Page.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar\"},[_c('NavLinks'),_vm._ssrNode(\" \"),_vm._t(\"top\"),_vm._ssrNode(\" \"),(_vm.items.length)?_vm._ssrNode(\"<ul class=\\\"sidebar-links\\\">\",\"</ul>\",_vm._l((_vm.items),function(item,i){return _vm._ssrNode(\"<li>\",\"</li>\",[(item.type === 'group')?_c('SidebarGroup',{attrs:{\"item\":item,\"first\":i === 0,\"open\":i === _vm.openGroupIndex,\"collapsable\":item.collapsable || item.collapsible},on:{\"toggle\":function($event){_vm.toggleGroup(i)}}}):_c('SidebarLink',{attrs:{\"item\":item}})],1)})):_vm._e(),_vm._ssrNode(\" \"),_vm._t(\"bottom\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar-group\",class:{ first: _vm.first, collapsable: _vm.collapsable }},[_vm._ssrNode(\"<p\"+(_vm._ssrClass(\"sidebar-heading\",{ open: _vm.open }))+\"><span>\"+_vm._ssrEscape(_vm._s(_vm.item.title))+\"</span> \"+((_vm.collapsable)?(\"<span\"+(_vm._ssrClass(\"arrow\",_vm.open ? 'down' : 'right'))+\"></span>\"):\"<!---->\")+\"</p> \"),_c('DropdownTransition',[(_vm.open || !_vm.collapsable)?_c('ul',{ref:\"items\",staticClass:\"sidebar-group-items\"},_vm._l((_vm.item.children),function(child){return _c('li',[_c('SidebarLink',{attrs:{\"item\":child}})],1)})):_vm._e()])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "\nimport { isActive, hashRE, groupHeaders } from './util'\n\nexport default {\n  functional: true,\n\n  props: ['item'],\n\n  render (h, { parent: { $page, $site, $route }, props: { item }}) {\n    // use custom active class matching logic\n    // due to edge case of paths ending with / + hash\n    const selfActive = isActive($route, item.path)\n    // for sidebar: auto pages, a hash link should be active if one of its child\n    // matches\n    const active = item.type === 'auto'\n      ? selfActive || item.children.some(c => isActive($route, item.basePath + '#' + c.slug))\n      : selfActive\n    const link = renderLink(h, item.path, item.title || item.path, active)\n    const configDepth = $page.frontmatter.sidebarDepth != null\n      ? $page.frontmatter.sidebarDepth\n      : $site.themeConfig.sidebarDepth\n    const maxDepth = configDepth == null ? 1 : configDepth\n    const displayAllHeaders = !!$site.themeConfig.displayAllHeaders\n    if (item.type === 'auto') {\n      return [link, renderChildren(h, item.children, item.basePath, $route, maxDepth)]\n    } else if ((active || displayAllHeaders) && item.headers && !hashRE.test(item.path)) {\n      const children = groupHeaders(item.headers)\n      return [link, renderChildren(h, children, item.path, $route, maxDepth)]\n    } else {\n      return link\n    }\n  }\n}\n\nfunction renderLink (h, to, text, active) {\n  return h('router-link', {\n    props: {\n      to,\n      activeClass: '',\n      exactActiveClass: ''\n    },\n    class: {\n      active,\n      'sidebar-link': true\n    }\n  }, text)\n}\n\nfunction renderChildren (h, children, path, route, maxDepth, depth = 1) {\n  if (!children || depth > maxDepth) return null\n  return h('ul', { class: 'sidebar-sub-headers' }, children.map(c => {\n    const active = isActive(route, path + '#' + c.slug)\n    return h('li', { class: 'sidebar-sub-header' }, [\n      renderLink(h, path + '#' + c.slug, c.title, active),\n      renderChildren(h, c.children, path, route, maxDepth, depth + 1)\n    ])\n  }))\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarLink.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarLink.vue?vue&type=script&lang=js&\"",
        "var render, staticRenderFns\nimport script from \"./SidebarLink.vue?vue&type=script&lang=js&\"\nexport * from \"./SidebarLink.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SidebarLink.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"64467726\"\n  \n)\n\ncomponent.options.__file = \"SidebarLink.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SidebarLink from './SidebarLink.vue'\nimport DropdownTransition from './DropdownTransition.vue'\n\nexport default {\n  name: 'SidebarGroup',\n  props: ['item', 'first', 'open', 'collapsable'],\n  components: { SidebarLink, DropdownTransition }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarGroup.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SidebarGroup.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./SidebarGroup.vue?vue&type=template&id=5965c733&\"\nimport script from \"./SidebarGroup.vue?vue&type=script&lang=js&\"\nexport * from \"./SidebarGroup.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SidebarGroup.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"0e6f83c8\"\n  \n)\n\ncomponent.options.__file = \"SidebarGroup.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SidebarGroup from './SidebarGroup.vue'\nimport SidebarLink from './SidebarLink.vue'\nimport NavLinks from './NavLinks.vue'\nimport { isActive } from './util'\n\nexport default {\n  components: { SidebarGroup, SidebarLink, NavLinks },\n\n  props: ['items'],\n\n  data () {\n    return {\n      openGroupIndex: 0\n    }\n  },\n\n  created () {\n    this.refreshIndex()\n  },\n\n  watch: {\n    '$route' () {\n      this.refreshIndex()\n    }\n  },\n\n  methods: {\n    refreshIndex () {\n      const index = resolveOpenGroupIndex(\n        this.$route,\n        this.items\n      )\n      if (index > -1) {\n        this.openGroupIndex = index\n      }\n    },\n\n    toggleGroup (index) {\n      this.openGroupIndex = index === this.openGroupIndex ? -1 : index\n    },\n\n    isActive (page) {\n      return isActive(this.$route, page.path)\n    }\n  }\n}\n\nfunction resolveOpenGroupIndex (route, items) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    if (item.type === 'group' && item.children.some(c => isActive(route, c.path))) {\n      return i\n    }\n  }\n  return -1\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Sidebar.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Sidebar.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./Sidebar.vue?vue&type=template&id=1819e340&\"\nimport script from \"./Sidebar.vue?vue&type=script&lang=js&\"\nexport * from \"./Sidebar.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./Sidebar.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"f0665a5a\"\n  \n)\n\ncomponent.options.__file = \"Sidebar.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"name\":\"sw-update-popup\"}},[(_vm.enabled)?_c('div',{staticClass:\"sw-update-popup\"},[_vm._v(\"\\n    \"+_vm._s(_vm.message)),_c('br'),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.reload}},[_vm._v(_vm._s(_vm.buttonText))])]):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    updateEvent: {\n      type: Object,\n      default: null\n    }\n  },\n\n  computed: {\n    popupConfig () {\n      for (const config of [this.$themeLocaleConfig, this.$site.themeConfig]) {\n        const sw = config.serviceWorker\n        if (sw && sw.updatePopup) {\n          return typeof sw.updatePopup === 'object' ? sw.updatePopup : {}\n        }\n      }\n      return null\n    },\n\n    enabled () {\n      return Boolean(this.popupConfig && this.updateEvent)\n    },\n\n    message () {\n      const c = this.popupConfig\n      return (c && c.message) || 'New content is available.'\n    },\n\n    buttonText () {\n      const c = this.popupConfig\n      return (c && c.buttonText) || 'Refresh'\n    }\n  },\n\n  methods: {\n    reload () {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(() => {\n          location.reload(true)\n        })\n        this.updateEvent = null\n      }\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SWUpdatePopup.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./SWUpdatePopup.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./SWUpdatePopup.vue?vue&type=template&id=6685e944&\"\nimport script from \"./SWUpdatePopup.vue?vue&type=script&lang=js&\"\nexport * from \"./SWUpdatePopup.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./SWUpdatePopup.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"a2ee8194\"\n  \n)\n\ncomponent.options.__file = \"SWUpdatePopup.vue\"\nexport default component.exports",
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport nprogress from 'nprogress'\nimport Home from './Home.vue'\nimport Navbar from './Navbar.vue'\nimport Page from './Page.vue'\nimport Sidebar from './Sidebar.vue'\nimport SWUpdatePopup from './SWUpdatePopup.vue'\nimport { resolveSidebarItems } from './util'\n\nexport default {\n  components: { Home, Page, Sidebar, Navbar, SWUpdatePopup },\n\n  data () {\n    return {\n      isSidebarOpen: false,\n      swUpdateEvent: null\n    }\n  },\n\n  computed: {\n    shouldShowNavbar () {\n      const { themeConfig } = this.$site\n      const { frontmatter } = this.$page\n      if (\n        frontmatter.navbar === false ||\n        themeConfig.navbar === false) {\n        return false\n      }\n      return (\n        this.$title ||\n        themeConfig.logo ||\n        themeConfig.repo ||\n        themeConfig.nav ||\n        this.$themeLocaleConfig.nav\n      )\n    },\n\n    shouldShowSidebar () {\n      const { frontmatter } = this.$page\n      return (\n        !frontmatter.layout &&\n        !frontmatter.home &&\n        frontmatter.sidebar !== false &&\n        this.sidebarItems.length\n      )\n    },\n\n    sidebarItems () {\n      return resolveSidebarItems(\n        this.$page,\n        this.$route,\n        this.$site,\n        this.$localePath\n      )\n    },\n\n    pageClasses () {\n      const userPageClass = this.$page.frontmatter.pageClass\n      return [\n        {\n          'no-navbar': !this.shouldShowNavbar,\n          'sidebar-open': this.isSidebarOpen,\n          'no-sidebar': !this.shouldShowSidebar\n        },\n        userPageClass\n      ]\n    }\n  },\n\n  mounted () {\n    window.addEventListener('scroll', this.onScroll)\n\n    // configure progress bar\n    nprogress.configure({ showSpinner: false })\n\n    this.$router.beforeEach((to, from, next) => {\n      if (to.path !== from.path && !Vue.component(to.name)) {\n        nprogress.start()\n      }\n      next()\n    })\n\n    this.$router.afterEach(() => {\n      nprogress.done()\n      this.isSidebarOpen = false\n    })\n\n    this.$on('sw-updated', this.onSWUpdated)\n  },\n\n  methods: {\n    toggleSidebar (to) {\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen\n    },\n\n    // side swipe\n    onTouchStart (e) {\n      this.touchStart = {\n        x: e.changedTouches[0].clientX,\n        y: e.changedTouches[0].clientY\n      }\n    },\n\n    onTouchEnd (e) {\n      const dx = e.changedTouches[0].clientX - this.touchStart.x\n      const dy = e.changedTouches[0].clientY - this.touchStart.y\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\n        if (dx > 0 && this.touchStart.x <= 80) {\n          this.toggleSidebar(true)\n        } else {\n          this.toggleSidebar(false)\n        }\n      }\n    },\n\n    onSWUpdated (e) {\n      this.swUpdateEvent = e\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Layout.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Layout.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./Layout.vue?vue&type=template&id=3da207fc&\"\nimport script from \"./Layout.vue?vue&type=script&lang=js&\"\nexport * from \"./Layout.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"prismjs/themes/prism-tomorrow.css?vue&type=style&index=0&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\nvar style1 = require(\"./styles/theme.styl?vue&type=style&index=1&lang=stylus&\")\nif (style1.__inject__) style1.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"7238e3fa\"\n  \n)\n\ncomponent.options.__file = \"Layout.vue\"\nexport default component.exports",
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"theme-container\"},[_vm._ssrNode(\"<div class=\\\"content\\\">\",\"</div>\",[_vm._ssrNode(\"<h1>404</h1> <blockquote>\"+_vm._ssrEscape(_vm._s(_vm.getMsg()))+\"</blockquote> \"),_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Take me home.\")])],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst msgs = [\n  `There's nothing here.`,\n  `How did we get here?`,\n  `That's a Four-Oh-Four.`,\n  `Looks like we've got some broken links.`\n]\n\nexport default {\n  methods: {\n    getMsg () {\n      return msgs[Math.floor(Math.random() * msgs.length)]\n    }\n  }\n}\n",
        "import mod from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NotFound.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./NotFound.vue?vue&type=script&lang=js&\"",
        "import { render, staticRenderFns } from \"./NotFound.vue?vue&type=template&id=07f7ea58&\"\nimport script from \"./NotFound.vue?vue&type=script&lang=js&\"\nexport * from \"./NotFound.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"7d6fe488\"\n  \n)\n\ncomponent.options.__file = \"NotFound.vue\"\nexport default component.exports",
        "export default {\n  created () {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title\n      this.$ssrContext.lang = this.$lang\n      this.$ssrContext.description = this.$page.description || this.$description\n    }\n  },\n\n  mounted () {\n    // update title / meta tags\n    this.currentMetaTags = new Set()\n\n    const updateMeta = () => {\n      document.title = this.$title\n      document.documentElement.lang = this.$lang\n      const userMeta = this.$page.frontmatter.meta || []\n      const meta = userMeta.slice(0)\n      const useGlobalDescription = userMeta.filter(m => m.name === 'description').length === 0\n\n      // #665 Avoid duplicate description meta at runtime.\n      if (useGlobalDescription) {\n        meta.push({ name: 'description', content: this.$description })\n      }\n\n      // Including description meta coming from SSR.\n      const descriptionMetas = document.querySelectorAll('meta[name=\"description\"]')\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(m => this.currentMetaTags.add(m))\n      }\n\n      this.currentMetaTags = new Set(updateMetaTags(meta, this.currentMetaTags))\n    }\n    this.$watch('$page', updateMeta)\n    updateMeta()\n  },\n\n  beforeDestroy () {\n    updateMetaTags(null, this.currentMetaTags)\n  }\n}\n\nfunction updateMetaTags (meta, current) {\n  if (current) {\n    [...current].forEach(c => {\n      document.head.removeChild(c)\n    })\n  }\n  if (meta) {\n    return meta.map(m => {\n      const tag = document.createElement('meta')\n      Object.keys(m).forEach(key => {\n        tag.setAttribute(key, m[key])\n      })\n      document.head.appendChild(tag)\n      return tag\n    })\n  }\n}\n",
        "import store from '@app/store'\nimport throttle from 'lodash.throttle'\n\nexport default {\n  mounted () {\n    window.addEventListener('scroll', this.onScroll)\n  },\n  methods: {\n    onScroll: throttle(function () {\n      this.setActiveHash()\n    }, 300),\n    setActiveHash () {\n      const sidebarLinks = [].slice.call(document.querySelectorAll('.sidebar-link'))\n      const anchors = [].slice.call(document.querySelectorAll('.header-anchor'))\n      .filter(anchor => sidebarLinks.some(sidebarLink => sidebarLink.hash === anchor.hash))\n\n      const scrollTop = Math.max(\n        window.pageYOffset,\n        document.documentElement.scrollTop,\n        document.body.scrollTop\n      )\n\n      for (let i = 0; i < anchors.length; i++) {\n        const anchor = anchors[i]\n        const nextAnchor = anchors[i + 1]\n\n        const isActive = i === 0 && scrollTop === 0 ||\n        (scrollTop >= anchor.parentElement.offsetTop + 10 &&\n        (!nextAnchor || scrollTop < nextAnchor.parentElement.offsetTop - 10))\n\n        if (isActive && decodeURIComponent(this.$route.hash) !== decodeURIComponent(anchor.hash)) {\n          store.disableScrollBehavior = true\n          this.$router.replace(decodeURIComponent(anchor.hash), () => {\n            // execute after scrollBehavior handler.\n            this.$nextTick(() => {\n              store.disableScrollBehavior = false\n            })\n          })\n          return\n        }\n      }\n    }\n  },\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.onScroll)\n  }\n}\n",
        "import updateMeta from './updateMeta'\nimport activeHeaderLinks from '@activeHeaderLinks'\n\nexport default [\n  updateMeta, // required\n  activeHeaderLinks // optional\n]\n",
        "import Vue from 'vue'\n\nimport ThemeLayout from '@themeLayout'\nimport ThemeNotFound from '@themeNotFound'\nimport { injectMixins } from '@app/util'\nimport rootMixins from '@app/root-mixins'\n\ninjectMixins(ThemeLayout, rootMixins)\ninjectMixins(ThemeNotFound, rootMixins)\n\nexport const routes = [\n  {\n    name: \"v-5067e9249bd5\",\n    path: \"/\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/README.md\").then(comp => {\n        Vue.component(\"v-5067e9249bd5\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/index.html\",\n    redirect: \"/\"\n  },\n  {\n    name: \"v-fcdbfc2434362\",\n    path: \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/CSS/CSS权重规则.md\").then(comp => {\n        Vue.component(\"v-fcdbfc2434362\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/CSS/CSS权重规则.html\",\n    redirect: \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\"\n  },\n  {\n    name: \"v-f851df6bb2f4a\",\n    path: \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/CSS/CSS概念-BFC深入浅出.md\").then(comp => {\n        Vue.component(\"v-f851df6bb2f4a\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/CSS/CSS概念-BFC深入浅出.html\",\n    redirect: \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\"\n  },\n  {\n    name: \"v-ddba404cf15bf\",\n    path: \"/accumulate/JS/Object.defineProperty.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/Object.defineProperty.md\").then(comp => {\n        Vue.component(\"v-ddba404cf15bf\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    name: \"v-e2825bfa2222b\",\n    path: \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/cookie和storage的使用以及区别.md\").then(comp => {\n        Vue.component(\"v-e2825bfa2222b\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/cookie和storage的使用以及区别.html\",\n    redirect: \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\"\n  },\n  {\n    name: \"v-861b2503133db\",\n    path: \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/函数防抖和函数节流.md\").then(comp => {\n        Vue.component(\"v-861b2503133db\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/函数防抖和函数节流.html\",\n    redirect: \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\"\n  },\n  {\n    name: \"v-c56419dc6ff32\",\n    path: \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/多维数组展开.md\").then(comp => {\n        Vue.component(\"v-c56419dc6ff32\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/多维数组展开.html\",\n    redirect: \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\"\n  },\n  {\n    name: \"v-ae0f7f209d655\",\n    path: \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/数组API解析合集.md\").then(comp => {\n        Vue.component(\"v-ae0f7f209d655\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/数组API解析合集.html\",\n    redirect: \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\"\n  },\n  {\n    name: \"v-6e1792ede5fcb\",\n    path: \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/数组完全乱序.md\").then(comp => {\n        Vue.component(\"v-6e1792ede5fcb\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/数组完全乱序.html\",\n    redirect: \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\"\n  },\n  {\n    name: \"v-006523810eca4\",\n    path: \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/时间差与时区转换.md\").then(comp => {\n        Vue.component(\"v-006523810eca4\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/时间差与时区转换.html\",\n    redirect: \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\"\n  },\n  {\n    name: \"v-c636a798fc84c\",\n    path: \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/随机数组成的数组.md\").then(comp => {\n        Vue.component(\"v-c636a798fc84c\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/随机数组成的数组.html\",\n    redirect: \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\"\n  },\n  {\n    name: \"v-b4ca7c19c1015\",\n    path: \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/JS/高性能js.md\").then(comp => {\n        Vue.component(\"v-b4ca7c19c1015\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/JS/高性能js.html\",\n    redirect: \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\"\n  },\n  {\n    name: \"v-30d2467fc2b85\",\n    path: \"/accumulate/\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/README.md\").then(comp => {\n        Vue.component(\"v-30d2467fc2b85\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/index.html\",\n    redirect: \"/accumulate/\"\n  },\n  {\n    name: \"v-f00c5cdf8e94f\",\n    path: \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/vue定义全局函数.md\").then(comp => {\n        Vue.component(\"v-f00c5cdf8e94f\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/vue定义全局函数.html\",\n    redirect: \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\"\n  },\n  {\n    name: \"v-1d2602c545ef1\",\n    path: \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/vue小技巧.md\").then(comp => {\n        Vue.component(\"v-1d2602c545ef1\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/vue小技巧.html\",\n    redirect: \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"\n  },\n  {\n    name: \"v-5a3b5a269768f\",\n    path: \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/vue钩子函数.md\").then(comp => {\n        Vue.component(\"v-5a3b5a269768f\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/vue钩子函数.html\",\n    redirect: \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\"\n  },\n  {\n    name: \"v-585a57505dfdb\",\n    path: \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md\").then(comp => {\n        Vue.component(\"v-585a57505dfdb\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/你或许不知道Vue的这些小技巧.html\",\n    redirect: \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\"\n  },\n  {\n    name: \"v-edbf821b4d52d\",\n    path: \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/弹窗.md\").then(comp => {\n        Vue.component(\"v-edbf821b4d52d\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/弹窗.html\",\n    redirect: \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\"\n  },\n  {\n    name: \"v-7b1586457f0ea\",\n    path: \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/Vue/极简双向绑定.md\").then(comp => {\n        Vue.component(\"v-7b1586457f0ea\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/Vue/极简双向绑定.html\",\n    redirect: \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\"\n  },\n  {\n    name: \"v-df387d5f9b155\",\n    path: \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/amateur/VsCode文件头部注释生成.md\").then(comp => {\n        Vue.component(\"v-df387d5f9b155\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/amateur/VsCode文件头部注释生成.html\",\n    redirect: \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\"\n  },\n  {\n    name: \"v-f7886d61af2e6\",\n    path: \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/amateur/推箱子.md\").then(comp => {\n        Vue.component(\"v-f7886d61af2e6\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/amateur/推箱子.html\",\n    redirect: \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\"\n  },\n  {\n    name: \"v-753f0f457426e\",\n    path: \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/input的一些坑点分享.md\").then(comp => {\n        Vue.component(\"v-753f0f457426e\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/input的一些坑点分享.html\",\n    redirect: \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\"\n  },\n  {\n    name: \"v-9e41ddce92d4\",\n    path: \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/判断用户浏览器.md\").then(comp => {\n        Vue.component(\"v-9e41ddce92d4\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/判断用户浏览器.html\",\n    redirect: \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\"\n  },\n  {\n    name: \"v-8a6f72c2fb1a5\",\n    path: \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/前端弹幕效果实现思路.md\").then(comp => {\n        Vue.component(\"v-8a6f72c2fb1a5\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/前端弹幕效果实现思路.html\",\n    redirect: \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\"\n  },\n  {\n    name: \"v-8af83ab67b198\",\n    path: \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/复制粘贴系列.md\").then(comp => {\n        Vue.component(\"v-8af83ab67b198\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/复制粘贴系列.html\",\n    redirect: \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\"\n  },\n  {\n    name: \"v-c4482a800996d\",\n    path: \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/显示隐藏密码.md\").then(comp => {\n        Vue.component(\"v-c4482a800996d\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/显示隐藏密码.html\",\n    redirect: \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\"\n  },\n  {\n    name: \"v-2498ab2f6b89f\",\n    path: \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/effect/正则表达式收集.md\").then(comp => {\n        Vue.component(\"v-2498ab2f6b89f\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/effect/正则表达式收集.html\",\n    redirect: \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\"\n  },\n  {\n    name: \"v-655d85fad3386\",\n    path: \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/interviewQuestion/树状数组结构转化.md\").then(comp => {\n        Vue.component(\"v-655d85fad3386\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/interviewQuestion/树状数组结构转化.html\",\n    redirect: \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\"\n  },\n  {\n    name: \"v-50b68c5c13978\",\n    path: \"/accumulate/template.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/template.md\").then(comp => {\n        Vue.component(\"v-50b68c5c13978\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    name: \"v-dc0db3daae59d\",\n    path: \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/tool/http缓存.md\").then(comp => {\n        Vue.component(\"v-dc0db3daae59d\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/tool/http缓存.html\",\n    redirect: \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\"\n  },\n  {\n    name: \"v-1f13035bfd7d\",\n    path: \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/tool/js事件循环机制.md\").then(comp => {\n        Vue.component(\"v-1f13035bfd7d\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/tool/js事件循环机制.html\",\n    redirect: \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\"\n  },\n  {\n    name: \"v-f9c3508ae0515\",\n    path: \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/tool/js垃圾回收机制.md\").then(comp => {\n        Vue.component(\"v-f9c3508ae0515\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/tool/js垃圾回收机制.html\",\n    redirect: \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\"\n  },\n  {\n    name: \"v-0cd437a0e79e2\",\n    path: \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/accumulate/tool/忍者秘籍定时器机制.md\").then(comp => {\n        Vue.component(\"v-0cd437a0e79e2\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/accumulate/tool/忍者秘籍定时器机制.html\",\n    redirect: \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\"\n  },\n  {\n    name: \"v-b1a912bda55b7\",\n    path: \"/algorithm/\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/README.md\").then(comp => {\n        Vue.component(\"v-b1a912bda55b7\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/index.html\",\n    redirect: \"/algorithm/\"\n  },\n  {\n    name: \"v-88f1a7b4e2a33\",\n    path: \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/induction/反转3位整数.md\").then(comp => {\n        Vue.component(\"v-88f1a7b4e2a33\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/induction/反转3位整数.html\",\n    redirect: \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\"\n  },\n  {\n    name: \"v-941d166fbe5b7\",\n    path: \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/induction/数组重复次数.md\").then(comp => {\n        Vue.component(\"v-941d166fbe5b7\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/induction/数组重复次数.html\",\n    redirect: \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\"\n  },\n  {\n    name: \"v-617bfc99cfe53\",\n    path: \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/induction/查找斐波纳契数列中第N个数.md\").then(comp => {\n        Vue.component(\"v-617bfc99cfe53\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/induction/查找斐波纳契数列中第N个数.html\",\n    redirect: \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\"\n  },\n  {\n    name: \"v-10e90f7f208e9\",\n    path: \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/induction/水仙花数.md\").then(comp => {\n        Vue.component(\"v-10e90f7f208e9\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/induction/水仙花数.html\",\n    redirect: \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\"\n  },\n  {\n    name: \"v-3230f7010456a\",\n    path: \"/algorithm/simple/template.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/template.md\").then(comp => {\n        Vue.component(\"v-3230f7010456a\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    name: \"v-95edeed7f13a5\",\n    path: \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/两数之和.md\").then(comp => {\n        Vue.component(\"v-95edeed7f13a5\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/两数之和.html\",\n    redirect: \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\"\n  },\n  {\n    name: \"v-4dbcc658b8b1e\",\n    path: \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/中位数.md\").then(comp => {\n        Vue.component(\"v-4dbcc658b8b1e\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/中位数.html\",\n    redirect: \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\"\n  },\n  {\n    name: \"v-e230cbbc1c881\",\n    path: \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/分解质因数.md\").then(comp => {\n        Vue.component(\"v-e230cbbc1c881\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/分解质因数.html\",\n    redirect: \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\"\n  },\n  {\n    name: \"v-fbe544b93fc62\",\n    path: \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/反转整数.md\").then(comp => {\n        Vue.component(\"v-fbe544b93fc62\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/反转整数.html\",\n    redirect: \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\"\n  },\n  {\n    name: \"v-45f69dd67d2fe\",\n    path: \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/合并排序数组.md\").then(comp => {\n        Vue.component(\"v-45f69dd67d2fe\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/合并排序数组.html\",\n    redirect: \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\"\n  },\n  {\n    name: \"v-ab2ae2491aa72\",\n    path: \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/回文.md\").then(comp => {\n        Vue.component(\"v-ab2ae2491aa72\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/回文.html\",\n    redirect: \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\"\n  },\n  {\n    name: \"v-3affd9a30cddf\",\n    path: \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/姓名去重.md\").then(comp => {\n        Vue.component(\"v-3affd9a30cddf\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/姓名去重.html\",\n    redirect: \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\"\n  },\n  {\n    name: \"v-6307a16003a12\",\n    path: \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/字符串密钥格式.md\").then(comp => {\n        Vue.component(\"v-6307a16003a12\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/字符串密钥格式.html\",\n    redirect: \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\"\n  },\n  {\n    name: \"v-ff10f4d51edc6\",\n    path: \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/搜索二维矩阵.md\").then(comp => {\n        Vue.component(\"v-ff10f4d51edc6\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/搜索二维矩阵.html\",\n    redirect: \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\"\n  },\n  {\n    name: \"v-17edd118e5fbc\",\n    path: \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/最大子数组.md\").then(comp => {\n        Vue.component(\"v-17edd118e5fbc\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/最大子数组.html\",\n    redirect: \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\"\n  },\n  {\n    name: \"v-0c2f4ba4fb476\",\n    path: \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/比较字符串.md\").then(comp => {\n        Vue.component(\"v-0c2f4ba4fb476\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/比较字符串.html\",\n    redirect: \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\"\n  },\n  {\n    name: \"v-0c7003aa95c94\",\n    path: \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/simple/落单的数.md\").then(comp => {\n        Vue.component(\"v-0c7003aa95c94\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: \"/algorithm/simple/落单的数.html\",\n    redirect: \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\"\n  },\n  {\n    name: \"v-68e2a94fbdb49\",\n    path: \"/algorithm/template.html\",\n    component: ThemeLayout,\n    beforeEnter: (to, from, next) => {\n      import(\"/Users/huangguobao/work/web_my/web_accumulate/docs/algorithm/template.md\").then(comp => {\n        Vue.component(\"v-68e2a94fbdb49\", comp.default)\n        next()\n      })\n    }\n  },\n  {\n    path: '*',\n    component: ThemeNotFound\n  }\n]",
        "export const siteData = {\n  \"title\": \"OBKoro1前端积累\",\n  \"description\": \"种一棵树最好的时间是十年前，其次就是现在。\",\n  \"base\": \"/web_accumulate/\",\n  \"pages\": [\n    {\n      \"key\": \"v-5067e9249bd5\",\n      \"path\": \"/\",\n      \"lastUpdated\": 1537113645000,\n      \"title\": \"Home\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"其他：\",\n          \"slug\": \"其他：\"\n        }\n      ],\n      \"frontmatter\": {\n        \"home\": true,\n        \"heroImage\": \"/logo.jpg\",\n        \"actionText\": \"开始阅读 →\",\n        \"actionLink\": \"/accumulate/\",\n        \"features\": [\n          {\n            \"title\": \"积累\",\n            \"details\": \"平时的一些积累，一些上手即用的东西/知识点等内容，范围较广。\"\n          },\n          {\n            \"title\": \"算法\",\n            \"details\": \"刷算法题，是提升编程能力和逻辑能力比较有效的一种方式。文档将算法按照难度分级，代码中都有详细注释，且会提供多种解法。\"\n          },\n          {\n            \"title\": \"持续更新\",\n            \"details\": \"本文档将会持续更新，就像我的博客一样，当做一个长期项目来维护，期望这个文档在不久以后能够给大家带来帮助。\"\n          }\n        ],\n        \"footer\": \"MIT Licensed | Copyright © 2018-present OBKoro1\"\n      }\n    },\n    {\n      \"key\": \"v-fcdbfc2434362\",\n      \"path\": \"/accumulate/CSS/CSS%E6%9D%83%E9%87%8D%E8%A7%84%E5%88%99.html\",\n      \"lastUpdated\": 1538292922000,\n      \"title\": \"CSS 权重规则\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"CSS 权重规则\",\n          \"slug\": \"css-权重规则\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"权重规则总结:\",\n          \"slug\": \"权重规则总结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"css 权重优先级用来干嘛？\",\n          \"slug\": \"css-权重优先级用来干嘛？\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"权重的五个等级及其权重\",\n          \"slug\": \"权重的五个等级及其权重\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"等级关系:\",\n          \"slug\": \"等级关系\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"权重规则：\",\n          \"slug\": \"权重规则：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1.不推荐使用!important\",\n          \"slug\": \"_1-不推荐使用-important\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2.行内样式总会覆盖外部样式表的任何样式,会被!important覆盖\",\n          \"slug\": \"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.单独使用一个选择器的时候，不能跨等级使 css 规则生效\",\n          \"slug\": \"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效\",\n          \"slug\": \"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.\",\n          \"slug\": \"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"6.权重相同时，与元素距离近的选择器生效\",\n          \"slug\": \"_6-权重相同时，与元素距离近的选择器生效\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"建议：\",\n          \"slug\": \"建议：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-f851df6bb2f4a\",\n      \"path\": \"/accumulate/CSS/CSS%E6%A6%82%E5%BF%B5-BFC%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA.html\",\n      \"lastUpdated\": 1537113645000,\n      \"title\": \"CSS 概念-BFC 深入浅出\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"CSS 概念-BFC 深入浅出\",\n          \"slug\": \"css-概念-bfc-深入浅出\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"BFC 是什么鬼？\",\n          \"slug\": \"bfc-是什么鬼？\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"关于 BFC 的定义：\",\n          \"slug\": \"关于-bfc-的定义：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"通俗的说:\",\n          \"slug\": \"通俗的说\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"触发条件\",\n          \"slug\": \"触发条件\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"BFC 布局规则：\",\n          \"slug\": \"bfc-布局规则：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"BFC 有哪些作用：\",\n          \"slug\": \"bfc-有哪些作用：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"BFC 的规则和作用介绍:\",\n          \"slug\": \"bfc-的规则和作用介绍\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"BFC 与 Layout\",\n          \"slug\": \"bfc-与-layout\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"有趣的文本:\",\n          \"slug\": \"有趣的文本\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-ddba404cf15bf\",\n      \"path\": \"/accumulate/JS/Object.defineProperty.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"一次弄懂 Object.defineProperty\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"一次弄懂 Object.defineProperty\",\n          \"slug\": \"一次弄懂-object-defineproperty\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"基本用法：\",\n          \"slug\": \"基本用法：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"设置get、set：\",\n          \"slug\": \"设置get、set：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-e2825bfa2222b\",\n      \"path\": \"/accumulate/JS/cookie%E5%92%8Cstorage%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB.html\",\n      \"lastUpdated\": 1537686805000,\n      \"title\": \"cookie、localStorage 和 sessionStorage 的使用以及区别\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"cookie、localStorage 和 sessionStorage 的使用以及区别\",\n          \"slug\": \"cookie、localstorage-和-sessionstorage-的使用以及区别\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"localStorage 和 sessionStorage 的增删改查：\",\n          \"slug\": \"localstorage-和-sessionstorage-的增删改查：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"cookie 的增删改茶:\",\n          \"slug\": \"cookie-的增删改茶\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"三者的异同：\",\n          \"slug\": \"三者的异同：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"应用场景：\",\n          \"slug\": \"应用场景：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"浏览器支持情况：\",\n          \"slug\": \"浏览器支持情况：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"数据存放处：\",\n          \"slug\": \"数据存放处：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"番外：各浏览器Cookie大小、个数限制。\",\n          \"slug\": \"番外：各浏览器cookie大小、个数限制。\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-861b2503133db\",\n      \"path\": \"/accumulate/JS/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html\",\n      \"lastUpdated\": 1537113645000,\n      \"title\": \"防抖函数&节流函数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"防抖函数(debounce):\",\n          \"slug\": \"防抖函数-debounce\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"概念：\",\n          \"slug\": \"概念：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"生活中的栗子：\",\n          \"slug\": \"生活中的栗子：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码栗子：\",\n          \"slug\": \"代码栗子：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"机制：\",\n          \"slug\": \"机制：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"应用场景：\",\n          \"slug\": \"应用场景：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"节流函数(throttle):\",\n          \"slug\": \"节流函数-throttle\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"概念：\",\n          \"slug\": \"概念：-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"生活中的栗子：\",\n          \"slug\": \"生活中的栗子：-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码栗子：\",\n          \"slug\": \"代码栗子：-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"机制：\",\n          \"slug\": \"机制：-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"应用场景：\",\n          \"slug\": \"应用场景：-2\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"怎么给回调函数传参？\",\n          \"slug\": \"怎么给回调函数传参？\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"作用和本质：\",\n          \"slug\": \"作用和本质：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-c56419dc6ff32\",\n      \"path\": \"/accumulate/JS/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%B1%95%E5%BC%80.html\",\n      \"lastUpdated\": 1536751480000,\n      \"title\": \"多维数组展开\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"原理：\",\n          \"slug\": \"原理：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-ae0f7f209d655\",\n      \"path\": \"/accumulate/JS/%E6%95%B0%E7%BB%84API%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86.html\",\n      \"lastUpdated\": 1539001153000,\n      \"title\": \"数组API解析合集\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"数组API解析合集\",\n          \"slug\": \"数组api解析合集\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"创建一个数组:\",\n          \"slug\": \"创建一个数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6 Array.of()  返回由所有参数值组成的数组\",\n          \"slug\": \"es6-array-of-返回由所有参数值组成的数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6 Arrary.from() 将两类对象转为真正的数组\",\n          \"slug\": \"es6-arrary-from-将两类对象转为真正的数组\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"方法:\",\n          \"slug\": \"方法\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"改变原数组的方法(9个):\",\n          \"slug\": \"改变原数组的方法-9个\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"splice() 添加/删除数组元素\",\n          \"slug\": \"splice-添加-删除数组元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"sort() 数组排序\",\n          \"slug\": \"sort-数组排序\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"pop() 删除一个数组中的最后的一个元素\",\n          \"slug\": \"pop-删除一个数组中的最后的一个元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"shift() 删除数组的第一个元素\",\n          \"slug\": \"shift-删除数组的第一个元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"push() 向数组的末尾添加元素\",\n          \"slug\": \"push-向数组的末尾添加元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"unshift()\",\n          \"slug\": \"unshift\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"reverse() 颠倒数组中元素的顺序\",\n          \"slug\": \"reverse-颠倒数组中元素的顺序\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6: copyWithin() 指定位置的成员复制到其他位置\",\n          \"slug\": \"es6-copywithin-指定位置的成员复制到其他位置\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6: fill() 填充数组\",\n          \"slug\": \"es6-fill-填充数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"不改变原数组的方法(8个):\",\n          \"slug\": \"不改变原数组的方法-8个\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"slice() 浅拷贝数组的元素\",\n          \"slug\": \"slice-浅拷贝数组的元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"join()  数组转字符串\",\n          \"slug\": \"join-数组转字符串\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"toLocaleString() 数组转字符串\",\n          \"slug\": \"tolocalestring-数组转字符串\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"toString() 数组转字符串 不推荐\",\n          \"slug\": \"tostring-数组转字符串-不推荐\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"cancat\",\n          \"slug\": \"cancat\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"indexOf() 查找数组是否存在某个元素，返回下标\",\n          \"slug\": \"indexof-查找数组是否存在某个元素，返回下标\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"lastIndexOf() 查找指定元素在数组中的最后一个位置\",\n          \"slug\": \"lastindexof-查找指定元素在数组中的最后一个位置\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES7 includes() 查找数组是否包含某个元素 返回布尔\",\n          \"slug\": \"es7-includes-查找数组是否包含某个元素-返回布尔\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"遍历方法(12个):\",\n          \"slug\": \"遍历方法-12个\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"关于遍历：\",\n          \"slug\": \"关于遍历：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"forEach\",\n          \"slug\": \"foreach\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"下面类似语法同样适用这些规则\",\n          \"slug\": \"下面类似语法同样适用这些规则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"every 检测数组所有元素是否都符合判断条件\",\n          \"slug\": \"every-检测数组所有元素是否都符合判断条件\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"some 数组中的是否有满足判断条件的元素\",\n          \"slug\": \"some-数组中的是否有满足判断条件的元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"filter 过滤原始数组，返回新数组\",\n          \"slug\": \"filter-过滤原始数组，返回新数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"map 对数组中的每个元素进行处理，返回新的数组\",\n          \"slug\": \"map-对数组中的每个元素进行处理，返回新的数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"reduce 为数组提供累加器，合并为一个值\",\n          \"slug\": \"reduce-为数组提供累加器，合并为一个值\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"reduceRight  从右至左累加\",\n          \"slug\": \"reduceright-从右至左累加\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6：find()& findIndex() 根据条件找到数组成员\",\n          \"slug\": \"es6：find-findindex-根据条件找到数组成员\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"ES6 keys()&values()&entries() 遍历键名、遍历键值、遍历键名+键值\",\n          \"slug\": \"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-6e1792ede5fcb\",\n      \"path\": \"/accumulate/JS/%E6%95%B0%E7%BB%84%E5%AE%8C%E5%85%A8%E4%B9%B1%E5%BA%8F.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"数组完全乱序\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"真正意义上的乱序数组：\",\n          \"slug\": \"真正意义上的乱序数组：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"递归：\",\n          \"slug\": \"递归：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"循环(进阶)：\",\n          \"slug\": \"循环-进阶-：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"不开新数组（最终）：\",\n          \"slug\": \"不开新数组（最终）：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-006523810eca4\",\n      \"path\": \"/accumulate/JS/%E6%97%B6%E9%97%B4%E5%B7%AE%E4%B8%8E%E6%97%B6%E5%8C%BA%E8%BD%AC%E6%8D%A2.html\",\n      \"lastUpdated\": 1537686805000,\n      \"title\": \"计算两个时间的时间差&时区转换\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"计算两个时间的时间差&时区转换\",\n          \"slug\": \"计算两个时间的时间差-时区转换\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"计算两个时间的时间差：\",\n          \"slug\": \"计算两个时间的时间差：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"时区转换\",\n          \"slug\": \"时区转换\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-c636a798fc84c\",\n      \"path\": \"/accumulate/JS/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"随机数数组\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"原理\",\n          \"slug\": \"原理\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-b4ca7c19c1015\",\n      \"path\": \"/accumulate/JS/%E9%AB%98%E6%80%A7%E8%83%BDjs.html\",\n      \"lastUpdated\": 1537952771000,\n      \"title\": \"[读书笔记《高性能 JavaScript》\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"[读书笔记《高性能 JavaScript》\",\n          \"slug\": \"读书笔记《高性能-javascript》\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"缺陷\",\n          \"slug\": \"缺陷\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"前言\",\n          \"slug\": \"前言\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第一章-加载和执行\",\n          \"slug\": \"第一章-加载和执行\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第一章加载和执行小结：\",\n          \"slug\": \"第一章加载和执行小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第二章-数据存取\",\n          \"slug\": \"第二章-数据存取\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第二章数据存取小结：\",\n          \"slug\": \"第二章数据存取小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第三章 DOM 编程小结：\",\n          \"slug\": \"第三章-dom-编程小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第四章算法和流程控制小结：\",\n          \"slug\": \"第四章算法和流程控制小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第五章字符串和正则表达式小结：\",\n          \"slug\": \"第五章字符串和正则表达式小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第六章快速响应的用户界面小结：\",\n          \"slug\": \"第六章快速响应的用户界面小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第七章 AJAX 小结\",\n          \"slug\": \"第七章-ajax-小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第八章编程实践小结\",\n          \"slug\": \"第八章编程实践小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第九章 构建并部署高性能 js 应用小结\",\n          \"slug\": \"第九章-构建并部署高性能-js-应用小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"第十章 工具 小结：\",\n          \"slug\": \"第十章-工具-小结：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"后话\",\n          \"slug\": \"后话\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\",\n          \"slug\": \"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-30d2467fc2b85\",\n      \"path\": \"/accumulate/\",\n      \"lastUpdated\": 1536751480000,\n      \"title\": \"前端积累\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"前端积累\",\n          \"slug\": \"前端积累\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"前端算法\",\n          \"slug\": \"前端算法\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"公众号：\",\n          \"slug\": \"公众号：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-f00c5cdf8e94f\",\n      \"path\": \"/accumulate/Vue/vue%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.html\",\n      \"lastUpdated\": 1537360696000,\n      \"title\": \"Vue 定义全局函数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"Vue 定义全局函数\",\n          \"slug\": \"vue-定义全局函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"原理\",\n          \"slug\": \"原理\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1. 在 main.js 里面直接写函数\",\n          \"slug\": \"_1-在-main-js-里面直接写函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2. 写一个模块文件，挂载到 main.js 上面。\",\n          \"slug\": \"_2-写一个模块文件，挂载到-main-js-上面。\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-1d2602c545ef1\",\n      \"path\": \"/accumulate/Vue/vue%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n      \"lastUpdated\": 1537360696000,\n      \"title\": \"vue 小技巧&小问题1\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"vue 小技巧&小问题1\",\n          \"slug\": \"vue-小技巧-小问题1\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"路由变化页面数据不刷新问题\",\n          \"slug\": \"路由变化页面数据不刷新问题\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setTimeout/setInterval 无法用 this 访问 VUe 实例\",\n          \"slug\": \"settimeout-setinterval-无法用-this-访问-vue-实例\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setInterval 路由跳转继续运行并没有销毁\",\n          \"slug\": \"setinterval-路由跳转继续运行并没有销毁\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"vue 滚动行为(浏览器回退记忆位置)用法\",\n          \"slug\": \"vue-滚动行为-浏览器回退记忆位置-用法\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"vue 路由拦截浏览器后退实现草稿保存类似需求\",\n          \"slug\": \"vue-路由拦截浏览器后退实现草稿保存类似需求\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"v-once 只渲染元素和组件一次，优化更新渲染性能\",\n          \"slug\": \"v-once-只渲染元素和组件一次，优化更新渲染性能\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"vue 风格指南推荐：\",\n          \"slug\": \"vue-风格指南推荐：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-5a3b5a269768f\",\n      \"path\": \"/accumulate/Vue/vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0.html\",\n      \"lastUpdated\": null,\n      \"title\": \"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]\",\n          \"slug\": \"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"Vue-Router导航守卫：\",\n          \"slug\": \"vue-router导航守卫：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"全局守卫\",\n          \"slug\": \"全局守卫\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"路由独享守卫\",\n          \"slug\": \"路由独享守卫\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"路由组件内的守卫：\",\n          \"slug\": \"路由组件内的守卫：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"关于钩子的一些知识：\",\n          \"slug\": \"关于钩子的一些知识：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"完整的路由导航解析流程(不包括其他生命周期)：\",\n          \"slug\": \"完整的路由导航解析流程-不包括其他生命周期-：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"你不知道的keep-alive[我猜你不知道]\",\n          \"slug\": \"你不知道的keep-alive-我猜你不知道\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"用法：\",\n          \"slug\": \"用法：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"生命周期钩子：\",\n          \"slug\": \"生命周期钩子：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"缓存你想缓存的路由：\",\n          \"slug\": \"缓存你想缓存的路由：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"组件生命周期钩子：\",\n          \"slug\": \"组件生命周期钩子：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"触发钩子的完整顺序：\",\n          \"slug\": \"触发钩子的完整顺序：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-585a57505dfdb\",\n      \"path\": \"/accumulate/Vue/%E4%BD%A0%E6%88%96%E8%AE%B8%E4%B8%8D%E7%9F%A5%E9%81%93Vue%E7%9A%84%E8%BF%99%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7.html\",\n      \"lastUpdated\": 1539017559000,\n      \"title\": \"vue 小技巧&小问题2\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"vue 小技巧&小问题2\",\n          \"slug\": \"vue-小技巧-小问题2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"文章内容总结:\",\n          \"slug\": \"文章内容总结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"组件style的scoped:\",\n          \"slug\": \"组件style的scoped\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Vue 数组/对象更新 视图不更新\",\n          \"slug\": \"vue-数组-对象更新-视图不更新\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"vue filters 过滤器的使用:\",\n          \"slug\": \"vue-filters-过滤器的使用\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"列表渲染相关\",\n          \"slug\": \"列表渲染相关\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"深度watch与watch立即触发回调\",\n          \"slug\": \"深度watch与watch立即触发回调\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这些情况下不要使用箭头函数:\",\n          \"slug\": \"这些情况下不要使用箭头函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"路由懒加载写法:\",\n          \"slug\": \"路由懒加载写法\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"路由的项目启动页和404页面\",\n          \"slug\": \"路由的项目启动页和404页面\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Vue调试神器:vue-devtools\",\n          \"slug\": \"vue调试神器-vue-devtools\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"前几个月也写过一篇类似的:\",\n          \"slug\": \"前几个月也写过一篇类似的\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"结语\",\n          \"slug\": \"结语\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-edbf821b4d52d\",\n      \"path\": \"/accumulate/Vue/%E5%BC%B9%E7%AA%97.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"简单的弹窗组件实现\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"简单的弹窗组件实现\",\n          \"slug\": \"简单的弹窗组件实现\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"组件最后实现的效果\",\n          \"slug\": \"组件最后实现的效果\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"实现步骤\",\n          \"slug\": \"实现步骤\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1.搭建组件的html和css样式。\",\n          \"slug\": \"_1-搭建组件的html和css样式。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2. 通过slot定制弹窗内容\",\n          \"slug\": \"_2-通过slot定制弹窗内容\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.通过props控制弹窗显隐&&定制弹窗style\",\n          \"slug\": \"_3-通过props控制弹窗显隐-定制弹窗style\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"4.$emit触发父组件事件修改数据，关闭弹窗\",\n          \"slug\": \"_4-emit触发父组件事件修改数据，关闭弹窗\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"弹窗组件代码\",\n          \"slug\": \"弹窗组件代码\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结：\",\n          \"slug\": \"小结：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"参考资料：\",\n          \"slug\": \"参考资料：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-7b1586457f0ea\",\n      \"path\": \"/accumulate/Vue/%E6%9E%81%E7%AE%80%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"仿Vue极简双向绑定\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"仿Vue极简双向绑定\",\n          \"slug\": \"仿vue极简双向绑定\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"效果GIF：\",\n          \"slug\": \"效果gif：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"demo地址：\",\n          \"slug\": \"demo地址：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"了解Object.defineProperty()：\",\n          \"slug\": \"了解object-defineproperty-：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"使用方式：\",\n          \"slug\": \"使用方式：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"示例demo：\",\n          \"slug\": \"示例demo：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"画一下重点：\",\n          \"slug\": \"画一下重点：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"实现思路：\",\n          \"slug\": \"实现思路：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"mvvm系列的双向绑定，关键步骤：\",\n          \"slug\": \"mvvm系列的双向绑定，关键步骤：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"流程图：\",\n          \"slug\": \"流程图：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"具体代码实现：\",\n          \"slug\": \"具体代码实现：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"html结构：\",\n          \"slug\": \"html结构：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"调用方法：\",\n          \"slug\": \"调用方法：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"创建myVue函数：\",\n          \"slug\": \"创建myvue函数：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Watcher函数:\",\n          \"slug\": \"watcher函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"实现数据监听器_observer()：\",\n          \"slug\": \"实现数据监听器-observer-：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"实现Compile 模板编译\",\n          \"slug\": \"实现compile-模板编译\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"完整代码&demo地址\",\n          \"slug\": \"完整代码-demo地址\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"参考资料：\",\n          \"slug\": \"参考资料：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-df387d5f9b155\",\n      \"path\": \"/accumulate/amateur/VsCode%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90.html\",\n      \"lastUpdated\": 1538187537000,\n      \"title\": \"VsCode文件头部注释生成\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"VsCode文件头部注释生成\",\n          \"slug\": \"vscode文件头部注释生成\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"language\",\n          \"slug\": \"language\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"简介\",\n          \"slug\": \"简介\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"安装\",\n          \"slug\": \"安装\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"使用\",\n          \"slug\": \"使用\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"注释模板\",\n          \"slug\": \"注释模板\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"默认注释模板\",\n          \"slug\": \"默认注释模板\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"推荐模板参数\",\n          \"slug\": \"推荐模板参数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"自定义注释模板\",\n          \"slug\": \"自定义注释模板\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"自动更新编辑时间 示例:\",\n          \"slug\": \"自动更新编辑时间-示例\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-f7886d61af2e6\",\n      \"path\": \"/accumulate/amateur/%E6%8E%A8%E7%AE%B1%E5%AD%90.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"推箱子\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"推箱子\",\n          \"slug\": \"推箱子\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"demo：推箱子小游戏\",\n          \"slug\": \"demo：推箱子小游戏\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"步骤解析：\",\n          \"slug\": \"步骤解析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1. 渲染地图\",\n          \"slug\": \"_1-渲染地图\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2. 捕获键盘事件,判断是否可以移动\",\n          \"slug\": \"_2-捕获键盘事件-判断是否可以移动\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.胜利判断：\",\n          \"slug\": \"_3-胜利判断：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码地址](https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html)、[demo地址\",\n          \"slug\": \"代码地址、demo地址\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-753f0f457426e\",\n      \"path\": \"/accumulate/effect/input%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E7%82%B9%E5%88%86%E4%BA%AB.html\",\n      \"lastUpdated\": 1537952771000,\n      \"title\": \"input 的一些坑点分享\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"input 的一些坑点分享\",\n          \"slug\": \"input-的一些坑点分享\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"本文内容包括：\",\n          \"slug\": \"本文内容包括：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"移动端底部 input 被弹出的键盘遮挡\",\n          \"slug\": \"移动端底部-input-被弹出的键盘遮挡\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"控制 input 显/隐密码\",\n          \"slug\": \"控制-input-显-隐密码\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"在 input 中输入 emoji 表情导致请求失败\",\n          \"slug\": \"在-input-中输入-emoji-表情导致请求失败\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"textarea 多行回车换行，显示的时候换行设置：\",\n          \"slug\": \"textarea-多行回车换行，显示的时候换行设置：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"输入框首尾清除空格-trim()\",\n          \"slug\": \"输入框首尾清除空格-trim\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"在 input 中监听键盘事件\",\n          \"slug\": \"在-input-中监听键盘事件\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-9e41ddce92d4\",\n      \"path\": \"/accumulate/effect/%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8.html\",\n      \"lastUpdated\": 1537203231000,\n      \"title\": \"判断用户浏览器\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"navigator.userAgent\",\n          \"slug\": \"navigator-useragent\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"判断方式：\",\n          \"slug\": \"判断方式：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"示例:判断QQ和微信内置浏览器\",\n          \"slug\": \"示例-判断qq和微信内置浏览器\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-8a6f72c2fb1a5\",\n      \"path\": \"/accumulate/effect/%E5%89%8D%E7%AB%AF%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.html\",\n      \"lastUpdated\": 1537952771000,\n      \"title\": \"前端弹幕效果实现思路\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"前端弹幕效果实现思路\",\n          \"slug\": \"前端弹幕效果实现思路\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"实现效果：\",\n          \"slug\": \"实现效果：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"实现原理：\",\n          \"slug\": \"实现原理：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"实现步骤：\",\n          \"slug\": \"实现步骤：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"1. 首先看一下html的结构。\",\n          \"slug\": \"_1-首先看一下html的结构。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"2.获取弹幕所需要的数据。\",\n          \"slug\": \"_2-获取弹幕所需要的数据。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"3.执行弹幕的函数。\",\n          \"slug\": \"_3-执行弹幕的函数。\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-8af83ab67b198\",\n      \"path\": \"/accumulate/effect/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%B3%BB%E5%88%97.html\",\n      \"lastUpdated\": 1536751480000,\n      \"title\": \"复制粘贴系列\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"API 介绍:\",\n          \"slug\": \"api-介绍\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"应用:\",\n          \"slug\": \"应用\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"实现类知乎/掘金复制大段文本添加版权信息:\",\n          \"slug\": \"实现类知乎-掘金复制大段文本添加版权信息\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"实现类起点网的防复制功能:\",\n          \"slug\": \"实现类起点网的防复制功能\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"点击复制功能：\",\n          \"slug\": \"点击复制功能：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-c4482a800996d\",\n      \"path\": \"/accumulate/effect/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E5%AF%86%E7%A0%81.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"显示隐藏密码\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"显示隐藏密码\",\n          \"slug\": \"显示隐藏密码\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-2498ab2f6b89f\",\n      \"path\": \"/accumulate/effect/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html\",\n      \"lastUpdated\": 1537203231000,\n      \"title\": \"常见正则表达式合集\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"常见正则表达式合集\",\n          \"slug\": \"常见正则表达式合集\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"如何验证？\",\n          \"slug\": \"如何验证？\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"身份证号码正则表达式：\",\n          \"slug\": \"身份证号码正则表达式：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"手机号码正则表达式：\",\n          \"slug\": \"手机号码正则表达式：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"邮箱正则表达式：\",\n          \"slug\": \"邮箱正则表达式：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"用户名正则:\",\n          \"slug\": \"用户名正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"密码正则:\",\n          \"slug\": \"密码正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"QQ 号码正则:\",\n          \"slug\": \"qq-号码正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"微信号码正则:\",\n          \"slug\": \"微信号码正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"特殊字符检测正则:\",\n          \"slug\": \"特殊字符检测正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"域名正则:\",\n          \"slug\": \"域名正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"车牌号码正则:\",\n          \"slug\": \"车牌号码正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"包含中文正则:\",\n          \"slug\": \"包含中文正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"护照正则:\",\n          \"slug\": \"护照正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"固定电话正则：\",\n          \"slug\": \"固定电话正则：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"IP 地址正则:\",\n          \"slug\": \"ip-地址正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"邮政编码正则:\",\n          \"slug\": \"邮政编码正则\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"经纬度正则\",\n          \"slug\": \"经纬度正则\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-655d85fad3386\",\n      \"path\": \"/accumulate/interviewQuestion/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E8%BD%AC%E5%8C%96.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"树状数组结构转化\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"树状数组结构转化\",\n          \"slug\": \"树状数组结构转化\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目如下：\",\n          \"slug\": \"题目如下：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"传进去的数组：\",\n          \"slug\": \"传进去的数组：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"输出的数组：\",\n          \"slug\": \"输出的数组：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"建议大家好好想想，争取能够自己解出来\",\n          \"slug\": \"建议大家好好想想，争取能够自己解出来\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"参考一下我的解题方法：\",\n          \"slug\": \"参考一下我的解题方法：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"通关秘籍\",\n          \"slug\": \"通关秘籍\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-50b68c5c13978\",\n      \"path\": \"/accumulate/template.html\",\n      \"lastUpdated\": 1539080756000,\n      \"title\": \"标题\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"标题\",\n          \"slug\": \"标题\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-dc0db3daae59d\",\n      \"path\": \"/accumulate/tool/http%E7%BC%93%E5%AD%98.html\",\n      \"lastUpdated\": 1539017559000,\n      \"title\": \"谈论HTTP缓存时我们在谈论什么\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"谈论HTTP缓存时我们在谈论什么\",\n          \"slug\": \"谈论http缓存时我们在谈论什么\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"当我们在谈论HTTP缓存时我们在谈论什么:\",\n          \"slug\": \"当我们在谈论http缓存时我们在谈论什么\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"缓存流程：\",\n          \"slug\": \"缓存流程：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"强缓存与弱缓存的区别：\",\n          \"slug\": \"强缓存与弱缓存的区别：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"强缓存：\",\n          \"slug\": \"强缓存：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Cache-Control\",\n          \"slug\": \"cache-control\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"http1.0时代的缓存 Expires+Pragma\",\n          \"slug\": \"http1-0时代的缓存-expires-pragma\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"强缓存命中 from memory cache & from disk cache\",\n          \"slug\": \"强缓存命中-from-memory-cache-from-disk-cache\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"弱缓存：\",\n          \"slug\": \"弱缓存：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Etag/lastModified过程如下:\",\n          \"slug\": \"etag-lastmodified过程如下\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"同时使用两个报文头:\",\n          \"slug\": \"同时使用两个报文头\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"Etag 主要为了解决 Last-Modified 无法解决的一些问题：\",\n          \"slug\": \"etag-主要为了解决-last-modified-无法解决的一些问题：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"用户操作行为与缓存\",\n          \"slug\": \"用户操作行为与缓存\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"如何设置？\",\n          \"slug\": \"如何设置？\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"没有设置强缓存，返回200\",\n          \"slug\": \"没有设置强缓存，返回200\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-1f13035bfd7d\",\n      \"path\": \"/accumulate/tool/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html\",\n      \"lastUpdated\": 1539080756000,\n      \"title\": \"事件循环(Event Loop)机制以及实例\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"事件循环(Event Loop)机制以及实例\",\n          \"slug\": \"事件循环-event-loop-机制以及实例\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"为什么js是单线程？\",\n          \"slug\": \"为什么js是单线程？\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"执行栈与任务队列\",\n          \"slug\": \"执行栈与任务队列\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"执行栈\",\n          \"slug\": \"执行栈\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"主线程\",\n          \"slug\": \"主线程\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"js 异步执行的运行机制。\",\n          \"slug\": \"js-异步执行的运行机制。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"宏任务与微任务:\",\n          \"slug\": \"宏任务与微任务\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"Event Loop(事件循环)：\",\n          \"slug\": \"event-loop-事件循环-：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"面试题实践\",\n          \"slug\": \"面试题实践\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-f9c3508ae0515\",\n      \"path\": \"/accumulate/tool/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html\",\n      \"lastUpdated\": null,\n      \"title\": \"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"JS高程中的垃圾回收机制与常见内存泄露的解决方法\",\n          \"slug\": \"js高程中的垃圾回收机制与常见内存泄露的解决方法\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"内存的生命周期：\",\n          \"slug\": \"内存的生命周期：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"垃圾回收机制：\",\n          \"slug\": \"垃圾回收机制：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"垃圾收集机制的原理：\",\n          \"slug\": \"垃圾收集机制的原理：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"标记清除：当前采用的垃圾收集策略\",\n          \"slug\": \"标记清除：当前采用的垃圾收集策略\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"引用计数略：被废弃的垃圾收集策略\",\n          \"slug\": \"引用计数略：被废弃的垃圾收集策略\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"哪些情况会引起内存泄漏？\",\n          \"slug\": \"哪些情况会引起内存泄漏？\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"意外的全局变量：\",\n          \"slug\": \"意外的全局变量：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"被遗忘的定时器和回调函数\",\n          \"slug\": \"被遗忘的定时器和回调函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"闭包：\",\n          \"slug\": \"闭包：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"循环引用问题\",\n          \"slug\": \"循环引用问题\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"没有清理DOM元素引用：\",\n          \"slug\": \"没有清理dom元素引用：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"console保存大量数据在内存中。\",\n          \"slug\": \"console保存大量数据在内存中。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"如何避免内存泄漏：\",\n          \"slug\": \"如何避免内存泄漏：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"关于内存泄漏：\",\n          \"slug\": \"关于内存泄漏：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-0cd437a0e79e2\",\n      \"path\": \"/accumulate/tool/%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html\",\n      \"lastUpdated\": null,\n      \"title\": \"JS忍者秘籍中的定时器机制详解\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"JS忍者秘籍中的定时器机制详解\",\n          \"slug\": \"js忍者秘籍中的定时器机制详解\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"准备\",\n          \"slug\": \"准备\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"定时器解决的问题：\",\n          \"slug\": \"定时器解决的问题：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"设置和清除定时器：\",\n          \"slug\": \"设置和清除定时器：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"注意：\",\n          \"slug\": \"注意：\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"执行线程中的定时器执行\",\n          \"slug\": \"执行线程中的定时器执行\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"事件排队。\",\n          \"slug\": \"事件排队。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"先进先出(先排队的先执行)\",\n          \"slug\": \"先进先出-先排队的先执行\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setInterval调用被废弃\",\n          \"slug\": \"setinterval调用被废弃\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setTimeout/setInterval无法保证准时执行回调函数\",\n          \"slug\": \"settimeout-setinterval无法保证准时执行回调函数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setInterval的连续执行\",\n          \"slug\": \"setinterval的连续执行\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"setTimeout按照一定的间隔周期性的触发定时器。\",\n          \"slug\": \"settimeout按照一定的间隔周期性的触发定时器。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"忍者秘籍中关于定时器的其他知识：\",\n          \"slug\": \"忍者秘籍中关于定时器的其他知识：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"任务队列只有排队这么简单吗？\",\n          \"slug\": \"任务队列只有排队这么简单吗？\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"小结\",\n          \"slug\": \"小结\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-b1a912bda55b7\",\n      \"path\": \"/algorithm/\",\n      \"lastUpdated\": 1536751480000,\n      \"title\": \"前端算法\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"前端算法\",\n          \"slug\": \"前端算法\"\n        },\n        {\n          \"level\": 2,\n          \"title\": \"前端积累\",\n          \"slug\": \"前端积累\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"公众号：\",\n          \"slug\": \"公众号：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-88f1a7b4e2a33\",\n      \"path\": \"/algorithm/induction/%E5%8F%8D%E8%BD%AC3%E4%BD%8D%E6%95%B4%E6%95%B0.html\",\n      \"lastUpdated\": 1536751480000,\n      \"title\": \"反转一个 3 位整数\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"转数组操作:\",\n          \"slug\": \"转数组操作\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"取余数，逐个颠倒\",\n          \"slug\": \"取余数，逐个颠倒\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"拼接字符串：\",\n          \"slug\": \"拼接字符串：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-941d166fbe5b7\",\n      \"path\": \"/algorithm/induction/%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0.html\",\n      \"lastUpdated\": 1537360696000,\n      \"title\": \"找出数组重复次数最多的元素\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"找出数组重复次数最多的元素\",\n          \"slug\": \"找出数组重复次数最多的元素\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-617bfc99cfe53\",\n      \"path\": \"/algorithm/induction/%E6%9F%A5%E6%89%BE%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E4%B8%AD%E7%AC%ACN%E4%B8%AA%E6%95%B0.html\",\n      \"lastUpdated\": 1537203231000,\n      \"title\": \"查找斐波纳契数列中第 N 个数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"查找斐波纳契数列中第 N 个数\",\n          \"slug\": \"查找斐波纳契数列中第-n-个数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述\",\n          \"slug\": \"描述\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"怎样算解成功：\",\n          \"slug\": \"怎样算解成功：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"code:\",\n          \"slug\": \"code\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码地址\",\n          \"slug\": \"代码地址\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-10e90f7f208e9\",\n      \"path\": \"/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html\",\n      \"lastUpdated\": 1537203231000,\n      \"title\": \"水仙花数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"水仙花数\",\n          \"slug\": \"水仙花数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"水仙花数的定义：\",\n          \"slug\": \"水仙花数的定义：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析:\",\n          \"slug\": \"题目分析\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"判断一个数是否为水仙花数：\",\n          \"slug\": \"判断一个数是否为水仙花数：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"找出所有的n位十进制水仙花数\",\n          \"slug\": \"找出所有的n位十进制水仙花数\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-3230f7010456a\",\n      \"path\": \"/algorithm/simple/template.html\",\n      \"lastUpdated\": 1539001153000,\n      \"title\": \"标题\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"标题\",\n          \"slug\": \"标题\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-95edeed7f13a5\",\n      \"path\": \"/algorithm/simple/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html\",\n      \"lastUpdated\": 1538209050000,\n      \"title\": \"两数之和\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"两数之和\",\n          \"slug\": \"两数之和\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-4dbcc658b8b1e\",\n      \"path\": \"/algorithm/simple/%E4%B8%AD%E4%BD%8D%E6%95%B0.html\",\n      \"lastUpdated\": 1538290595000,\n      \"title\": \"中位数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"中位数\",\n          \"slug\": \"中位数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-e230cbbc1c881\",\n      \"path\": \"/algorithm/simple/%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0.html\",\n      \"lastUpdated\": 1537692909000,\n      \"title\": \"分解质因数\",\n      \"headers\": [\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"质因数的定义：\",\n          \"slug\": \"质因数的定义：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-fbe544b93fc62\",\n      \"path\": \"/algorithm/simple/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"反转整数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"反转整数\",\n          \"slug\": \"反转整数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述\",\n          \"slug\": \"描述\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"解法：\",\n          \"slug\": \"解法：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"提示:\",\n          \"slug\": \"提示\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"code:\",\n          \"slug\": \"code\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"转数组操作运行效率也更高点：\",\n          \"slug\": \"转数组操作运行效率也更高点：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"github 算法仓库地址\",\n          \"slug\": \"github-算法仓库地址\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-45f69dd67d2fe\",\n      \"path\": \"/algorithm/simple/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html\",\n      \"lastUpdated\": 1537686805000,\n      \"title\": \"合并排序数组\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"合并排序数组\",\n          \"slug\": \"合并排序数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"sort排序\",\n          \"slug\": \"sort排序\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"先对比完一个数组：\",\n          \"slug\": \"先对比完一个数组：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-ab2ae2491aa72\",\n      \"path\": \"/algorithm/simple/%E5%9B%9E%E6%96%87.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"删除一个字母的回文\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"删除一个字母的回文\",\n          \"slug\": \"删除一个字母的回文\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述\",\n          \"slug\": \"描述\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"code:\",\n          \"slug\": \"code\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码地址\",\n          \"slug\": \"代码地址\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"github 算法仓库地址\",\n          \"slug\": \"github-算法仓库地址\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-3affd9a30cddf\",\n      \"path\": \"/algorithm/simple/%E5%A7%93%E5%90%8D%E5%8E%BB%E9%87%8D.html\",\n      \"lastUpdated\": 1536303293000,\n      \"title\": \"姓名去重\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"姓名去重\",\n          \"slug\": \"姓名去重\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述\",\n          \"slug\": \"描述\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"说明：\",\n          \"slug\": \"说明：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"这题很简单,自己想一下！\",\n          \"slug\": \"这题很简单-自己想一下！-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"code:\",\n          \"slug\": \"code\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目比较简单，就不放代码(上面就是)了。\",\n          \"slug\": \"题目比较简单，就不放代码-上面就是-了。\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"github 算法仓库地址\",\n          \"slug\": \"github-算法仓库地址\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-6307a16003a12\",\n      \"path\": \"/algorithm/simple/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.html\",\n      \"lastUpdated\": 1538187537000,\n      \"title\": \"字符串密钥格式\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"字符串密钥格式\",\n          \"slug\": \"字符串密钥格式\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-ff10f4d51edc6\",\n      \"path\": \"/algorithm/simple/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5.html\",\n      \"lastUpdated\": 1537692909000,\n      \"title\": \"搜索二维矩阵\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"搜索二维矩阵\",\n          \"slug\": \"搜索二维矩阵\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"题目分析：\",\n          \"slug\": \"题目分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-17edd118e5fbc\",\n      \"path\": \"/algorithm/simple/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html\",\n      \"lastUpdated\": 1538050772000,\n      \"title\": \"最大子数组\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"最大子数组\",\n          \"slug\": \"最大子数组\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"最大和的数组：\",\n          \"slug\": \"最大和的数组：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-0c2f4ba4fb476\",\n      \"path\": \"/algorithm/simple/%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2.html\",\n      \"lastUpdated\": 1538187537000,\n      \"title\": \"比较字符串\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"比较字符串\",\n          \"slug\": \"比较字符串\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-0c7003aa95c94\",\n      \"path\": \"/algorithm/simple/%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0.html\",\n      \"lastUpdated\": 1539017559000,\n      \"title\": \"落单的数\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"落单的数\",\n          \"slug\": \"落单的数\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    },\n    {\n      \"key\": \"v-68e2a94fbdb49\",\n      \"path\": \"/algorithm/template.html\",\n      \"lastUpdated\": 1538209050000,\n      \"title\": \"标题\",\n      \"headers\": [\n        {\n          \"level\": 2,\n          \"title\": \"标题\",\n          \"slug\": \"标题\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"难度：简单\",\n          \"slug\": \"难度：简单\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"描述：\",\n          \"slug\": \"描述：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"样例：\",\n          \"slug\": \"样例：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"思路分析：\",\n          \"slug\": \"思路分析：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码模板：\",\n          \"slug\": \"代码模板：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-2\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"想一想再看答案\",\n          \"slug\": \"想一想再看答案-3\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"代码：\",\n          \"slug\": \"代码：\"\n        },\n        {\n          \"level\": 3,\n          \"title\": \"鼓励我一下：\",\n          \"slug\": \"鼓励我一下：\"\n        }\n      ]\n    }\n  ],\n  \"themeConfig\": {\n    \"nav\": [\n      {\n        \"text\": \"前端积累\",\n        \"link\": \"/accumulate/\"\n      },\n      {\n        \"text\": \"前端算法\",\n        \"link\": \"/algorithm/\"\n      },\n      {\n        \"text\": \"博客\",\n        \"link\": \"http://obkoro1.com/\"\n      },\n      {\n        \"text\": \"GitHub\",\n        \"items\": [\n          {\n            \"text\": \"GitHub地址\",\n            \"link\": \"https://github.com/OBKoro1\"\n          },\n          {\n            \"text\": \"算法仓库\",\n            \"link\": \"https://github.com/OBKoro1/Brush_algorithm\"\n          },\n          {\n            \"text\": \"积累仓库\",\n            \"link\": \"https://github.com/OBKoro1/web_accumulate\"\n          },\n          {\n            \"text\": \"VsCode插件仓库\",\n            \"link\": \"https://github.com/OBKoro1/koro1FileHeader/blob/b03ef6c8c5c61bd1276c45fe5f108ad92f3ee7b8/README_zh-cn.md\"\n          }\n        ]\n      }\n    ],\n    \"sidebar\": {\n      \"/accumulate/\": [\n        \"/accumulate/\",\n        {\n          \"title\": \"JS\",\n          \"children\": [\n            \"/accumulate/JS/数组API解析合集\",\n            \"/accumulate/JS/时间差与时区转换\",\n            \"/accumulate/JS/Object.defineProperty\",\n            \"/accumulate/JS/函数防抖和函数节流\",\n            \"/accumulate/JS/数组完全乱序\",\n            \"/accumulate/JS/多维数组展开\",\n            \"/accumulate/JS/高性能js\",\n            \"/accumulate/JS/cookie和storage的使用以及区别\",\n            \"/accumulate/JS/随机数组成的数组\"\n          ]\n        },\n        {\n          \"title\": \"Vue\",\n          \"children\": [\n            \"/accumulate/Vue/vue钩子函数\",\n            \"/accumulate/Vue/你或许不知道Vue的这些小技巧\",\n            \"/accumulate/Vue/vue小技巧\",\n            \"/accumulate/Vue/vue定义全局函数\",\n            \"/accumulate/Vue/极简双向绑定\",\n            \"/accumulate/Vue/弹窗\"\n          ]\n        },\n        {\n          \"title\": \"功能\",\n          \"children\": [\n            \"/accumulate/effect/input的一些坑点分享\",\n            \"/accumulate/effect/前端弹幕效果实现思路\",\n            \"/accumulate/effect/正则表达式收集\",\n            \"/accumulate/effect/复制粘贴系列\",\n            \"/accumulate/effect/判断用户浏览器\",\n            \"/accumulate/effect/显示隐藏密码\"\n          ]\n        },\n        {\n          \"title\": \"工具/浏览器/机制\",\n          \"children\": [\n            \"/accumulate/tool/js垃圾回收机制\",\n            \"/accumulate/tool/忍者秘籍定时器机制\",\n            \"/accumulate/tool/js事件循环机制\",\n            \"/accumulate/tool/http缓存\"\n          ]\n        },\n        {\n          \"title\": \"面试题\",\n          \"children\": [\n            \"/accumulate/interviewQuestion/树状数组结构转化\"\n          ]\n        },\n        {\n          \"title\": \"CSS\",\n          \"children\": [\n            \"/accumulate/CSS/CSS权重规则\",\n            \"/accumulate/CSS/CSS概念-BFC深入浅出\"\n          ]\n        },\n        {\n          \"title\": \"其他\",\n          \"children\": [\n            \"/accumulate/amateur/VsCode文件头部注释生成\",\n            \"/accumulate/amateur/推箱子\"\n          ]\n        }\n      ],\n      \"/algorithm/\": [\n        \"/algorithm/\",\n        {\n          \"title\": \"入门\",\n          \"children\": [\n            \"/algorithm/induction/查找斐波纳契数列中第N个数\",\n            \"/algorithm/induction/数组重复次数\",\n            \"/algorithm/induction/水仙花数\",\n            \"/algorithm/induction/反转3位整数\"\n          ]\n        },\n        {\n          \"title\": \"简单\",\n          \"children\": [\n            \"/algorithm/simple/落单的数\",\n            \"/algorithm/simple/中位数\",\n            \"/algorithm/simple/两数之和\",\n            \"/algorithm/simple/比较字符串\",\n            \"/algorithm/simple/最大子数组\",\n            \"/algorithm/simple/字符串密钥格式\",\n            \"/algorithm/simple/搜索二维矩阵\",\n            \"/algorithm/simple/合并排序数组\",\n            \"/algorithm/simple/分解质因数\",\n            \"/algorithm/simple/姓名去重\",\n            \"/algorithm/simple/反转整数\",\n            \"/algorithm/simple/回文\"\n          ]\n        }\n      ]\n    },\n    \"sidebarDepth\": 2,\n    \"lastUpdated\": \"Last Updated\"\n  }\n}",
        "export default function () {}",
        "export default function () {}",
        "export default {\n  functional: true,\n\n  props: {\n    custom: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  render (h, { parent, props, data }) {\n    return h(parent.$page.key, {\n      class: [props.custom ? 'custom' : '', data.class, data.staticClass],\n      style: data.style\n    })\n  }\n}\n",
        "var render = function (_h,_vm) {var _c=_vm._c;return _c('svg',{staticClass:\"icon outbound\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"aria-hidden\":\"true\",\"x\":\"0px\",\"y\":\"0px\",\"viewBox\":\"0 0 100 100\",\"width\":\"15\",\"height\":\"15\"}},[_vm._ssrNode(\"<path fill=\\\"currentColor\\\" d=\\\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\\\"></path> <polygon fill=\\\"currentColor\\\" points=\\\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\\\"></polygon>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        null,
        "import { render, staticRenderFns } from \"./OutboundLink.vue?vue&type=template&id=38c6e7a6&functional=true&\"\nvar script = {}\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./OutboundLink.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  true,\n  injectStyles,\n  null,\n  \"3ba4d5be\"\n  \n)\n\ncomponent.options.__file = \"OutboundLink.vue\"\nexport default component.exports",
        "export default {\n  functional: true,\n  render (h, { parent, children }) {\n    if (parent._isMounted) {\n      return children\n    } else {\n      parent.$once('hook:mounted', () => {\n        parent.$forceUpdate()\n      })\n    }\n  }\n}\n",
        "import Vue from 'vue'\nimport Router from 'vue-router'\nimport dataMixin from './dataMixin'\nimport store from './store'\nimport { routes } from '@temp/routes'\nimport { siteData } from '@temp/siteData'\nimport enhanceApp from '@temp/enhanceApp'\nimport themeEnhanceApp from '@temp/themeEnhanceApp'\n\n// generated from user config\nimport('@temp/style.styl')\n\n// built-in components\nimport Content from './components/Content'\nimport OutboundLink from './components/OutboundLink.vue'\nimport ClientOnly from './components/ClientOnly'\n\n// suggest dev server restart on base change\nif (module.hot) {\n  const prevBase = siteData.base\n  module.hot.accept('./.temp/siteData', () => {\n    if (siteData.base !== prevBase) {\n      window.alert(\n        `[vuepress] Site base has changed. ` +\n        `Please restart dev server to ensure correct asset paths.`\n      )\n    }\n  })\n}\n\nVue.config.productionTip = false\nVue.use(Router)\n// mixin for exposing $site and $page\nVue.mixin(dataMixin(siteData))\n// component for rendering markdown content and setting title etc.\nVue.component('Content', Content)\nVue.component('OutboundLink', OutboundLink)\nVue.component('Badge', () => import('./components/Badge.vue'))\n// component for client-only content\nVue.component('ClientOnly', ClientOnly)\n\n// global helper for adding base path to absolute urls\nVue.prototype.$withBase = function (path) {\n  const base = this.$site.base\n  if (path.charAt(0) === '/') {\n    return base + path.slice(1)\n  } else {\n    return path\n  }\n}\n\nexport function createApp () {\n  const router = new Router({\n    base: siteData.base,\n    mode: 'history',\n    fallback: false,\n    routes,\n    scrollBehavior: (to, from, saved) => {\n      if (saved) {\n        return saved\n      } else if (to.hash) {\n        if (store.disableScrollBehavior) {\n          return false\n        }\n        return {\n          selector: to.hash\n        }\n      } else {\n        return { x: 0, y: 0 }\n      }\n    }\n  })\n\n  // redirect /foo to /foo/\n  router.beforeEach((to, from, next) => {\n    if (!/(\\/|\\.html)$/.test(to.path)) {\n      next(Object.assign({}, to, {\n        path: to.path + '/'\n      }))\n    } else {\n      next()\n    }\n  })\n\n  const options = {}\n\n  themeEnhanceApp({ Vue, options, router, siteData })\n  enhanceApp({ Vue, options, router, siteData })\n\n  const app = new Vue(\n    Object.assign(options, {\n      router,\n      render (h) {\n        return h('div', { attrs: { id: 'app' }}, [\n          h('router-view', { ref: 'layout' })\n        ])\n      }\n    })\n  )\n\n  return { app, router }\n}\n",
        "import { createApp } from './app'\n\nexport default context => new Promise((resolve, reject) => {\n  const { app, router } = createApp()\n  const { url } = context\n  const { fullPath } = router.resolve(url).route\n\n  if (fullPath !== url) {\n    return reject({ url: fullPath })\n  }\n\n  router.push(url)\n  router.onReady(() => resolve(app))\n})\n"
      ],
      "sourceRoot": ""
    },
    "1.server-bundle.js": {
      "version": 3,
      "sources": [],
      "names": [],
      "mappings": "",
      "file": "1.server-bundle.js",
      "sourcesContent": [],
      "sourceRoot": ""
    },
    "2.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue?a4ec",
        "webpack:///./usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue?a885",
        "webpack:////usr/local/lib/node_modules/vuepress/lib/app/components/Badge.vue"
      ],
      "names": [
        "functional",
        "props",
        "type",
        "String",
        "default",
        "text",
        "vertical",
        "render",
        "h",
        "slots",
        "class"
      ],
      "mappings": ";;;;;;;;;;;;;;;;;;AAAmlB,imBAAoB,C;;;;;;;;;;;ACCvmB,kEAAe;AACbA,cAAY,IADC;AAEbC,SAAO;AACLC,UAAM;AACJA,YAAMC,MADF;AAEJC,eAAS;AAFL,KADD;AAKLC,UAAMF,MALD;AAMLG,cAAU;AACRJ,YAAMC,MADE;AAERC,eAAS;AAFD;AANL,GAFM;AAabG,QAba,kBAaLC,CAbK,QAagB;AAAA,QAAhBP,KAAgB,QAAhBA,KAAgB;AAAA,QAATQ,KAAS,QAATA,KAAS;AAC3B,WAAOD,EAAE,MAAF,EAAU;AACfE,aAAO,CAAC,OAAD,EAAUT,MAAMC,IAAhB,EAAsBD,MAAMK,QAA5B;AADQ,KAAV,EAEJL,MAAMI,IAAN,IAAcI,QAAQL,OAFlB,CAAP;AAGD;AAjBY,CAAf,E;;ACDgT,6GAAoB,C;;;;;ACApU;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4F",
      "file": "2.server-bundle.js",
      "sourcesContent": [
        "import mod from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=style&index=0&id=f9f5240a&lang=stylus&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/_css-loader@0.28.11@css-loader/locals.js??ref--13-oneOf-1-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/_postcss-loader@2.1.6@postcss-loader/lib/index.js??ref--13-oneOf-1-1!../../../node_modules/_stylus-loader@3.0.2@stylus-loader/index.js??ref--13-oneOf-1-2!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=style&index=0&id=f9f5240a&lang=stylus&scoped=true&\"",
        "\nexport default {\n  functional: true,\n  props: {\n    type: {\n      type: String,\n      default: 'tip'\n    },\n    text: String,\n    vertical: {\n      type: String,\n      default: 'top'\n    }\n  },\n  render (h, { props, slots }) {\n    return h('span', {\n      class: ['badge', props.type, props.vertical]\n    }, props.text || slots().default)\n  }\n}\n",
        "import mod from \"-!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@1.2.2@cache-loader/dist/cjs.js??ref--3-0!../../../node_modules/_babel-loader@8.0.0-beta.3@babel-loader/lib/index.js??ref--3-1!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=script&lang=js&\"",
        "var render, staticRenderFns\nimport script from \"./Badge.vue?vue&type=script&lang=js&\"\nexport * from \"./Badge.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./Badge.vue?vue&type=style&index=0&id=f9f5240a&lang=stylus&scoped=true&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"f9f5240a\",\n  \"dfda29c2\"\n  \n)\n\ncomponent.options.__file = \"Badge.vue\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "3.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/README.md?e1c5",
        "webpack:///./docs/README.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB;AAChI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6F",
      "file": "3.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"其他：\\\"><a href=\\\"#其他：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 其他：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub\"),_c('OutboundLink')],2)])]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>社区求关注：</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"掘金\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/u/obkoro1/articles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"segmentfault\"),_c('OutboundLink')],2)])],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>VsCode插件了解一下:</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/koro1FileHeader\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"VsCode文件头部注释生成插件\"),_c('OutboundLink')],2)])],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2)])],2),_vm._ssrNode(\" <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">最新更新都在公众号上</p> <p>本文档的最新更新，以及新的文章，算法题，面试题等都会第一时间发布在公众号上。</p></div> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/about/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"关于我\"),_c('OutboundLink')],2)])])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./README.md?vue&type=template&id=0bef33da&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"7af0d7d2\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "4.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/CSS/CSS权重规则.md?08b0",
        "webpack:///./docs/accumulate/CSS/CSS权重规则.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,y6BAAy6B,sBAAsB,gCAAgC,yCAAyC,iHAAiH,8SAA8S,8CAA8C,sFAAsF,4IAA4I,+hCAA+hC,gBAAgB,OAAO,aAAa,OAAO,IAAI,OAAO,WAAW,8CAA8C,kMAAkM,qHAAqH,oFAAoF,iMAAiM,4CAA4C,wmCAAwmC,wuBAAwuB,2CAA2C,8DAA8D,4DAA4D,0CAA0C,qEAAqE,iEAAiE,0CAA0C,0EAA0E,+sBAA+sB,aAAa,SAAS,IAAI,UAAU,gBAAgB,UAAU,UAAU,UAAU,IAAI,UAAU,SAAS,OAAO,SAAS,UAAU,QAAQ,MAAM,QAAQ,sDAAsD,yIAAyI,4CAA4C,2FAA2F,sJAAsJ,4CAA4C,81BAA81B,sJAAsJ,4CAA4C,4CAA4C,iBAAiB,cAAc,IAAI,4DAA4D,2KAA2K,gDAAgD,aAAa,UAAU,ggBAAggB,wBAAwB,2BAA2B;AACtpS;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2F",
      "file": "4.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"css-权重规则\\\"><a href=\\\"#css-权重规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 权重规则</h2> <p>日常开发中，或多或少都会遇到css规则不生效的问题，为了让我们能够减少调试css规则的时间，深刻理解css权重，就十分关键了.</p> <h2 id=\\\"权重规则总结\\\"><a href=\\\"#权重规则总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重规则总结:</h2> <ol><li>!important 优先级最高，但也会被权重高的 important 所覆盖</li> <li>行内样式总会覆盖外部样式表的任何样式(除了!important)</li> <li>单独使用一个选择器的时候，不能跨等级使 css 规则生效</li> <li>如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</li> <li>如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</li> <li>权重相同时，与元素距离近的选择器生效</li></ol> <hr> <h3 id=\\\"css-权重优先级用来干嘛？\\\"><a href=\\\"#css-权重优先级用来干嘛？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> css 权重优先级用来干嘛？</h3> <p>在同一个元素使用不同的方式，声明了相同的一条或多条 css 规则，<strong>浏览器会通过权重来判断哪一种方式的声明，与这个元素最为相关，从而在该元素上应用这个声明方式声明的所有 css 规则</strong>。</p> <h3 id=\\\"权重的五个等级及其权重\\\"><a href=\\\"#权重的五个等级及其权重\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重的五个等级及其权重</h3> <ul><li><p>!important;</p></li> <li><p>行内样式;</p></li> <li><p>ID 选择器, 权重:100;</p></li> <li><p>class,属性选择器和伪类选择器，权重:10;</p> <p>属性选择器指的是:根据元素的属性及属性值来选择元素，比如button的type属性等。\\n伪类选择器: :active :focus等选项.</p></li> <li><p>标签选择器和伪元素选择器，权重:1;</p> <p>伪元素选择器： :before :after</p></li></ul> <h3 id=\\\"等级关系\\\"><a href=\\\"#等级关系\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 等级关系:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">!</span>important<span class=\\\"token operator\\\">&gt;</span>行内样式<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token constant\\\">ID</span>选择器 <span class=\\\"token operator\\\">&gt;</span> 类选择器 <span class=\\\"token operator\\\">|</span> 属性选择器 <span class=\\\"token operator\\\">|</span> 伪类选择器 <span class=\\\"token operator\\\">&gt;</span> 元素选择器\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><hr> <h2 id=\\\"权重规则：\\\"><a href=\\\"#权重规则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 权重规则：</h2> <h3 id=\\\"_1-不推荐使用-important\\\"><a href=\\\"#_1-不推荐使用-important\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1.不推荐使用!important</h3> <p>不推荐使用<code>!important</code>，因为<code>!important</code>根本没有结构与上下文可言，并且很多时候权重的问题，就是因为不知道在哪里定义了一个<code>!important</code>而导致的。</p> <h4 id=\\\"覆盖-important\\\"><a href=\\\"#覆盖-important\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 覆盖 important:</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"虽然我们应该尽量避免使用!important，但你应该知道如何覆盖 important，加点权重就可以实现，codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/ZoVxgQ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">//!important 优先级最高，但也会被权重高的important所覆盖\\n&lt;button id=&quot;a&quot; class=&quot;a&quot;&gt;aaa&lt;/button&gt;\\n#a</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> blue  <span class=\\\"token important\\\">!important</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">/* id的important覆盖class的important*/</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.a</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> red  <span class=\\\"token important\\\">!important</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\\\"><a href=\\\"#_2-行内样式总会覆盖外部样式表的任何样式-会被-important覆盖\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2.行内样式总会覆盖外部样式表的任何样式,会被<code>!important</code>覆盖</h3> <h3 id=\\\"_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\\\"><a href=\\\"#_3-单独使用一个选择器的时候，不能跨等级使-css-规则生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.单独使用一个选择器的时候，不能跨等级使 css 规则生效</h3> <p><strong>无论多少个 class 组成的选择器，都没有一个 ID 选择器权重高</strong>。类似的，无论多少个元素组成的选择器，都没有一个 class 选择器权重高、无论多少个 ID 组成的选择器，都没有行内样式权重高。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/ZoVxgQ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\";\")],2),_vm._ssrNode(\" <pre><code>    在demo中使用了11个class组成一个选择器，最后还是一个ID选择器，设置的样式生效。\\n</code></pre> <h4 id=\\\"可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\\\"><a href=\\\"#可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 可以想象在玄幻小说的那种等级制度，没有突破那个等级，就没有可比性。</h4> <p>所以权重是在双方处于同一等级的情况下，才开始对比。</p> <h3 id=\\\"_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\\\"><a href=\\\"#_4-如果两个权重不同的选择器作用在同一元素上，权重值高的-css-规则生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4.如果两个权重不同的选择器作用在同一元素上，权重值高的 css 规则生效</h3> <p>选择器可能会包含一个或者多个与权重相关的计算点，若经过权重值计算得到的权重值越大，则认为这个选择器的权重高。举一个简单的栗子:</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.test #test</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span> // id 100+class 10=110<span class=\\\"token selector\\\">;\\n.test #test span</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> // id 100+class 10+span 1=111<span class=\\\"token selector\\\">;\\n.test #test .sonClass</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> // id 100+class 10+class 10=120<span class=\\\"token punctuation\\\">;</span> //生效\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\\\"><a href=\\\"#_5-如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 5.如果两个相同权重的选择器作用在同一元素上：以后面出现的选择器为最后规则.</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/jxXKez\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">&lt;div id=&quot;app&quot;&gt;\\n    &lt;div class=&quot;test&quot; id=&quot;test&quot;&gt;\\n    &lt;span &gt;啦啦啦&lt;/span&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n#test span</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">#app span</span><span class=\\\"token punctuation\\\">{</span> // 生效 因为后面出现\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h3 id=\\\"_6-权重相同时，与元素距离近的选择器生效\\\"><a href=\\\"#_6-权重相同时，与元素距离近的选择器生效\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 6.权重相同时，与元素距离近的选择器生效</h3> <p>比如不同的 style 表，head 头部等,来看下面的栗子：</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">#content h1</span> <span class=\\\"token punctuation\\\">{</span> // css样式表中\\n    <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 5px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">&lt;style type=&quot;text/css&quot;&gt;\\n    #content h1</span> <span class=\\\"token punctuation\\\">{</span> // html头部 因为html头部离元素更近一点，所以生效\\n    <span class=\\\"token property\\\">padding</span><span class=\\\"token punctuation\\\">:</span> 10px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n&lt;/style&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h2 id=\\\"建议：\\\"><a href=\\\"#建议：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 建议：</h2> <ol><li>避免使用<code>!important</code>;</li> <li>利用 id 增加选择器权重;</li> <li>减少选择器的个数（避免层层嵌套）;</li></ol> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./CSS权重规则.md?vue&type=template&id=419f8fde&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"6a175957\"\n  \n)\n\ncomponent.options.__file = \"CSS权重规则.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "5.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/CSS/CSS概念-BFC深入浅出.md?7f59",
        "webpack:///./docs/accumulate/CSS/CSS概念-BFC深入浅出.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,0pBAA0pB,cAAc,gxFAAgxF,0BAA0B,2jBAA2jB,iLAAiL,oDAAoD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,iLAAiL,mDAAmD,oDAAoD,8GAA8G,iLAAiL,mDAAmD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,wDAAwD,kDAAkD,gBAAgB,iBAAiB,yBAAyB,4BAA4B,kBAAkB,qBAAqB,GAAG,SAAS,sBAAsB,6BAA6B,qBAAqB,GAAG,SAAS,sFAAsF,mBAAmB,m5DAAm5D,iLAAiL,kDAAkD,oDAAoD,8GAA8G,iLAAiL,oDAAoD,oDAAoD,wGAAwG,wDAAwD,kLAAkL,iLAAiL,oDAAoD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,wDAAwD,4qBAA4qB,+mBAA+mB,iLAAiL,oDAAoD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,iLAAiL,mDAAmD,oDAAoD,8GAA8G,iLAAiL,mDAAmD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,wDAAwD,wBAAwB,iBAAiB,kBAAkB,gBAAgB,qBAAqB,GAAG,SAAS,kBAAkB,qBAAqB,oCAAoC,GAAG,SAAS,iBAAiB,GAAG,84DAA84D,6IAA6I,mJAAmJ,yIAAyI,4CAA4C,yFAAyF,mJAAmJ,yIAAyI,0IAA0I,wIAAwI,4CAA4C,quCAAquC,4LAA4L,qKAAqK,sIAAsI,uIAAuI,0IAA0I,sDAAsD,oDAAoD,0GAA0G,wDAAwD,0GAA0G,4LAA4L,uKAAuK,0IAA0I,sDAAsD,oDAAoD,8GAA8G,4LAA4L,sKAAsK,sIAAsI,yIAAyI,sDAAsD,oDAAoD,wGAAwG,wDAAwD,8GAA8G,qDAAqD,+GAA+G,sDAAsD,yGAAyG,qDAAqD,+GAA+G,sDAAsD,yGAAyG,qDAAqD,+GAA+G,sDAAsD,yGAAyG,qDAAqD,+GAA+G,sDAAsD,yGAAyG,qDAAqD,+GAA+G,sDAAsD,0GAA0G,wDAAwD;AAC1nqB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+F",
      "file": "5.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h3 id=\\\"css-概念-bfc-深入浅出\\\"><a href=\\\"#css-概念-bfc-深入浅出\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSS 概念-BFC 深入浅出</h3> <p>好记性不如烂笔头，研究了一下 BFC，发现里面比较细的东西也是很多的！关于 BFC，很多人可能都听说过 BFC 这个东西，大概知道这是个啥东西，相信很多人对此并没有一个非常细致的了解，本文预计篇幅较长，认真，耐着性子看，应该都能够比较深入的理解 BFC 这个概念的规则、作用以及用法。希望喜欢的朋友可以点个赞，或者关注一波本人，谢谢。</p> <h2 id=\\\"bfc-是什么鬼？\\\"><a href=\\\"#bfc-是什么鬼？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 是什么鬼？</h2> <p><strong>所谓的 BFC 就是 css 布局的一个概念，是一块区域，一个环境。</strong></p> <p>先稳住别懵逼，接着往下走。</p> <h3 id=\\\"关于-bfc-的定义：\\\"><a href=\\\"#关于-bfc-的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于 BFC 的定义：</h3> <p>BFC(Block formatting context)直译为&quot;块级格式化上下文&quot;。它<strong>是一个独立的渲染区域</strong>，只有<strong>Block-level box</strong>参与（在下面有解释）， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p> <h3 id=\\\"通俗的说\\\"><a href=\\\"#通俗的说\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通俗的说:</h3> <p>BFC 可以简单的理解为<strong>某个元素的一个 CSS 属性</strong>，拥有这个属性的元素<strong>对内部元素和外部元素会表现出一些特性，这就是 BFC</strong>。</p> <h3 id=\\\"触发条件\\\"><a href=\\\"#触发条件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 触发条件</h3> <p><strong>满足下列条件之一就可触发 BFC</strong></p> <ol><li><p>根元素，即 HTML 元素</p></li> <li><p><code>float</code>的值不为<code>none</code></p></li> <li><p><code>overflow</code>的值不为<code>visible</code></p></li> <li><p><code>display</code>的值为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code></p></li> <li><p><code>position</code>的值为<code>absolute</code>或<code>fixed</code></p></li></ol> <h3 id=\\\"bfc-布局规则：\\\"><a href=\\\"#bfc-布局规则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则：</h3> <ol><li><p>内部的 Box 会在垂直方向，一个接一个地放置。</p></li> <li><p>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</p></li> <li><p>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p></li> <li><p>BFC 的区域不会与 float box 重叠。</p></li> <li><p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p></li> <li><p>计算 BFC 的高度时，浮动元素也参与计算</p></li></ol> <h3 id=\\\"bfc-有哪些作用：\\\"><a href=\\\"#bfc-有哪些作用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 有哪些作用：</h3> <ol><li>自适应两栏布局</li> <li>可以阻止元素被浮动元素覆盖</li> <li>可以包含浮动元素——清除内部浮动</li> <li>分属于不同的 BFC 时可以阻止 margin 重叠</li></ol> <hr> <h2 id=\\\"bfc-的规则和作用介绍\\\"><a href=\\\"#bfc-的规则和作用介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 的规则和作用介绍:</h2> <h4 id=\\\"bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\\\"><a href=\\\"#bfc-布局规则-1：内部的-box-会在垂直方向，一个接一个地放置。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 1：内部的 Box 会在垂直方向，一个接一个地放置。</h4> <p>上文定义中提到过的块级盒：block-level box，在这里解析一波：</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/b80801d8707be24ecbc0\\\" alt=\\\"这个就是我们平常操作盒子的组成\\\"></p> <p>我们平常说的盒子是由 margin、border、padding、content 组成的，实际上每种类型的四条边定义了一个盒子，分别是分别是<strong>content box、padding box、border box、margin box</strong>，这四种类型的盒子一直存在，即使他们的值为 0.决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。</p> <p><strong>提示</strong>：Box 之间的距离虽然也可以使用 padding 来控制，但是此时实际上还是属于 box 内部里面，而且使用 padding 来控制的话就不能再使用 border 属性了。</p> <p>布局规则 1 就是我们<strong>平常 div 一行一行块级放置的样式</strong>，大家想一下就知道了，这里就不展开了。</p> <h4 id=\\\"bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\\\"><a href=\\\"#bfc-布局规则-2：box-垂直方向的距离由-margin-决定。属于同一个-bfc-的两个相邻-box-的-margin-会发生重叠。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 2：Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</h4> <p><img src=\\\"https://lc-gold-cdn.xitu.io/6b0fc0e3d34f94875d35.gif\\\" alt></p> <p>上文提到过，决定块盒在包含块中与相邻块盒的垂直间距的便是 margin-box。，上面的栗子就是这种情况。</p> <p><strong>演示中 css 属性设置</strong>：上面的 box：margin-bottom: 100px;下面的 box：margin-top: 100px;（他们是同一侧的 margin，所以会发生 margin 重叠的情况，两个 div 的距离实际上只有 100px。）</p> <h4 id=\\\"bfc-的作用-4：阻止-margin-重叠\\\"><a href=\\\"#bfc-的作用-4：阻止-margin-重叠\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 的作用 4：阻止 margin 重叠:</h4> <p>当两个相邻块级子元素<strong>分属于不同的 BFC</strong>时可以<strong>阻止 margin 重叠</strong></p> <p><strong>操作方法</strong>:给其中一个 div 外面包一个 div，然后通过触发外面这个 div 的 BFC，就可以阻止这两个 div 的 margin 重叠</p> <p>下面是代码：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>aside<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!-- css代码 --&gt;</span>\\n.aside {\\n  margin-bottom: 100px; //margin属性\\n  width: 100px;\\n  height: 150px;\\n  background: #f66;\\n}\\n.main {\\n  margin-top: 100px; //margin属性\\n  height: 200px;\\n  background: #fcc;\\n}\\n.text {\\n  /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/\\n  overflow: hidden; //此时已经触发了BFC属性。\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br></div></div><p><strong>ps</strong>:触发方式可以参考上文给出的触发条件。</p> \"),_vm._ssrNode(\"<h4 id=\\\"这里有一个网址可以在线演示，通过演示，可以更直观一点：\\\">\",\"</h4>\",[_vm._ssrNode(\"<a href=\\\"#这里有一个网址可以在线演示，通过演示，可以更直观一点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这里有一个网址可以在\"),_vm._ssrNode(\"<a href=\\\"http://www.cnblogs.com/xiaohuochai/p/5248536.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"线演示\"),_c('OutboundLink')],2),_vm._ssrNode(\"，通过演示，可以更直观一点：\")],2),_vm._ssrNode(\" <p><img src=\\\"https://lc-gold-cdn.xitu.io/6daeb3cbf5f82d1f6db8.gif\\\" alt=\\\"这里面也是一篇好文章，关于BFC的\\\"></p> <h4 id=\\\"bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\\\"><a href=\\\"#bfc-布局规则-3：每个元素的-margin-box-的左边，-与包含块-border-box-的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 3：每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>par<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>child<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    //给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，但还是在父div的范围之内。\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>child<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><strong>解析</strong>：给这两个子 div 加浮动，浮动的结果，如果没有清除浮动的话，父 div 不会将下面两个 div 包裹，但还是在父 div 的范围之内，<strong>左浮是子 div 的左边接触父 div 的 borderbox 的左边，右浮是子 div 接触父 div 的 borderbox 右边</strong>，除非设置 margin 来撑开距离，否则一直是这个规则。</p> <h4 id=\\\"bfc-作用-3：可以包含浮动元素——清除内部浮动\\\"><a href=\\\"#bfc-作用-3：可以包含浮动元素——清除内部浮动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 作用 3：可以包含浮动元素——清除内部浮动</h4> <p>给父 divpar 加上 <code>overflow: hidden;</code></p> <p><strong>清除浮动原理</strong>:触发父 div 的 BFC 属性，使下面的子 div 都<strong>处在父 div 的同一个 BFC 区域之内</strong>，此时已成功清除浮动。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/dfe63a3d19cae8adf5fa.gif\\\" alt></p> <p>还可以向同一个方向浮动来达到清除浮动的目的，清除浮动的原理是两个 div 都位于同一个浮动的 BFC 区域之中。</p> <h4 id=\\\"bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\\\"><a href=\\\"#bfc-布局规则-4：bfc-的区域不会与-float-box-重叠：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 4：BFC 的区域不会与 float box 重叠：</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>aside<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n.aside {\\n  width: 100px;\\n  height: 150px;\\n  float: left;\\n  background: #f66;\\n}\\n.main {\\n  height: 200px;\\n  overflow: hidden; //触发main盒子的BFC\\n  background: #fcc;\\n}\\n.text {\\n  width: 500px;\\n}\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div><p>上面 aside 盒子有一个浮动属性，覆盖了 main 盒子的内容，main 盒子没有清除 aside 盒子的浮动。只做了一个动作，就是<strong>触发自身的 BFC</strong>，然后就<strong>不再被 aside 盒子覆盖</strong>了。所以：<strong>BFC 的区域不会与 float box 重叠</strong>。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/0e2c7b710c4a13111120.gif\\\" alt></p> <h4 id=\\\"bfc-作用：自适应两栏布局。\\\"><a href=\\\"#bfc-作用：自适应两栏布局。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 作用：自适应两栏布局。</h4> <p><img src=\\\"https://lc-gold-cdn.xitu.io/304255779293ba4c2082.gif\\\" alt></p> <p>还是上面的代码，此时 BFC 的区域不会与 float box 重叠，因此<strong>会根据包含块（父 div）的宽度，和 aside 的宽度，自适应宽度。</strong></p> <hr> <h3 id=\\\"bfc-与-layout\\\"><a href=\\\"#bfc-与-layout\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 与 Layout</h3> <p>IE 作为浏览器中的奇葩，当然不可能按部就班的支持 BFC 标准，于是乎 IE 中有了 Layout 这个东西。<strong>Layout 和 BFC 基本是等价的</strong>，为了处理 IE 的兼容性，在需要触发 BFC 时，我们除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对 IE 浏览器使用 zoom: 1 来触发 IE 浏览器的 Layout。</p> <h3 id=\\\"有趣的文本\\\"><a href=\\\"#有趣的文本\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 有趣的文本:</h3> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.par</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">margin-top</span><span class=\\\"token punctuation\\\">:</span> 3rem<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 5px solid #fcc<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 300px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.child</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 5px solid #f66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">float</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p><img src=\\\"https://lc-gold-cdn.xitu.io/216207666aa8bef15115\\\" alt></p> <p><strong>原因：</strong></p> <p>这里两个 div 被撑开，是因为父 div 被 p 标签撑开了，并不是因为清除浮动的原因，从下面这张图片可以清楚的知道。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/5f7dc07585ae6c512bb8\\\" alt></p> <p>其实以上的几个例子都体现了 BFC 布局规则第五条————</p> <h4 id=\\\"bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\\\"><a href=\\\"#bfc-布局规则-5：bfc-就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> BFC 布局规则 5：BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</h4> <p><strong>文本环绕 float</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">float</span><span class=\\\"token punctuation\\\">:</span> left<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> #000<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 200px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> #AAA<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"> <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 30px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 30px<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>content<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><img src=\\\"https://lc-gold-cdn.xitu.io/c02b2396d987f4d7439a\\\" alt></p> <p>问题：为什么 div 的左上角被覆盖了，而文本却没有被覆盖，float 不是应该跟普通流不在一个层级吗？是因为 float 属性不生效吗？</p> <p><strong>解决</strong>：</p> <p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在 CSS 中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p> <p><img src=\\\"https://lc-gold-cdn.xitu.io/5994ed11ebc3e4b971db.gif\\\" alt></p> <p>从上图可以看到，float 属性确实生效，将 float 隐藏后，下面还有一个红色的 div，这个 div 是被黑色 div 所覆盖掉的。<strong>div 会被 float 覆盖，而文本却没有被 float 覆盖</strong>，是因为<strong>float 当初设计的时候</strong>就是为了<strong>使文本围绕在浮动对象的周围</strong>。</p> <p>以上。2017.5.4.</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./CSS概念-BFC深入浅出.md?vue&type=template&id=b9779558&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1c3e2cb0\"\n  \n)\n\ncomponent.options.__file = \"CSS概念-BFC深入浅出.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "6.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/Object.defineProperty.md?b0f3",
        "webpack:///./docs/accumulate/JS/Object.defineProperty.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,ydAAyd,0IAA0I,0CAA0C,4KAA4K,8TAA8T,gbAAgb,oFAAoF,0IAA0I,4QAA4Q,mOAAmO,4QAA4Q,mTAAmT,+NAA+N,2FAA2F,qvDAAqvD,0IAA0I,0CAA0C,4KAA4K,8TAA8T,qWAAqW,qIAAqI,kBAAkB,+HAA+H,8CAA8C,wNAAwN,0DAA0D,6JAA6J,8CAA8C,4CAA4C,oFAAoF,8QAA8Q,sLAAsL,yTAAyT,8NAA8N,4QAA4Q,mTAAmT,+NAA+N,qHAAqH;AACpvR;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4G",
      "file": "6.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"一次弄懂-object-defineproperty\\\"><a href=\\\"#一次弄懂-object-defineproperty\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 一次弄懂 Object.defineProperty</h2> <h3 id=\\\"基本用法：\\\"><a href=\\\"#基本用法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 基本用法：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'周杰伦'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'青花瓷'</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'music'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token comment\\\">// music的值</span>\\n  <span class=\\\"token comment\\\">// configurable: false, // music默认不能删除 要删除须设置为true 设为true 可删除</span>\\n  <span class=\\\"token comment\\\">// writable: false,  // 默认不能修改music 设为true 可修改</span>\\n  <span class=\\\"token comment\\\">// enumerable: false, // music默认是不能被枚举(遍历) 设为true 可遍历</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷 删除无效</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'听妈妈的话'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷 修改无效</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// music 没有被遍历</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div><h4 id=\\\"默认不能修改、不能删除、不能遍历\\\"><a href=\\\"#默认不能修改、不能删除、不能遍历\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 默认不能修改、不能删除、不能遍历</h4> <p>通过栗子可以发现：通过 defineProperty 设置的属性，<strong>默认不能修改，不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</p> <h4 id=\\\"object-defineproperty的作用：\\\"><a href=\\\"#object-defineproperty的作用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>Object.defineProperty</code>的作用：</h4> <p><strong>完全掌控</strong>对象的某个属性，增删改查全都可以设定！</p> <h3 id=\\\"设置get、set：\\\"><a href=\\\"#设置get、set：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置<code>get</code>、<code>set</code>：</h3> <div class=\\\"danger custom-block\\\"><p class=\\\"custom-block-title\\\">不能同时设置</p> <p>get,set 设置时不能同时设置 writable 和 value, 他们是一对情侣的存在，交叉设置或同时存在,会报错</p></div> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'周杰伦'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'青花瓷'</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'music'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 设置可枚举</span>\\n  <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\\\"token comment\\\">// let value = &quot;强行设置get的返回值&quot;; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// value = val; // 将修改的值重新赋给song</span>\\n    value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'强行设置修改的值'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除无效</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'听妈妈的话'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 强行设置修改的值</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer, music 上面设置了enumerable可枚举</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br></div></div><p>这个<code>Object.defineProperty</code>的用法就是上面两个栗子中所展示的那样，可以将栗子<code>copy</code>到本地自己玩一下。</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./Object.defineProperty.md?vue&type=template&id=2e38b287&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"99d884f8\"\n  \n)\n\ncomponent.options.__file = \"Object.defineProperty.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "7.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/cookie和storage的使用以及区别.md?8b34",
        "webpack:///./docs/accumulate/JS/cookie和storage的使用以及区别.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,g4BAAg4B,snBAAsnB,kPAAkP,6bAA6b,0nBAA0nB,sWAAsW,qfAAqf,0uBAA0uB,2TAA2T,qkBAAqkB,kOAAkO,4nBAA4nB,KAAK,sIAAsI,8TAA8T,iOAAiO,0VAA0V,8CAA8C,mIAAmI,4CAA4C,sTAAsT,knCAAknC,mUAAmU,qXAAqX,6qBAA6qB,6RAA6R,uEAAuE,qJAAqJ,yEAAyE,4CAA4C,kHAAkH,uPAAuP,6FAA6F,iYAAiY,4CAA4C,ksBAAksB,yOAAyO,iWAAiW,geAAge,0PAA0P,iRAAiR,6WAA6W,4CAA4C,w5DAAw5D,gBAAgB,qBAAqB,EAAE,oBAAoB,OAAO,gBAAgB,oBAAoB,EAAE,oBAAoB;AACrzgB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sG",
      "file": "7.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"cookie、localstorage-和-sessionstorage-的使用以及区别\\\"><a href=\\\"#cookie、localstorage-和-sessionstorage-的使用以及区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cookie、localStorage 和 sessionStorage 的使用以及区别</h2> <h3 id=\\\"localstorage-和-sessionstorage-的增删改查：\\\"><a href=\\\"#localstorage-和-sessionstorage-的增删改查：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> localStorage 和 sessionStorage 的增删改查：</h3> <ol><li><p><strong>存储数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'key'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'sessionStorage的值'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 存储数据</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li> <li><p><strong>获取指定键名数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataSession<span class=\\\"token operator\\\">=</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'key'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取指定键名数据</span>\\n<span class=\\\"token keyword\\\">let</span> dataSession2<span class=\\\"token operator\\\">=</span>sessionStorage<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//sessionStorage是js对象，也可以使用key的方式来获取值</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>dataSession<span class=\\\"token punctuation\\\">,</span>dataSession2<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'获取指定键名数据'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div></li> <li><p><strong>获取sessionStorage全部数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataAll <span class=\\\"token operator\\\">=</span> sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">valueOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取全部数据</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>dataAll<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'获取全部数据'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div></li> <li><p><strong>清空sessionStorage数据</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清空</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li></ol> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">localStorage</p> <p>只要将<code>sessionStorage</code>替换成<code>localStorage</code>即可，他们两个的使用方法完全是一样的。</p></div> <h3 id=\\\"cookie-的增删改茶\\\"><a href=\\\"#cookie-的增删改茶\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cookie 的增删改茶:</h3> <ol><li><p><strong>保存 cookie 值：</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dataCookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'110'</span><span class=\\\"token punctuation\\\">;</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>cookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'token'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'='</span> <span class=\\\"token operator\\\">+</span> dataCookie<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div></li> <li><p><strong>获取指定名称的 cookie 值</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> cookieData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 获取指定名称的cookie值</span>\\n  <span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'(^| )'</span> <span class=\\\"token operator\\\">+</span> name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'=([^;]*)(;|$)'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用正则匹配 对应cookie，返回数组</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">unescape</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> cookieData <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// cookie赋值给变量。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div></li> <li><p>保存 cookie 并且设置过期时间：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'cookie的值'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span>value<span class=\\\"token punctuation\\\">,</span>expiresDays<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//存储 cookie 值并且设置 cookie 过期时间</span>\\n    <span class=\\\"token keyword\\\">let</span> date<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span>expiresDays<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">24</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">3600</span>\\\\<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token operator\\\">=</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>value<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">; expires=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toGMTString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'存储 cookie 值并且设置 cookie 过期时间'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div></li> <li><p>删除 cookie:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">delCookie</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">delCookie</span><span class=\\\"token punctuation\\\">(</span>cookieName1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//删除cookie</span>\\n  <span class=\\\"token keyword\\\">let</span> date2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setTime</span><span class=\\\"token punctuation\\\">(</span>date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//把时间设置为过去的时间，会自动删除</span>\\n  document<span class=\\\"token punctuation\\\">.</span>cookie <span class=\\\"token operator\\\">=</span> cookieName1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'=v; expires='</span> <span class=\\\"token operator\\\">+</span> date2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toGMTString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'删除cookie'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div></li></ol> <hr> <h3 id=\\\"三者的异同：\\\"><a href=\\\"#三者的异同：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 三者的异同：</h3> <p>这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别：</p> <p><strong>生命周期</strong>：</p> <p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p> <p>localStorage：除非被手动清除，否则将会永久保存。</p> <p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p> <p><strong>存放数据大小</strong>：</p> <p>cookie：4KB左右</p> <p>localStorage和sessionStorage：可以保存5MB的信息。</p> <p><strong>http请求</strong>：</p> <p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p> <p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p> <p><strong>易用性</strong>：</p> <p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p> <p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p> <hr> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <p>从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p> <p>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</p> <p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p> <h3 id=\\\"浏览器支持情况：\\\"><a href=\\\"#浏览器支持情况：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器支持情况：</h3> <p>localStorage和sessionStorage是html5才应用的新特性，可能有些浏览器并不支持，这里要注意。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2017/11/25/15ff2d54764e53af?w=861&h=113&f=png&s=9592\\\" alt></p> <p>cookie的浏览器支持没有找到，可以通过下面这段代码来判断所使用的浏览器是否支持cookie：</p> <pre><code>if(navigator.cookieEnabled) {\\n  alert(&quot;你的浏览器支持cookie功能&quot;);//提示浏览器支持cookie  \\n} else {\\n  alert(&quot;你的浏览器不支持cookie&quot;);//提示浏览器不支持cookie   }\\n</code></pre> <h3 id=\\\"数据存放处：\\\"><a href=\\\"#数据存放处：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数据存放处：</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2017/11/25/15ff2f727028f37b?w=1028&h=378&f=png&s=28065\\\" alt=\\\"Cookie、localStorage、sessionStorage数据存放处\\\"></p> <h3 id=\\\"番外：各浏览器cookie大小、个数限制。\\\"><a href=\\\"#番外：各浏览器cookie大小、个数限制。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 番外：各浏览器Cookie大小、个数限制。</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"cookie 使用起来还是需要小心一点，有兴趣的可以看一下这个\"),_vm._ssrNode(\"<a href=\\\"https://www.cnblogs.com/henryhappier/archive/2011/03/03/1969564.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"链接\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./cookie和storage的使用以及区别.md?vue&type=template&id=0832f5ea&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5623be33\"\n  \n)\n\ncomponent.options.__file = \"cookie和storage的使用以及区别.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "8.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/函数防抖和函数节流.md?ce9f",
        "webpack:///./docs/accumulate/JS/函数防抖和函数节流.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,wHAAwH,ohCAAohC,8KAA8K,4NAA4N,kLAAkL,sQAAsQ,yIAAyI,gDAAgD,0TAA0T,8KAA8K,sHAAsH,mIAAmI,8CAA8C,0CAA0C,4CAA4C,gUAAgU,oQAAoQ,2FAA2F,0CAA0C,geAAge,qiBAAqiB,w3EAAw3E,kLAAkL,4NAA4N,0VAA0V,6LAA6L,uLAAuL,8OAA8O,mLAAmL,0GAA0G,8CAA8C,0CAA0C,4CAA4C,oRAAoR,2CAA2C,oQAAoQ,2FAA2F,0CAA0C,+dAA+d,s3DAAs3D,4LAA4L,uOAAuO,sWAAsW,yMAAyM,uLAAuL,2RAA2R,0HAA0H,4DAA4D,wDAAwD,0CAA0C,oDAAoD,+RAA+R,2CAA2C,4LAA4L,UAAU,iIAAiI,wHAAwH,0CAA0C,qpBAAqpB;AAClne;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "8.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"防抖函数-节流函数\\\"><a href=\\\"#防抖函数-节流函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数&amp;节流函数</h1> <p>节流函数和防抖函数是 JS 比较重要的概念，应用好了可以提高很大的性能，在面试中也是很高频的一个考点。下面一起来看看这两种方法是如何使用的：</p> <h2 id=\\\"防抖函数-debounce\\\"><a href=\\\"#防抖函数-debounce\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 防抖函数(debounce):</h2> <h3 id=\\\"概念：\\\"><a href=\\\"#概念：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时</strong>。</p> <h3 id=\\\"生活中的栗子：\\\"><a href=\\\"#生活中的栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>如果有人进电梯（触发事件），那电梯将在 10 秒钟后出发（执行事件），这时如果又有人进电梯了（在 10 秒内再次触发该事件），我们又得等 10 秒再出发（重新计时）。</p> <h3 id=\\\"代码栗子：\\\"><a href=\\\"#代码栗子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 防抖函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果有一个函数在等待执行 清除定时器 下面重新计时</span>\\n      <span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// wait时间后(期间不能再触发debounce) 执行回调</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次在1500ms后触发，之后每1000ms触发一次</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 还没执行就一直重复触发,不会执行</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br></div></div><div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">可以这样理解</p> <p>函数触发停止一段时间后(期间不能再触发debounce，否则将重新计时)，再执行回调函数</p></div> <h3 id=\\\"机制：\\\"><a href=\\\"#机制：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>防抖函数主要利用定时器的延迟执行特性，根据是否有定时器在等待执行：</p> <ul><li>触发了一个事件后：如果有一个定时任务待执行，就清除定时器，重新计时。</li> <li>如果没有任务待执行，就定时执行这个事件。</li></ul> <h3 id=\\\"应用场景：\\\"><a href=\\\"#应用场景：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>表单的连续点击，防止重复提交。比如重复发送一篇文章。</li> <li>类百度的搜索，连续输入等输入停止后再搜索。</li> <li>一直拖动浏览器窗口，只想触发一次事件等。</li></ol> <h2 id=\\\"节流函数-throttle\\\"><a href=\\\"#节流函数-throttle\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 节流函数(throttle):</h2> <h3 id=\\\"概念：-2\\\"><a href=\\\"#概念：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 概念：</h3> <p><strong>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行(单位时间内有事件被多次触发则，只生效一次)</strong>。</p> <h3 id=\\\"生活中的栗子：-2\\\"><a href=\\\"#生活中的栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生活中的栗子：</h3> <p>漏水的自来水水龙头，尽管水龙头里面有很多水(一直在触发事件)，但还是一滴一滴的往下滴(单位事件内只生效一次)。</p> <h3 id=\\\"代码栗子：-2\\\"><a href=\\\"#代码栗子：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码栗子：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 节流函数 每隔一定时间就执行</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// !_lastTime 第一次进入</span>\\n      <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 当前时间- 上次执行的时间 超过 给定时间间隔 就执行回调</span>\\n      _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 触发后，上次执行时间赋值为当前时间</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'回调'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要执行的函数</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// 每隔10毫秒都会触发一次throttle，每隔一秒触发一次actionFn回调(1秒内再次触发被丢弃)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><ul><li>一开始_lastTime 没有值，触发回调,保存当前触发的时间为_lastTime</li> <li>10毫秒触发一次,每次触发 用_nowTime-_lastTime 超过给定的时间(1秒)，就再次触发回调</li></ul> <h3 id=\\\"机制：-2\\\"><a href=\\\"#机制：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 机制：</h3> <p>节流函数根据时间差是否超过给定时间(gapTime)来决定是否触发回调。</p> <h3 id=\\\"应用场景：-2\\\"><a href=\\\"#应用场景：-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用场景：</h3> <ol><li>自动保存草稿功能，当用户在输入的时候(一直触发事件),单位时间内只保存一次草稿。</li> <li>游戏中的刷新率</li></ol> <h2 id=\\\"怎么给回调函数传参？\\\"><a href=\\\"#怎么给回调函数传参？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 怎么给回调函数传参？</h2> <p><strong>通过ES6的<code>...</code>扩展符来保存回调函数的参数，并传给回调函数</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>      <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> gapTime<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> _lastTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">let</span> _nowTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_nowTime <span class=\\\"token operator\\\">-</span> _lastTime <span class=\\\"token operator\\\">&gt;</span> gapTime <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>_lastTime<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// !_lastTime 一开始的时候没有值为true     </span>\\n                    <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    _lastTime <span class=\\\"token operator\\\">=</span> _nowTime<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">actionFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n            console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;执行函数&quot;</span><span class=\\\"token punctuation\\\">,</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// arr是个数组 接收不定数量的参数 没有参数是个空数组</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span>actionFn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'执行函数参数1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'执行函数参数2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 节流 </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><h2 id=\\\"作用和本质：\\\"><a href=\\\"#作用和本质：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 作用和本质：</h2> <ul><li><p>防抖函数和节流函数主要解决的问题是：<strong>防止函数”短时间“的重复执行</strong>。</p></li> <li><p>它们本质上是：<strong>在时间轴上控制函数的执行次数</strong>。</p></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./函数防抖和函数节流.md?vue&type=template&id=1590e63f&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ed12f5c\"\n  \n)\n\ncomponent.options.__file = \"函数防抖和函数节流.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "9.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/多维数组展开.md?1d76",
        "webpack:///./docs/accumulate/JS/多维数组展开.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,krBAAkrB,2CAA2C,sWAAsW,2CAA2C,iRAAiR,2tBAA2tB,wHAAwH,mNAAmN,4CAA4C,0CAA0C,2gCAA2gC,oZAAoZ;AAC1hI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "9.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"多维数组展开\\\"><a href=\\\"#多维数组展开\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 多维数组展开</h1> <h3 id=\\\"原理：\\\"><a href=\\\"#原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理：</h3> <ul><li>利用reduce累加，将数组平铺。</li> <li>判断每次传入的第二个参数是否为数组，如果是数组的话，递归。</li> <li>然后每层都平铺，一层一层用<code>concat</code>连接成一个数组</li></ul> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">flatten</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>flat<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>flat<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// flat:初始值或累加的值 next:当前值</span>\\n    <span class=\\\"token keyword\\\">return</span> flat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 判断当前元素是否为数组 决定是否递归 将值返回到下次循环</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 运行示例：</span>\\n<span class=\\\"token keyword\\\">let</span> nestedArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 四维数组 展开</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>nestedArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,7]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./多维数组展开.md?vue&type=template&id=4e6a07a0&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"51fb18ee\"\n  \n)\n\ncomponent.options.__file = \"多维数组展开.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "10.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/数组API解析合集.md?2be9",
        "webpack:///./docs/accumulate/JS/数组API解析合集.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,85BAA85B,mDAAmD,6XAA6X,8UAA8U,+eAA+e,ovCAAovC,+XAA+X,+wBAA+wB,qmBAAqmB,0CAA0C,gTAAgT,uDAAuD,8aAA8a,+tBAA+tB,wlCAAwlC,+5GAA+5G,kaAAka,2QAA2Q,ojBAAojB,4tCAA4tC,mfAAmf,2QAA2Q,k1BAAk1B,8mBAA8mB,yQAAyQ,w0CAAw0C,ukBAAukB,mRAAmR,4xBAA4xB,8mBAA8mB,mRAAmR,klCAAklC,YAAY,qFAAqF,YAAY,qFAAqF,WAAW,qFAAqF,WAAW,oFAAoF,qNAAqN,gDAAgD,WAAW,OAAO,YAAY,OAAO,WAAW,OAAO,YAAY,uuBAAuuB,mZAAmZ,8bAA8b,aAAa,0DAA0D,ovCAAovC,qDAAqD,8FAA8F,sXAAsX,qIAAqI,4CAA4C,oFAAoF,+NAA+N,8DAA8D,iEAAiE,iXAAiX,qIAAqI,4CAA4C,oFAAoF,+NAA+N,8DAA8D,k0BAAk0B,wPAAwP,oFAAoF,uPAAuP,oFAAoF,wPAAwP,oFAAoF,uPAAuP,oFAAoF,uPAAuP,oFAAoF,wPAAwP,oFAAoF,4VAA4V,gTAAgT,qSAAqS,mFAAmF,oSAAoS,4CAA4C,sFAAsF,MAAM,QAAQ,SAAS,SAAS,GAAG,EAAE,MAAM,QAAQ,SAAS,SAAS,GAAG,EAAE,MAAM,QAAQ,SAAS,SAAS,IAAI,EAAE,MAAM,QAAQ,SAAS,SAAS,GAAG,EAAE,MAAM,QAAQ,UAAU,SAAS,GAAG,EAAE,MAAM,QAAQ,UAAU,SAAS,GAAG,wwBAAwwB,mIAAmI,oFAAoF,mIAAmI,oFAAoF,gIAAgI,oFAAoF,mIAAmI,oFAAoF,gIAAgI,oFAAoF,gIAAgI,oFAAoF,4VAA4V,gTAAgT,mEAAmE,2LAA2L,mFAAmF,kMAAkM,4CAA4C,sFAAsF,MAAM,UAAU,OAAO,YAAY,EAAE,MAAM,UAAU,OAAO,YAAY,EAAE,MAAM,UAAU,OAAO,YAAY,EAAE,MAAM,UAAU,OAAO,SAAS,EAAE,MAAM,UAAU,OAAO,SAAS,EAAE,MAAM,UAAU,OAAO,SAAS,slCAAslC,0SAA0S,sQAAsQ,q4BAAq4B,4SAA4S,sQAAsQ,26BAA26B,mVAAmV,sQAAsQ,65BAA65B,sVAAsV,sQAAsQ,84BAA84B,wNAAwN,2NAA2N,+2HAA+2H,SAAS,OAAO,WAAW,OAAO,WAAW,OAAO,SAAS,OAAO,SAAS,OAAO,WAAW,OAAO,SAAS,OAAO,WAAW,OAAO,SAAS,OAAO,WAAW,sxHAAsxH,uoBAAuoB,2ZAA2Z,0SAA0S,sQAAsQ,8TAA8T,sQAAsQ,guBAAguB,qIAAqI,oFAAoF,uSAAuS,sQAAsQ,2CAA2C,MAAM,UAAU,OAAO,cAAc,KAAK,MAAM,UAAU,OAAO,cAAc,6DAA6D,2DAA2D,MAAM,MAAM,UAAU,OAAO,YAAY,IAAI,MAAM,UAAU,OAAO,YAAY,iFAAiF,6CAA6C,MAAM,UAAU,OAAO,YAAY,OAAO,UAAU,OAAO,aAAa,IAAI,MAAM,UAAU,OAAO,YAAY,OAAO,UAAU,OAAO,aAAa,w6CAAw6C,wSAAwS,sYAAsY,+2BAA+2B,ySAAyS,gOAAgO,oQAAoQ,wKAAwK,2SAA2S,mIAAmI,yvCAAyvC,qIAAqI,2cAA2c,kTAAkT,8pDAA8pD,4dAA4d,0iDAA0iD,wZAAwZ,6VAA6V,izBAAizB,+mBAA+mB,wDAAwD,UAAU,mBAAmB,UAAU,mYAAmY,2ZAA2Z,iTAAiT,gjEAAgjE,69EAA69E,4dAA4d,2dAA2d,qiFAAqiF,yHAAyH,8FAA8F,mGAAmG,4dAA4d,04DAA04D,gEAAgE,sFAAsF,2FAA2F,gGAAgG,u0IAAu0I,4MAA4M,wIAAwI,0CAA0C,8eAA8e,8PAA8P,miBAAmiB,6WAA6W,uHAAuH,6GAA6G,6VAA6V,kIAAkI,gOAAgO,00EAA00E,qGAAqG,kFAAkF,sGAAsG,qvBAAqvB,uyBAAuyB,2sBAA2sB,6CAA6C,4HAA4H,2pBAA2pB,6CAA6C,4HAA4H,0/DAA0/D,8IAA8I,4HAA4H,mGAAmG,gvBAAgvB,+xBAA+xB,0/DAA0/D,6eAA6e,kGAAkG,kFAAkF,oGAAoG,oFAAoF,2QAA2Q,iiEAAiiE,0eAA0e,qLAAqL,oFAAoF,4QAA4Q,kDAAkD,cAAc,OAAO,cAAc,OAAO,cAAc,OAAO,cAAc,SAAS,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,+oFAA+oF,uIAAuI,4CAA4C,oKAAoK,4vCAA4vC,uYAAuY,q5BAAq5B,2lFAA2lF,6CAA6C,0HAA0H,q2BAAq2B,oVAAoV,80BAA80B,6CAA6C,0HAA0H,y2BAAy2B,oVAAoV,ylBAAylB,aAAa,i6DAAi6D,mOAAmO,4CAA4C,+sBAA+sB,kOAAkO,4CAA4C,w1BAAw1B,kRAAkR,4CAA4C,kDAAkD,OAAO,kDAAkD,OAAO,+1CAA+1C,sTAAsT,wbAAwb,yeAAye,yeAAye;AAC5gyH;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4F",
      "file": "10.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"数组api解析合集\\\"><a href=\\\"#数组api解析合集\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组API解析合集</h2> <p>数组的使用场景非常多，平日中也涉及到很多数组的<code>api</code>/相关操作，一直也没有对这块内容进行一块整理总结，所以这次对这块内容做一个较为系统的总结，方便自己、也方便他人。</p> <h3 id=\\\"创建一个数组\\\"><a href=\\\"#创建一个数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建一个数组:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 字面量方式:</span>\\n<span class=\\\"token comment\\\">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// [3,11,8];</span>\\n<span class=\\\"token comment\\\">// 构造器:</span>\\n<span class=\\\"token comment\\\">// 实际上 new Array === Array,加不加new 一点影响都没有。</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// []</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [,,]</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [ 3,11,8 ]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"es6-array-of-返回由所有参数值组成的数组\\\"><a href=\\\"#es6-array-of-返回由所有参数值组成的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 Array.of()  返回由所有参数值组成的数组</h3> <p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p> <p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3,11,8]</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">of</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"es6-arrary-from-将两类对象转为真正的数组\\\"><a href=\\\"#es6-arrary-from-将两类对象转为真正的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 Arrary.from() 将两类对象转为真正的数组</h3> <p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p> <p>参数：</p> <p>第一个参数(必需):要转化为真正数组的对象。</p> <p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p> <p>第三个参数(可选): 用来绑定this。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 1. 对象拥有length属性</span>\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['a','b','c'];</span>\\n<span class=\\\"token comment\\\">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['h','e','l','l','o']</span>\\n<span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['a','b']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><hr> <h2 id=\\\"方法\\\"><a href=\\\"#方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 方法:</h2> <p>数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p> <h3 id=\\\"改变原数组的方法-9个\\\"><a href=\\\"#改变原数组的方法-9个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 改变原数组的方法(9个):</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token constant\\\">ES5</span><span class=\\\"token punctuation\\\">:</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span>  a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token constant\\\">ES6</span><span class=\\\"token punctuation\\\">:</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> a<span class=\\\"token punctuation\\\">.</span>fill\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p> <h3 id=\\\"splice-添加-删除数组元素\\\"><a href=\\\"#splice-添加-删除数组元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> splice() 添加/删除数组元素</h3> <p>定义： splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p> <p>语法： <code>array.splice(index,howmany,item1,.....,itemX)</code></p> <p>参数:</p> <ol><li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li> <li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li> <li>item1, ..., itemX： 可选。向数组添加的新项目。</li></ol> <p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p> <p>eg1:删除元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [4,5,6,7]</span>\\n<span class=\\\"token comment\\\">// 从数组下标0开始，删除3个元素</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [7]</span>\\n<span class=\\\"token comment\\\">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>eg2: 删除并添加</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['添加',4,5,6,7]</span>\\n<span class=\\\"token comment\\\">// 从数组下标0开始，删除3个元素，并添加元素'添加'</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [6,7]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,'添加1','添加2']</span>\\n<span class=\\\"token comment\\\">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>eg3: 不删除只添加:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['添加1','添加2',1,2,3,4,5,6,7]</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'添加2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [] 没有删除元素，返回空数组</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>从上述三个栗子可以得出:</p> <ol><li>数组如果元素不够，会删除到最后一个元素为止</li> <li>操作的元素，包括开始的那个元素</li> <li>可以添加很多个元素</li> <li>添加是在开始的元素前面添加的</li></ol> <h3 id=\\\"sort-数组排序\\\"><a href=\\\"#sort-数组排序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> sort() 数组排序</h3> <p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p> <p>参数可选: 规定排序顺序的比较函数。</p> <p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 字符串排列 看起来很正常</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;Banana&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Orange&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Apple&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;Mango&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span>\\n<span class=\\\"token comment\\\">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span>\\n<span class=\\\"token keyword\\\">let</span>\\ta <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// [1,10,20,25,3,8];</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>比较函数的两个参数：</strong></p> <p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p> <ul><li>若比较函数返回值&lt;0，那么a将排到b的前面;</li> <li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li> <li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li></ul> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"对于sort()方法更深层级的内部实现以及处理机制可以看一下这篇文章\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/entry/59f7f3346fb9a04514635552\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"深入了解javascript的sort方法\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><strong>sort排序常见用法</strong>：</p> <ol><li>数组元素为数字的升序、降序:</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 </span>\\n<span class=\\\"token comment\\\">// 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   </span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,3,4,4,8,10,20,25];</span>\\n<span class=\\\"token comment\\\">// 降序 被减数和减数调换了  20-10&gt;0 被减数b(20)在减数a(10)的前面</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token operator\\\">-</span>a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [25,20,10,8,4,4,3,1];</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><ol start=\\\"2\\\"><li>数组多条件排序</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">===</span> b<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 如果id的值相等，按照age的值降序</span>\\n        <span class=\\\"token keyword\\\">return</span> b<span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">.</span>age\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果id的值不相等，按照id的值升序</span>\\n        <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>id\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [{&quot;id&quot;:2,&quot;age&quot;:8},{&quot;id&quot;:5,&quot;age&quot;:4},{&quot;id&quot;:6,&quot;age&quot;:10},{&quot;id&quot;:9,&quot;age&quot;:6},{&quot;id&quot;:10,&quot;age&quot;:9},{&quot;id&quot;:10,&quot;age&quot;:2}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><ol start=\\\"3\\\"><li>自定义比较函数，天空才是你的极限</li></ol> <p>类似的：<strong>运用好返回值，我们可以写出任意符合自己需求的比较函数</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 如果name是'Koro1' 返回-1 ，-1&lt;0 a排在b的前面</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果不是的话，a排在b的后面</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;Koro1&quot;},{&quot;name&quot;:&quot;OB&quot;},{&quot;name&quot;:&quot;OB&quot;},{&quot;name&quot;:&quot;OB&quot;}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><h3 id=\\\"pop-删除一个数组中的最后的一个元素\\\"><a href=\\\"#pop-删除一个数组中的最后的一个元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> pop() 删除一个数组中的最后的一个元素</h3> <p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p> <p>参数: 无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 3</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"shift-删除数组的第一个元素\\\"><a href=\\\"#shift-删除数组的第一个元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> shift() 删除数组的第一个元素</h3> <p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p> <p>参数: 无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [2,3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"push-向数组的末尾添加元素\\\"><a href=\\\"#push-向数组的末尾添加元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> push() 向数组的末尾添加元素</h3> <p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p> <p>参数:  item1, item2, ..., itemX ,要添加到数组末尾的元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'末尾'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 4</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,'末尾']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"unshift\\\"><a href=\\\"#unshift\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> unshift()</h3> <p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p> <p>参数:  item1, item2, ..., itemX ,要添加到数组开头的元素</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'开头'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 4</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['开头',1,2,3]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"reverse-颠倒数组中元素的顺序\\\"><a href=\\\"#reverse-颠倒数组中元素的顺序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reverse() 颠倒数组中元素的顺序</h3> <p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p> <p>参数: 无</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span>  a <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [3,2,1]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"es6-copywithin-指定位置的成员复制到其他位置\\\"><a href=\\\"#es6-copywithin-指定位置的成员复制到其他位置\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6: copyWithin() 指定位置的成员复制到其他位置</h3> <p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> start <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> end <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>三个参数都是数值，如果不是，会自动转为数值.</p> <ol><li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li> <li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li> <li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li></ol> <p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// -2相当于3号位，-1相当于4号位</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [4, 2, 3, 4, 5]</span>\\n<span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB4'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro4'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'OB5'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro5'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">// 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换</span>\\na<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copyWithin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [&quot;OB1&quot;,&quot;Koro1&quot;,&quot;Koro2&quot;,&quot;OB3&quot;,&quot;OB3&quot;,&quot;Koro3&quot;,&quot;OB4&quot;,&quot;Koro4&quot;,&quot;OB5&quot;,&quot;Koro5&quot;] </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>从上述栗子:</p> <ol><li>第一个参数是开始被替换的元素位置</li> <li>要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取</li> <li>数组的长度不会改变</li> <li><strong>读了几个元素就从开始被替换的地方替换几个元素</strong></li></ol> <h3 id=\\\"es6-fill-填充数组\\\"><a href=\\\"#es6-fill-填充数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6: fill() 填充数组</h3> <p>定义:  使用给定值，填充一个数组。</p> <p>参数:</p> <p>第一个元素(必须): 要填充数组的值</p> <p>第二个元素(可选): 填充的开始位置,默认值为0</p> <p>第三个元素(可选)：填充的结束位置，默认是为<code>this.length</code></p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN浏览器兼容\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// [7, 7, 7]</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ['a', 7, 'c']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><hr> <h3 id=\\\"不改变原数组的方法-8个\\\"><a href=\\\"#不改变原数组的方法-8个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不改变原数组的方法(8个):</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token constant\\\">ES5</span>：\\nslice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、\\n<span class=\\\"token constant\\\">ES7</span>：\\nincludes\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"slice-浅拷贝数组的元素\\\"><a href=\\\"#slice-浅拷贝数组的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> slice() 浅拷贝数组的元素</h3> <p>定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p> <p><strong>注意</strong>：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>begin<span class=\\\"token punctuation\\\">,</span> end<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p> <p>end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['hello']</span>\\na<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'改变原数组'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['改变原数组','world'] ['hello']</span>\\nb<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'改变拷贝的数组'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ['改变原数组','world'] ['改变拷贝的数组']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p> <p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [{&quot;name&quot;:&quot;OBKoro1&quot;}]  [{&quot;name&quot;:&quot;OBKoro1&quot;}]</span>\\n<span class=\\\"token comment\\\">// a[0].name='改变原数组';</span>\\n<span class=\\\"token comment\\\">// console.log(b,a); // [{&quot;name&quot;:&quot;改变原数组&quot;}] [{&quot;name&quot;:&quot;改变原数组&quot;}]</span>\\n<span class=\\\"token comment\\\">// b[0].name='改变拷贝数组',b[0].koro='改变拷贝数组';</span>\\n<span class=\\\"token comment\\\">//  [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;}] [{&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;}]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p> <h3 id=\\\"join-数组转字符串\\\"><a href=\\\"#join-数组转字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> join()  数组转字符串</h3> <p>定义:  join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'world'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'hello,world'</span>\\n<span class=\\\"token keyword\\\">let</span> str2<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'+'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 'hello+world'</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'23'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str1<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OBKoro1,23,test</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">,</span>age<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'23'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str2 <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [object Object],test</span>\\n<span class=\\\"token comment\\\">// 对象转字符串推荐JSON.stringify(obj);</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>所以，<code>join()/toString()</code>方法在数组元素是数组的时候，会将里面的数组也调用<code>join()/toString()</code>,如果是对象的话，对象会被转为<code>[object Object]</code>字符串。</p> <h3 id=\\\"tolocalestring-数组转字符串\\\"><a href=\\\"#tolocalestring-数组转字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> toLocaleString() 数组转字符串</h3> <p>定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLocaleString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：无。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'abcd'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLocaleString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [object Object],23,abcd,2018/5/28 下午1:52:20 </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>如上述栗子：调用数组的<code>toLocaleString</code>方法，数组中的每个元素都会调用自身的<code>toLocaleString</code>方法，对象调用对象的<code>toLocaleString</code>,Date调用Date的<code>toLocaleString</code>。</p> <h3 id=\\\"tostring-数组转字符串-不推荐\\\"><a href=\\\"#tostring-数组转字符串-不推荐\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> toString() 数组转字符串 不推荐</h3> <p>定义: toString() 方法可把数组转换为由逗号链接起来的字符串。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数: 无。</p> <p>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。</p> <p><strong>值得注意的是</strong>：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token string\\\">'toString'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'演示'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// toString,演示</span>\\n<span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'调用toString'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'连接在我后面'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'啦啦啦'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用toString,连接在我后面啦啦啦</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"cancat\\\"><a href=\\\"#cancat\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> cancat</h3> <p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span>oldArray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>arrayX<span class=\\\"token punctuation\\\">,</span>arrayX<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">,</span>arrayX<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p> <p>eg1:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//连接两个数组</span>\\n<span class=\\\"token keyword\\\">let</span> newVal<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6]</span>\\n<span class=\\\"token comment\\\">// 连接三个数组</span>\\n<span class=\\\"token keyword\\\">let</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> newVal2 <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5,6,7,8,9]</span>\\n<span class=\\\"token comment\\\">// 添加元素</span>\\n<span class=\\\"token keyword\\\">let</span> newVal3 <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'添加元素'</span><span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'再加一个'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// [1,2,3,&quot;添加元素&quot;,4,5,6,7,8,9,&quot;再加一个&quot;]</span>\\n<span class=\\\"token comment\\\">// 合并嵌套数组  会浅拷贝嵌套数组</span>\\n<span class=\\\"token keyword\\\">let</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> f <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> newVal4 <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,[4]]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p><strong>ES6扩展运算符<code>...</code>合并数组</strong>：</p> <p>因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用<code>...</code>来处理，<code>...</code>运算符可以实现<code>cancat</code>的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更多关于扩展符的详细内容移步阮一峰大神的\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ECMAScript 6 入门\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"indexof-查找数组是否存在某个元素，返回下标\\\"><a href=\\\"#indexof-查找数组是否存在某个元素，返回下标\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> indexOf() 查找数组是否存在某个元素，返回下标</h3> <p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>searchElement(必须):被查找的元素</p> <p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p> <p>严格相等的搜索:</p> <p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p> <p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'啦啦'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">24</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'啦'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// -1 </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'NaN'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// -1 </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'啦啦'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 0</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>使用场景：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5aad40e4f265da237f1e12ed#heading-10\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"数组去重\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <li>根据获取的数组下标执行操作，改变数组中的值等。</li> <li>判断是否存在，执行操作。</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"lastindexof-查找指定元素在数组中的最后一个位置\\\"><a href=\\\"#lastindexof-查找指定元素在数组中的最后一个位置\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> lastIndexOf() 查找指定元素在数组中的最后一个位置</h3> <p>定义:  方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p> <p>语法:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lastIndexOf</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>searchElement(必须): 被查找的元素</p> <p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p> <p>关于fromIndex有三个规则:</p> <ol><li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li> <li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li> <li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度为10</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',4); // 从下标4开始往前找 返回下标2</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',100); //  大于或数组的长度 查找整个数组 返回9</span>\\n<span class=\\\"token comment\\\">// let b=a.lastIndexOf('Koro1',-11); // -1 数组不会被查找</span>\\n<span class=\\\"token keyword\\\">let</span> b<span class=\\\"token operator\\\">=</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lastIndexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 从第二个元素4往前查找，没有找到 返回-1</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"es7-includes-查找数组是否包含某个元素-返回布尔\\\"><a href=\\\"#es7-includes-查找数组是否包含某个元素-返回布尔\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES7 includes() 查找数组是否包含某个元素 返回布尔</h3> <p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>searchElement<span class=\\\"token punctuation\\\">,</span>fromIndex<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>searchElement(必须):被查找的元素</p> <p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p> <p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p> <ol><li>indexOf方法不能识别<code>NaN</code></li> <li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'OB'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'Koro1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// let b=a.includes(NaN); // true 识别NaN</span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',100); // false 超过数组长度 不搜索</span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',-3);  // true 从倒数第三个元素开始搜索 </span>\\n<span class=\\\"token comment\\\">// let b=a.includes('Koro1',-100);  // true 负值绝对值超过数组长度，搜索整个数组</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。</p> <hr> <h3 id=\\\"遍历方法-12个\\\"><a href=\\\"#遍历方法-12个\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 遍历方法(12个):</h3> <p>js中遍历数组并不会改变原始数组的方法总共有12个:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token constant\\\">ES5</span>：\\nforEach、every 、some、 filter、map、reduce、reduceRight、\\n<span class=\\\"token constant\\\">ES6</span>：\\nfind、findIndex、keys、values、entries\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"关于遍历：\\\"><a href=\\\"#关于遍历：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于遍历：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"关于遍历的效率，可以看一下这篇\"),_vm._ssrNode(\"<a href=\\\"http://louiszhai.github.io/2015/12/18/traverse/#%E6%B5%8B%E8%AF%95%E5%90%84%E6%96%B9%E6%B3%95%E6%95%88%E7%8E%87\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"详解JS遍历\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <li>尽量不要在遍历的时候，修改后面要遍历的值</li> <li>尽量不要在遍历的时候修改数组的长度（删除/添加）</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"foreach\\\"><a href=\\\"#foreach\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> forEach</h3> <p>定义: 按升序为数组中含有效值的每一项执行一次回调函数。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 回调函数的参数</span>\\n<span class=\\\"token number\\\">1.</span> <span class=\\\"token function\\\">currentValue</span><span class=\\\"token punctuation\\\">(</span>必须<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>数组当前元素的值\\n<span class=\\\"token number\\\">2.</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span>可选<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> 当前元素的索引值\\n<span class=\\\"token number\\\">3.</span> <span class=\\\"token function\\\">arr</span><span class=\\\"token punctuation\\\">(</span>可选<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>数组对象本身\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p><strong>关于forEach()你要知道</strong>：</p> <ul><li>无法中途退出循环，只能用<code>return</code>退出本次回调，进行下一次回调。</li> <li>它总是返回 undefined值,即使你return了一个值。</li></ul> <h3 id=\\\"下面类似语法同样适用这些规则\\\"><a href=\\\"#下面类似语法同样适用这些规则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 下面类似语法同样适用这些规则</h3> <ol><li>对于空数组是不会执行回调函数的</li> <li>对于已在迭代过程中删除的元素，或者空元素会跳过回调函数</li> <li>遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。</li> <li>如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最后第二个元素是空的，不会遍历(undefined、null会遍历)</span>\\n<span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    a<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'改变元素'</span><span class=\\\"token punctuation\\\">;</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'添加到尾端，不会被遍历'</span><span class=\\\"token punctuation\\\">)</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'forEach传递的第一个参数'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 分别打印 1 ,2 ,改变元素</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// OBKoro1 打印三次 this绑定在obj对象上</span>\\n    <span class=\\\"token comment\\\">// break; // break会报错</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// return只能结束本次回调 会执行下次回调</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'不会执行，因为return 会执行下一次循环回调'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 即使return了一个值,也还是返回undefined</span>\\n<span class=\\\"token comment\\\">// 回调函数也接受接头函数写法</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"every-检测数组所有元素是否都符合判断条件\\\"><a href=\\\"#every-检测数组所有元素是否都符合判断条件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> every 检测数组所有元素是否都符合判断条件</h3> <p>定义: 方法用于检测数组所有元素是否都符合函数定义的条件</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><strong>参数:(这几个方法的参数，语法都类似)</strong></p> <p>function(必须): 数组中<strong>每个元素需要调用的函数</strong>。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>方法返回值规则:</p> <ol><li>如果数组中检测到<strong>有一个元素不满足，则整个表达式返回 false</strong>，且剩余的元素不会再进行检测。</li> <li>如果所有元素<strong>都满足条件，则返回 true</strong>。=</li></ol> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isBigEnough</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token keyword\\\">return</span> element <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 判断数组中的所有元素是否都大于10</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// 接受箭头函数写法 </span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=&gt;</span> x <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">54</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">130</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">44</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=&gt;</span> x <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"some-数组中的是否有满足判断条件的元素\\\"><a href=\\\"#some-数组中的是否有满足判断条件的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> some 数组中的是否有满足判断条件的元素</h3> <p>定义：数组中的是否有满足判断条件的元素</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p><strong>方法返回值规则</strong>：</p> <ol><li>如果<strong>有一个元素满足条件，则表达式返回true</strong>, 剩余的元素不会再执行检测。</li> <li>如果<strong>没有满足条件的元素，则返回false</strong>。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isBigEnough</span><span class=\\\"token punctuation\\\">(</span>element<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>element <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//数组中是否有一个元素大于 10</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">some</span><span class=\\\"token punctuation\\\">(</span>isBigEnough<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"filter-过滤原始数组，返回新数组\\\"><a href=\\\"#filter-过滤原始数组，返回新数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> filter 过滤原始数组，返回新数组</h3> <p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> new_array <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">32</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回a数组中所有大于18的元素</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// [32,33,40] [32,33,16,40]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"map-对数组中的每个元素进行处理，返回新的数组\\\"><a href=\\\"#map-对数组中的每个元素进行处理，返回新的数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> map 对数组中的每个元素进行处理，返回新的数组</h3> <p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> new_array <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'新数组的新元素'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// [&quot;1新数组的新元素&quot;,&quot;2新数组的新元素&quot;,&quot;3新数组的新元素&quot;,&quot;4新数组的新元素&quot;] [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"reduce-为数组提供累加器，合并为一个值\\\"><a href=\\\"#reduce-为数组提供累加器，合并为一个值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reduce 为数组提供累加器，合并为一个值</h3> <p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">,</span> currentValue<span class=\\\"token punctuation\\\">,</span> currentIndex<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> initialValue<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>参数：</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>total(必须)，初始值, 或者上一次调用回调返回的值</li> <li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>initialValue(可选): 指定第一次回调 的第一个参数。</p> <p><strong>回调第一次执行时</strong>:</p> <ul><li>如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；</li> <li>如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li> <li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</li></ul> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 数组求和 </span>\\n<span class=\\\"token keyword\\\">let</span> sum <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 6</span>\\n<span class=\\\"token comment\\\">// 将二维数组转化为一维 将数组元素展开</span>\\n<span class=\\\"token keyword\\\">let</span> flattened <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// [0, 1, 2, 3, 4, 5]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h3 id=\\\"reduceright-从右至左累加\\\"><a href=\\\"#reduceright-从右至左累加\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> reduceRight  从右至左累加</h3> <p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p> <h3 id=\\\"es6：find-findindex-根据条件找到数组成员\\\"><a href=\\\"#es6：find-findindex-根据条件找到数组成员\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6：find()&amp; findIndex() 根据条件找到数组成员</h3> <p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。</p> <p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p> <p>这两个方法</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">let</span> index <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>currentValue<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>参数:(这几个方法的参数，语法都类似)</p> <p>function(必须): 数组中每个元素需要调用的函数。</p> <ol><li>currentValue(必须),数组当前元素的值</li> <li>index(可选), 当前元素的索引值</li> <li>arr(可选),数组对象本身</li></ol> <p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p> <p>这两个方法都可以识别<code>NaN</code>,弥补了<code>indexOf</code>的不足.</p> <p>eg:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// find</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回元素-5</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 返回元素NaN</span>\\n<span class=\\\"token comment\\\">// findIndex</span>\\n<span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回索引2</span>\\n<span class=\\\"token keyword\\\">let</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findIndex</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">is</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 返回索引4</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,</p> <h3 id=\\\"es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\\\"><a href=\\\"#es6-keys-values-entries-遍历键名、遍历键值、遍历键名-键值\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h3> <p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</p> <p>语法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>参数：无。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"遍历栗子(摘自\"),_vm._ssrNode(\"<a href=\\\"http://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-entries%EF%BC%8Ckeys-%E5%92%8C-values\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"ECMAScript 6 入门\"),_c('OutboundLink')],2),_vm._ssrNode(\")：\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 0</span>\\n<span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> elem <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>elem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 'a'</span>\\n<span class=\\\"token comment\\\">// 'b'</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> elem<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">of</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> elem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 0 &quot;a&quot;</span>\\n<span class=\\\"token comment\\\">// 1 &quot;b&quot;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><p>在<code>for..of</code>中如果遍历中途要退出，可以使用<code>break</code>退出循环。</p> <p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的next方法，进行遍历:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> letter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> entries <span class=\\\"token operator\\\">=</span> letter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entries</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [0, 'a']</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 'b']</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [2, 'c']</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>entries()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 7.1</p> <p>keys()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 8,</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./数组API解析合集.md?vue&type=template&id=50bf80b1&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"a546b29c\"\n  \n)\n\ncomponent.options.__file = \"数组API解析合集.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "11.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/数组完全乱序.md?c9bd",
        "webpack:///./docs/accumulate/JS/数组完全乱序.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,qfAAqf,mVAAmV,y1DAAy1D,yMAAyM,2CAA2C,0NAA0N,sMAAsM,2CAA2C,kkBAAkkB,+oBAA+oB,4WAA4W,0OAA0O,gDAAgD,qFAAqF,6FAA6F,kGAAkG,8CAA8C,0CAA0C,0LAA0L,gGAAgG,4CAA4C,0CAA0C,sbAAsb,qnCAAqnC,2CAA2C,8ZAA8Z,+KAA+K,ugBAAugB,gpBAAgpB,0GAA0G,gGAAgG,4CAA4C,0CAA0C,4lCAA4lC,wRAAwR,+KAA+K,ugBAAugB,+rBAA+rB,kGAAkG,+FAA+F,4CAA4C;AACnkZ;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "11.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"数组完全乱序\\\"><a href=\\\"#数组完全乱序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组完全乱序</h1> <p>一提到数组乱序，大家可能就会想到<code>sort</code>方法，也就是下面这种实现方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token number\\\">0.5</span> <span class=\\\"token operator\\\">-</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>但是<code>sort</code>并不是真正意义上的乱序，一些元素间并没有机会相互比较(也就没有了随机交换的可能性)，<strong>所有数组元素在大概率上还停留在自己初始位置</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这里不再展开了，省的懵逼，如果对此有兴趣的话，看这篇\"),_vm._ssrNode(\"<a href=\\\"https://github.com/HOUCe/shuffle-array\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"来解惑。\")],2),_vm._ssrNode(\" <h2 id=\\\"真正意义上的乱序数组：\\\"><a href=\\\"#真正意义上的乱序数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 真正意义上的乱序数组：</h2> <h3 id=\\\"递归：\\\"><a href=\\\"#递归：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 递归：</h3> <p><strong>原理</strong>：</p> <ul><li>取数组长度的随机数，获取这个数组元素</li> <li>删除原数组的元素，将值添加到新数组中</li> <li>递归将数组再传入函数(重复上述两步)，直到旧数组的元素清空为止</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> oldArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomFn</span> <span class=\\\"token operator\\\">=</span> actionArr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomArr</span> <span class=\\\"token operator\\\">=</span> arr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> ranDomNum <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 随机数</span>\\n    newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>ranDomNum<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除原数组元素 将删除的值添加到新数组</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">randomArr</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组清空 退出递归</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">randomArr</span><span class=\\\"token punctuation\\\">(</span>actionArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">randomFn</span><span class=\\\"token punctuation\\\">(</span>oldArr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'新数组'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><h3 id=\\\"循环-进阶-：\\\"><a href=\\\"#循环-进阶-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 循环(进阶)：</h3> <p>原理都一样，将递归换成了循环，这种方式无疑是更优雅的(虽然上面才是我写的...)。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">randomFn</span> <span class=\\\"token operator\\\">=</span> actionArr <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    n <span class=\\\"token operator\\\">=</span> actionArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span>\\n    i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    i <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> n<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取随机数(0~数组的长度-1)</span>\\n    newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除原数组元素 将删除的值添加到新数组</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"不开新数组（最终）：\\\"><a href=\\\"#不开新数组（最终）：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 不开新数组（最终）：</h3> <p>上述方法创建了一个新数组，开辟了新的内存空间。</p> <p><strong>原理</strong>：</p> <ul><li>因为每次循环，数组的长度都要减去1，数组长度的最大值是一个一个减少的</li> <li><strong>把当前找到的随机元素，保存在每次循环的最大值的位置</strong></li> <li><strong>再把最后一个被替换的元素，放到随机元素原来的位置</strong></li> <li>就是把这两个元素交换变量</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">shuffle</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> m <span class=\\\"token operator\\\">=</span> array<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">,</span>\\n    t<span class=\\\"token punctuation\\\">,</span>\\n    i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>m<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    i <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> m<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">[</span>array<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>array<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> array<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 交换变量 ES6的写法</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./数组完全乱序.md?vue&type=template&id=62fdd8ea&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"7bce5099\"\n  \n)\n\ncomponent.options.__file = \"数组完全乱序.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "12.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/时间差与时区转换.md?c8ff",
        "webpack:///./docs/accumulate/JS/时间差与时区转换.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,0IAA0I,kbAAkb,6TAA6T,0bAA0b,2/BAA2/B,64BAA64B,ohBAAohB,4lBAA4lB,ibAAib,imBAAimB,8dAA8d,8bAA8b,0WAA0W,2EAA2E,qJAAqJ,yEAAyE,sJAAsJ,2EAA2E,sJAAsJ,2EAA2E,wIAAwI,02CAA02C,6nBAA6nB,oTAAoT,8SAA8S,yiBAAyiB,o7BAAo7B,mOAAmO,wEAAwE,sGAAsG,qWAAqW,8SAA8S,yiBAAyiB,krBAAkrB,oTAAoT,sfAAsf,+WAA+W,yiBAAyiB,4qBAA4qB,oTAAoT,8SAA8S,yiBAAyiB,+rBAA+rB,oTAAoT,8SAA8S,4iBAA4iB;AACjqmB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "12.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"计算两个时间的时间差-时区转换\\\"><a href=\\\"#计算两个时间的时间差-时区转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 计算两个时间的时间差&amp;时区转换</h2> <h3 id=\\\"计算两个时间的时间差：\\\"><a href=\\\"#计算两个时间的时间差：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 计算两个时间的时间差：</h3> <ol><li><p>获取两个时间数据，通常这两个时间是：后端给的时间数据和当前时间</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'2018/08/28 04:56:38'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始时间</span>\\ndateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>dateBegin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Mon Aug 28 2017 04:56:38 GMT+0800 (中国标准时间)</span>\\n<span class=\\\"token comment\\\">// 上面是Date对象的数据形式</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第二个数据通常是当前时间</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li> <li><p>使用<code>getTime()</code>返回与固定的 1970 年 1 月 1 日的时间差，再用大的时间减去短的时间即可得出双方相差的毫秒数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dateDiff <span class=\\\"token operator\\\">=</span> dateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> dateBegin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div></li> <li><p>换算成你想要的时间单位，得出两个时间的时间差。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 计算出相差天数</span>\\n<span class=\\\"token keyword\\\">let</span> dayDiff <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>dateDiff <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 计算天数后剩余的毫秒数 利用这个时间去计算小时</span>\\n<span class=\\\"token keyword\\\">let</span> leave1 <span class=\\\"token operator\\\">=</span> dateDiff <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">24</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算出小时数</span>\\n<span class=\\\"token keyword\\\">let</span> hours <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>leave1 <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算相差分钟数</span>\\n<span class=\\\"token keyword\\\">let</span> leave2 <span class=\\\"token operator\\\">=</span> leave1 <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算小时数后剩余的毫秒数</span>\\n<span class=\\\"token keyword\\\">let</span> minutes <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>leave2 <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">60</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算相差分钟数</span>\\n<span class=\\\"token comment\\\">// 计算相差秒数</span>\\n<span class=\\\"token keyword\\\">let</span> leave3 <span class=\\\"token operator\\\">=</span> leave2 <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">60</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 计算分钟数后剩余的毫秒数</span>\\n<span class=\\\"token keyword\\\">let</span> seconds <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">round</span><span class=\\\"token punctuation\\\">(</span>leave3 <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 结果</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`相差</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>dayDiff<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">天</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>hours<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">小时</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>minutes<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">分钟</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>seconds<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">秒`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div></li></ol> <p>如果你只想计算相差的小时数，不想管天数：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> dayDiff <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>dateDiff <span class=\\\"token operator\\\">/</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3600</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 其他的同理，倍数正确即可</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"时区转换\\\"><a href=\\\"#时区转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 时区转换</h3> <p><strong>需求</strong>：</p> <p>拿到这么一串字符串：<code>2018-09-17</code>，要与当前的日期比较，求出日期差。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p><strong>东八区的时间</strong>：</p> <p>上面<code>new Date(time)</code>之后拿到的是零时区 0 点的时间，在东八区也就是北京时间<code>08:00:00</code>。</p> <p>而我们第二个时间设置的是北京时间<code>00:00:00</code>，这里面就出现了八个小时的误差。</p> <p><strong>转换时区的三种方法</strong>：</p> <ol><li><p>设置世界时为当前时区的时间：</p> <p>设置具体的时间，传进<code>new Date()</code>的时候会自动转成北京时间<code>00:00:00</code>，然后两个时间就可以同步了。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\ntime <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>time<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> 00:00:00`</span></span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 后面加上具体时间</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>也可以使用<code>setHours</code>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndateBegin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// new Date()之后 设为0点 两个时间同步</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div></li> <li><p>当前时区与世界时同步：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置为八点与世界时一致</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li> <li><p>你可能不知道当前时区与世界时相差多少</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`2018-09-17`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateBegin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> dateEnd <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这一秒的时间 需重新设置</span>\\ndateEnd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setUTCHours</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置为世界时的0点 也就是北京时间八点</span>\\n<span class=\\\"token comment\\\">// 计算时间差 参照上文</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li></ol> <p>以上：2018.09.21</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./时间差与时区转换.md?vue&type=template&id=7ae13ad3&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1e9bd92f\"\n  \n)\n\ncomponent.options.__file = \"时间差与时区转换.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "13.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/随机数组成的数组.md?9551",
        "webpack:///./docs/accumulate/JS/随机数组成的数组.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,4jBAA4jB,OAAO,0BAA0B,OAAO,+VAA+V,2CAA2C,0TAA0T,kDAAkD,2KAA2K,8dAA8d,4CAA4C,0CAA0C,udAAud;AAChpF;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "13.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"随机数数组\\\"><a href=\\\"#随机数数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 随机数数组</h1> <p>所谓的随机数数组就是：由随机数组成的数组（数组的长度和随机数的范围可自定义）</p> <p>当然有很多方法，只是用下面这个API只用一行代码就可以实现这个功能，见猎心喜，然后放了上来。</p> <h2 id=\\\"原理\\\"><a href=\\\"#原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理</h2> <ol><li>先创建一个类似数组的对象(即对象拥有<code>length</code>属性)</li> <li>利用<code>Array.from</code>的第二个参数，对每个元素进行处理(生成随机数)。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * 由随机数组成的数组：长度和随机数范围可自定义\\n * @param {number} length 数组的长度\\n * @param {number} limit 随机数的范围\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">genNumArr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token punctuation\\\">,</span> limit<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Array.from第二个参数 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组</span>\\n  <span class=\\\"token keyword\\\">return</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> length <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">random</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> limit<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">genNumArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度为1000，每个元素的范围在0-99之间</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/MBOQMX\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"CodePen\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./随机数组成的数组.md?vue&type=template&id=56befa3b&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"44915900\"\n  \n)\n\ncomponent.options.__file = \"随机数组成的数组.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "14.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/JS/高性能js.md?a167",
        "webpack:///./docs/accumulate/JS/高性能js.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,o+BAAo+B,UAAU,mBAAmB,QAAQ,0HAA0H,UAAU,yBAAyB,QAAQ,8FAA8F,UAAU,iEAAiE,UAAU,8SAA8S,WAAW,uOAAuO,UAAU,qfAAqf,UAAU,mmFAAmmF,2CAA2C,+FAA+F,6HAA6H,4CAA4C,+SAA+S,6HAA6H,4CAA4C,4KAA4K,ykBAAykB,mBAAmB,ixBAAixB,4VAA4V,8hKAA8hK,8VAA8V,yxBAAyxB,6VAA6V;AAC/tc;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0F",
      "file": "14.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"读书笔记《高性能-javascript》\\\"><a href=\\\"#读书笔记《高性能-javascript》\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> [读书笔记《高性能 JavaScript》</h2> <h3 id=\\\"缺陷\\\"><a href=\\\"#缺陷\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缺陷</h3> <p>这本书是 2010 年出版的，这本书谈性能是有时效性的，现在已经是 2018 年了，这几年前端发展的速度是飞快的，书里面还有一些内容考虑 IE6、7、8 的东西，殊不知现在这些都已经不再考虑了，所以不可避免的有一些知识是比较老的。有些解决方法现在已经不是最好的解决方式，比如工具那一章。</p> <h3 id=\\\"前言\\\"><a href=\\\"#前言\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前言</h3> <p><strong>总的来说，这本书整体给出的性能优化建议，以及作者耐心的实践，对我们开发优化的启发和帮助还是很大的</strong>，因为它里边的很多知识，都是作者通过实践总结出来的，都是经验的积累，这在一般的教科书上是学不到的。特别是对于 js 基础比较差一点的，里面有很多知识点尽管在现在还是非常有必要的。</p> <p><strong>下面我就将各章节的一些重要的知识点总结写出来，争取将干货都提取出来</strong>。</p> <hr> <h3 id=\\\"第一章-加载和执行\\\"><a href=\\\"#第一章-加载和执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第一章-加载和执行</h3> <ol><li>js 的阻塞特性：</li></ol> <p>当浏览器在执行 js 代码的时候，不能同时做其他事情。（界面 ui 线程和 js 线程用的是同一进程，所以 js 执行越久，网页的响应时间越长。）</p> <ol start=\\\"2\\\"><li>脚本的位置</li></ol> <p><strong>如果把脚本<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>中，页面会等 js 文件全部下载并执行完成后才开始渲染</strong>，在这些文件下载和执行的过程中：会导致访问网站的时候有明显的延迟，表现为：页面空白。</p> <p>性能提升：<strong>推荐将所有的<code>&lt;script&gt;</code>标签尽可能的放到<code>&lt;body&gt;</code>标签的底部</strong>，优先渲染页面，减少页面空白时间。</p> <ol start=\\\"3\\\"><li>组件脚本。</li></ol> <p>每个<code>&lt;script&gt;</code>标签初始下载的时候都会阻塞页面的渲染。性能提升做法：\\n<strong>减少内嵌脚本：减少内嵌的<code>&lt;script&gt;</code>标签</strong>，将代码写在一个标签中。</p> <p><strong>合并外链的 js 文件</strong>：http 请求会带来额外的性能开销，栗子：下载一个 100KB 的 js 文件比下载 4 个 25kb 的 js 文件更快。具体操作方法自行搜索。</p> <ol start=\\\"4\\\"><li>无阻塞脚本的方法</li></ol> <p><strong>script 标签的 aync 属性</strong>：</p> <p>async 属性规定一旦脚本可用，则会异步执行。async 属性仅适用于外部脚本（只有在使用 src 属性时）。如果 async=&quot;async&quot;：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</p> <p><strong>script 标签的 defer 属性</strong>：</p> <p>js 文件在页面解析到 script 标签的时候开始下载，但并不会执行，dom 加载完成执行。<strong>这两个属性的区别在于执行时机</strong>。</p> <p><strong>动态脚本元素</strong>。</p> <p>js 操作 dom 创建<code>&lt;script&gt;</code>标签，自定义生成标签的 type、src 属性。文件会在该元素被添加到页面的时候开始下载。ps：如果文件顺序很重要的话，最好按照顺序合成一个文件。然后再添加到页面中。这样：无论何时启动下载。文件的下载和执行过程不会阻塞页面的其他进程。</p> <h5 id=\\\"_3-xhr-ajax-脚本注入、\\\"><a href=\\\"#_3-xhr-ajax-脚本注入、\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3. XHR ajax 脚本注入、</h5> <p>用 get 请求一个文件，请求好了。然后创建动态脚本，最后添加进去。\\n缺陷：文件要再请求页面的同一个域。不能从 cdn 下载</p> <h3 id=\\\"第一章加载和执行小结：\\\"><a href=\\\"#第一章加载和执行小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第一章加载和执行小结：</h3> <ol><li>把文件放在 body 标签签名，</li> <li>合并脚本，减少<code>&lt;script&gt;</code>标签。</li> <li>采用无阻塞下载 js。使用 script 的 defer 和 async 属性 异步下载。动态创建 script 标签和执行代码。</li></ol> <h3 id=\\\"第二章-数据存取\\\"><a href=\\\"#第二章-数据存取\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第二章-数据存取</h3> <ol><li><strong>js 四种基本的数据存取位置</strong>。\\n1、字面量：字符串、数字、布尔、对象、数组、函数、正则、null、undefined，字面量只代表自身，没有存储位置。 2、局部变量。 let var 声明的变量。3、数组元素。4、对象成员。</li></ol> <p>性能：<strong>访问字面量和局部变量的速度是最快的，访问数组和对象成员相对较慢</strong></p> <ol start=\\\"2\\\"><li><strong>变量标识符解析过程</strong>：</li></ol> <p>搜索执行环境的作用域链，查找同名标识符。搜索过程从作用域链头部开始，也就是当前运行函数的活动对象。如果找到，就使用这个标识符，对应的变量；如果没有找到，继续搜索下面的对象。搜索过程会持续进行，直到找到标识符，若无法搜索到匹配的对象，那么标识符被视为未定义、</p> <p><strong>性能问题：一个标识符所在的位置越深，它的读写速度也就越慢</strong>。因此，函数中读写局部变量总是最快的，而读写全局变量通常是最慢的。</p> <p><strong>建议：将全局变量存储到局部变量，加快读写速度。</strong></p> <ol start=\\\"2\\\"><li>闭包，原型，嵌套对象。</li></ol> <p><strong>优化建议：将常用的跨作用域变量存储到局部变量，然后直接访问局部变量</strong>。理由如上，变量标识符解析过程。</p> <h3 id=\\\"第二章数据存取小结：\\\"><a href=\\\"#第二章数据存取小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第二章数据存取小结：</h3> <ol><li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li> <li>由于局部变量存在于作用域链的起始位置，因为<strong>访问局部变量比访问跨作用域变量更快。这个道理同样适用于数组，对象，跨作用域变量</strong>。</li> <li>把常用的对象，数组，跨域变量保存在局部变量可以改善 js 性能，局部变量访问速度更快。</li></ol> <h3 id=\\\"第三章-dom-编程小结：\\\"><a href=\\\"#第三章-dom-编程小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第三章 DOM 编程小结：</h3> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li><strong>dom 操作天生就慢，尽量减少 dom 操作</strong>，减少访问 dom 的次数。</li> <li>使用 document.querySelect 来做选择器，比其他方式快。</li> <li>需要多次访问某个 dom 节点，使用局部变量存储。</li> <li>html 集合，把集合长度缓存到一个变量中，然后遍历使用这个变量，如果经常操作集合，建议拷到一个数组中。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"要留意浏览器的重绘和重排；批量修改样式的时候，‘离线’操作 DOM 树，使用缓存，并减少访问布局信息的次数。\\n重绘和重排是 DOM 编程优化的一个相当重要概念：\"),_vm._ssrNode(\"<a href=\\\"http://web.jobbole.com/83164/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"重绘和重排\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <li>动画中使用绝对定义，使用拖放处理。</li> <li>使用事件委托来减少事件处理器的数量。</li>\")],2),_vm._ssrNode(\" <h3 id=\\\"第四章算法和流程控制小结：\\\"><a href=\\\"#第四章算法和流程控制小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第四章算法和流程控制小结：</h3> <ol><li><p>for、while 和 do-while 循环性能差不多，<strong>for-in 循环速度只有前面几种类型的 1/7</strong>，所以尽量避免使用 for-in 循环，除非你需要遍历一个属性数量未知的对象。</p> <p>forEach 比 for 慢，如果运行速度要求严格，不建议使用。</p></li> <li><p>改善循环性能的最佳方式是<strong>减少每次迭代的工作量和减少循环迭代的次数</strong>。</p></li></ol> <p>减少迭代工作量：减少属性查找和倒序循环，循环次数越多，性能优化越明显。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">&lt;</span>items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>代码<span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">//正序循环</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i<span class=\\\"token operator\\\">=</span>items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>代码<span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">//倒序循环</span>\\n<span class=\\\"token comment\\\">//减少属性查找：查找一次属性，把值存在局部变量，在控制条件里面使用这个变量</span>\\n\\n倒序循环在i<span class=\\\"token operator\\\">&gt;</span><span class=\\\"token number\\\">0</span>的时候会自动转换为<span class=\\\"token boolean\\\">true</span>，等于<span class=\\\"token number\\\">0</span>的时候为<span class=\\\"token boolean\\\">false</span>。\\n<span class=\\\"token comment\\\">//倒序循环：控制条件从（迭代数少于总数吗？它是否为true？）变为（它是否为true）</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>减少迭代的次数：&quot;Duff's Device&quot;循环体展开技术，有兴趣的可以看一下，迭代工作量大于 1000 的时候适用。</p> <ol start=\\\"3\\\"><li><p>if-else 与 switch：条件数量越大，越倾向于使用 switch。</p> <p>优化 if-else：</p> <ul><li>把最可能出现的条件放在首位.</li> <li>使用二分法把值域分成一系列的区间。</li></ul></li> <li><p>浏览器的调用栈大小限制了递归算法在 js 中的应用；栈溢出错误会导致其他代码中断运行。</p> <pre><code>小心使用递归，现在es6递归可以尾递归，在es6中只要使用尾递归就不会发生栈溢出，相对节省性能。\\n</code></pre></li></ol> <h3 id=\\\"第五章字符串和正则表达式小结：\\\"><a href=\\\"#第五章字符串和正则表达式小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第五章字符串和正则表达式小结：</h3> <ol><li>字符串合并的时候使用简单的'+'和'+='操作符。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">+=</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span>'efg<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>str<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//推荐，提速10%~40%</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<ol start=\\\"2\\\">\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"书里面讲的<strong>正则原理和回溯原理，这个很重要</strong>，找个篇\"),_vm._ssrNode(\"<a href=\\\"http://blog.csdn.net/c_kite/article/details/77875328\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"：跟书里面讲的差不多，但还是建议大家可以去找找 PDF 好好看看正则表达式这节。\")],2)]),_vm._ssrNode(\" <li><p>提高正则表达式效率的方法：</p> <ul><li>最重要的是：具体化正则表达式！具体化正则表达式！具体化正则表达式！</li> <li>关注如何让匹配更快失败，找出一些必需，特殊的字符</li> <li>正则表达式以简单的、必需的字元开始。</li> <li>使用量词模式，使它们后面的字元互斥。</li> <li>较少分支数量，缩小分支范围</li> <li>使用合适的量词</li> <li>把正则表达式赋值给变量并重用</li> <li>将复杂的正则拆分为简单的片段\\n//事实上，书里面讲的方法不止这么几个，而且每一个都有详细的解析 大佬们 还是去看看这一章节吧</li></ul></li> <li><p>正则表达式并不总是最好的解决方案，当你只是搜索字面字符串或者你事先知道字符串的哪一部分将要被查找时：</p> <ul><li>使用 indexOf()和 lastIndexOf()更适合查找特定字符串的位置或者判断它们是否存在\\n//例如：判断当前浏览器之类。</li></ul></li>\")],2),_vm._ssrNode(\" <h3 id=\\\"第六章快速响应的用户界面小结：\\\"><a href=\\\"#第六章快速响应的用户界面小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第六章快速响应的用户界面小结：</h3> <p>js 和用户界面更新在同一个进程中运行，因此一次只能处理一件事情。高效的管理 UI 线程就是要确保 js 不能运行太长时间，以免影响用户体验。</p> <ol><li><p>浏览器限制了 js 任务的运行时间，这种限制很有必要，它确保某些恶意代码不能通过永不停止的密集操作锁住用户的浏览器。此限制分为两种：调用栈的大小和长时间运行脚本。</p></li> <li><p>任何 js 任务都不应当执行超过 100 毫秒。过长的运行时间会导致 UI 更新出现明显延迟，从而对用户体验造成负面影响。</p></li> <li><p>定时器可用来安排代码延迟执行，它使得你可以把长时间运行脚本分解成一系列的小任务。</p></li></ol> <h3 id=\\\"第七章-ajax-小结\\\"><a href=\\\"#第七章-ajax-小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第七章 AJAX 小结</h3> <p>这一章节貌似东西都比较老一点。。</p> <ol><li><p>post 更适合发送大量数据到服务器。</p></li> <li><p>get 请求能够被浏览器缓存，Expires 头信息设置浏览器缓存请求多久。可用于从不改变的图片或者其他静态数据集（js、css 等）</p></li> <li><p>JSON 是一种使用 js 对象和数组直接量编写的轻量级且易于解析的数据格式，它不仅传输尺寸小，而且解析速度快。JSON 是高性能 AJAX 的基础，尤其在使用动态脚本注入时。</p></li></ol> <p>json 应该是近几年一直在用的。。。</p> <ol start=\\\"4\\\"><li>减少请求数，通过合并 js 和 css 文件。</li> <li>缩短页面的加载时间，页面主要内容加载完成后，用 AJAX 获取那些次要的文件。</li></ol> <h3 id=\\\"第八章编程实践小结\\\"><a href=\\\"#第八章编程实践小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第八章编程实践小结</h3> <ol><li>避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span>构造函数<span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">和setInterval</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><ol start=\\\"2\\\"><li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。</li> <li>避免做重复工作，能节省的步骤就节省。</li> <li>js 原生方法总会比你写的任何代码都要快。</li></ol> <h3 id=\\\"第九章-构建并部署高性能-js-应用小结\\\"><a href=\\\"#第九章-构建并部署高性能-js-应用小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第九章 构建并部署高性能 js 应用小结</h3> <p>构建和部署的过程对基于 js 的 web 应用的性能有着巨大影响。这个过程中最重要的步骤有：</p> <ol><li>合并、压缩 js 文件。<strong>可使用 Gzip 压缩，能够减少约 70%的体积</strong>！</li></ol> <p>这些都是在构建过程中完成的工作，不要等到运行时去做，webpack 也是在构建过程中，完成的工作。</p> <ol start=\\\"2\\\"><li>通过正确设置 HTTP 响应头来缓存 js 文件，通过向文件名增加时间戳来避免缓存问题。</li> <li>使用 CDN 提供 js 文件；CDN 不仅可以提升性能，它也为你管理文件的压缩与缓存，。</li></ol> <h3 id=\\\"第十章-工具-小结：\\\"><a href=\\\"#第十章-工具-小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 第十章 工具 小结：</h3> <p>当网页变慢时，分析从网络下载的资源以及分析的资源以及分析脚本的运行性能能让你专注于那些最需要优化的地方。</p> <ol><li><p>使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定那些脚本需要延迟加载，或者需要进一步分析。</p> <ul><li>检查图片、样式表和脚本的加载过程，以及它们对页面整体加载和渲染的影响。</li> <li>针对性的做出优化</li></ul></li> <li><p>把脚本尽可能延迟加载，这样做可以加快页面渲染速度，给用户带来更好的体验。</p></li> <li><p>确认脚本和其他资源文件的加载过程已经被优化</p> <ul><li>这里主要是说文件从服务器的下载速度，比如服务器那边的配置问题之类的。</li> <li>栗子：我就被后端坑过。一个js文件就200k ，下载下来需要50秒钟！</li> <li>后面发现原来是后端那边nginx没有开启加速配置什么的，导致出现的问题，找问题找半天。</li></ul></li> <li><p>测试脚本的运行时间,用一个 Date 实例减去另一个 Date 实例，得到的时间差就是脚本运行消耗的时间。</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> start <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//你的代码</span>\\n<span class=\\\"token keyword\\\">let</span> time <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">newDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ol start=\\\"5\\\"><li><strong>chrome ,火狐 等主流浏览器的控制面板，已经能够反映很多性能问题</strong>。仔细分析就能找出很多问题。例如：资源加载，断点等</li></ol> <h2 id=\\\"后话\\\"><a href=\\\"#后话\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 后话</h2> <p>事实上，<strong>自认为这本书最宝贵的就是一些提到的细节</strong>，比如：</p> <p>1、字符串合并的时候使用简单的'+'和'+='操作符。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">+=</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//2个以上的字符串拼接，会产生临时字符串</span>\\n<span class=\\\"token keyword\\\">let</span> str<span class=\\\"token operator\\\">=</span>str<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'efg'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//推荐，提速10%~40%</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>2、避免双重求值：避免使用 eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给 setTimeout()和 setInterval()传递函数而不是字符串作为参数。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式</span>\\n<span class=\\\"token function\\\">eval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">function</span>构造函数<span class=\\\"token operator\\\">--</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'代码'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">和setInterval</span><span class=\\\"token punctuation\\\">(</span>‘代码’<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\\\"><a href=\\\"#这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。</h3> <p>书不太厚，如果对里面的内容感兴趣，还是建议买一本回家看一看。</p> <p>以上 2018.1.9</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./高性能js.md?vue&type=template&id=084ebfe7&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"a9551d68\"\n  \n)\n\ncomponent.options.__file = \"高性能js.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "15.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/README.md?0706",
        "webpack:///./docs/accumulate/README.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,oYAAoY,OAAO,oBAAoB;AAC/hB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6F",
      "file": "15.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端积累\\\"><a href=\\\"#前端积累\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端积累</h2> <p>当前模块是我平时的一些积累，用以记录一些上手即用的东西/知识点等内容，范围较广。</p> <p>还有很多内容未放上来，持续更新中...</p> <h2 id=\\\"前端算法\\\"><a href=\\\"#前端算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端算法</h2> <p>想学习一下算法的话，也可以看看本文档中的算法模块，对于提高自身的编程和逻辑能力也是相当有效的一个途径。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_c('router-link',{attrs:{\"to\":\"/algorithm/\"}},[_vm._v(\"文档\")]),_vm._ssrNode(\"会将算法按照难度分级，代码中都有详细注释，且会提供多种解法。\")],2),_vm._ssrNode(\" <h3 id=\\\"公众号：\\\"><a href=\\\"#公众号：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 公众号：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>有新的文章，算法题，面试题等都会第一时间发布与公众号上。</p>\")],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./README.md?vue&type=template&id=77fd1c24&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"113e308f\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "16.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/vue定义全局函数.md?cbdb",
        "webpack:///./docs/accumulate/Vue/vue定义全局函数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,05BAA05B,4QAA4Q,4CAA4C,0CAA0C,giBAAgiB,q3BAAq3B,sXAAsX,yQAAyQ,8CAA8C,0CAA0C,sXAAsX,yQAAyQ,8CAA8C,0CAA0C,4CAA4C,0CAA0C,wrBAAwrB,yOAAyO,uQAAuQ,ukBAAukB,8PAA8P;AAClwM;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2F",
      "file": "16.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-定义全局函数\\\"><a href=\\\"#vue-定义全局函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 定义全局函数</h2> <h3 id=\\\"原理\\\"><a href=\\\"#原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原理</h3> <p><strong>通过 Vue.prototype 将函数挂载到 Vue 实例上面</strong>，在组件中通过 this.函数名，来运行函数。</p> <h3 id=\\\"_1-在-main-js-里面直接写函数\\\"><a href=\\\"#_1-在-main-js-里面直接写函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 在 main.js 里面直接写函数</h3> <p><strong>直接在 main.js 里面写</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">test</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行全局函数test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>组件中调用</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 直接通过this运行函数</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"_2-写一个模块文件，挂载到-main-js-上面。\\\"><a href=\\\"#_2-写一个模块文件，挂载到-main-js-上面。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 写一个模块文件，挂载到 main.js 上面。</h3> <p>想要定义的全局函数比较多的话，推荐写在一个js文件里面，文件位置可以放在跟 main.js 同一级，方便引用</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// base.js</span>\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">install</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>Vue<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">text1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行成功1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  Vue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">text2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'执行成功2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>main.js 入口文件：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> Vue <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// vue要在引文件之前</span>\\n<span class=\\\"token keyword\\\">import</span> base <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./base.js'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引用文件</span>\\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>base<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//将全局函数当做插件来进行注册</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>组件里面调用：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./vue定义全局函数.md?vue&type=template&id=6a628545&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"c532db94\"\n  \n)\n\ncomponent.options.__file = \"vue定义全局函数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "17.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/vue小技巧.md?887b",
        "webpack:///./docs/accumulate/Vue/vue小技巧.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,iIAAiI,wfAAwf,0QAA0Q,4ZAA4Z,6JAA6J,kDAAkD,gDAAgD,i0BAAi0B,mVAAmV,uUAAuU,gHAAgH,sKAAsK,oDAAoD,gwBAAgwB,2CAA2C,qQAAqQ,4CAA4C,sKAAsK,8OAA8O,wQAAwQ,gOAAgO,qGAAqG,uKAAuK,qnCAAqnC,4WAA4W,4CAA4C,6/CAA6/C,8dAA8d,kMAAkM,2MAA2M,qFAAqF,sGAAsG,yPAAyP,8HAA8H,wDAAwD,+OAA+O,s1CAAs1C,gDAAgD,2WAA2W,qLAAqL,yHAAyH,mFAAmF,2NAA2N,8FAA8F,gDAAgD,0tEAA0tE,gHAAgH,cAAc,kBAAkB,MAAM,oBAAoB,OAAO,0CAA0C,QAAQ,2DAA2D;AACx0e;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2F",
      "file": "17.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-小技巧-小问题1\\\"><a href=\\\"#vue-小技巧-小问题1\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 小技巧&amp;小问题1</h2> <h3 id=\\\"路由变化页面数据不刷新问题\\\"><a href=\\\"#路由变化页面数据不刷新问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由变化页面数据不刷新问题</h3> <blockquote><p>场景：比如文章详情数据，依赖路由的<code>params</code>参数获取的(ajax 写在 created 生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行 created 组件生命周期，导致文章数据还是上一个文章的数据。</p></blockquote> <p><strong>解决方法：watch 监听路由是否变化</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>     watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">'$route'</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 监听路由是否变化</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$route<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">.</span>articleId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">// 是否有文章id</span>\\n          <span class=\\\"token comment\\\">// 获取文章数据</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"settimeout-setinterval-无法用-this-访问-vue-实例\\\"><a href=\\\"#settimeout-setinterval-无法用-this-访问-vue-实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setTimeout/setInterval 无法用 this 访问 VUe 实例</h3> <p><strong>场景</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>      <span class=\\\"token function\\\">mounted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// this指向改变</span>\\n            <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// setInterval同理</span>\\n              console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 此时this指向Window对象</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>解决方法：使用箭头函数</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 箭头函数访问this实例</span>\\n<span class=\\\"token comment\\\">// 因为箭头函数本身没有绑定this 继承上一个不是箭头函数的函数的this</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 使用变量保存this指向 通过变量访问this实例</span>\\n<span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用self变量访问this实例</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"setinterval-路由跳转继续运行并没有销毁\\\"><a href=\\\"#setinterval-路由跳转继续运行并没有销毁\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval 路由跳转继续运行并没有销毁</h3> <p><strong>场景</strong>：</p> <p>比如一些弹幕，走马灯文字，这类需要定时调用的，<strong>路由跳转之后，因为组件已经销毁了，但是 setInterval 还没有销毁</strong>，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p> <p><strong>解决办法：在组件生命周期 beforeDestroy 停止 setInterval</strong></p> <p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeDestroy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。</span>\\n   <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>intervalid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"vue-滚动行为-浏览器回退记忆位置-用法\\\"><a href=\\\"#vue-滚动行为-浏览器回退记忆位置-用法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 滚动行为(浏览器回退记忆位置)用法</h3> <p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的 History 模式），下面做一个简单的分享。</p> <p><strong>路由设置</strong></p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"要使用这一功能，首先需要开启 vue-router 的 \"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/essentials/history-mode.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"history 模式\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果之前一直使用的是<code>hash</code>模式(默认模式)，项目已经开发了一段时间，然后转 history 模式很可能会遇到：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a3f629cf265da430d5839ed\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"这些问题\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ol start=\\\"2\\\"><li>滚动行为具体设置如下：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          mode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'history'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">scrollBehavior</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> savedPosition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>savedPosition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 如果savedPosition存在，滚动条会自动跳到记录的值的地方</span>\\n              <span class=\\\"token keyword\\\">return</span> savedPosition\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token comment\\\">// savedPosition也是一个记录x轴和y轴位置的对象</span>\\n             <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>，\\n          routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"vue 滚动行为文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"，可以进到这里看看更详细的信息。\")],2),_vm._ssrNode(\" <h3 id=\\\"vue-路由拦截浏览器后退实现草稿保存类似需求\\\"><a href=\\\"#vue-路由拦截浏览器后退实现草稿保存类似需求\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 路由拦截浏览器后退实现草稿保存类似需求</h3> <p><strong>场景</strong>：</p> <p>为了防止用户突然离开，没有保存已输入的信息。</p> <p><strong>用法</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token comment\\\">//在路由组件中：</span>\\n    <span class=\\\"token function\\\">mounted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>用户已经输入信息<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 出现弹窗提醒保存草稿，或者自动后台为其保存</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 用户离开</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"类似的还有<code>beforeEach</code>、<code>beforeRouteUpdate</code>，也分为全局钩子和组件钩子，见\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh-cn/advanced/navigation-guards.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"v-once-只渲染元素和组件一次，优化更新渲染性能\\\"><a href=\\\"#v-once-只渲染元素和组件一次，优化更新渲染性能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> v-once 只渲染元素和组件一次，优化更新渲染性能</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/api/#v-cloak\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"v-once\"),_c('OutboundLink')],2),_vm._ssrNode(\"这个 api 蛮 6 的，应该很多小伙伴都没有注意到这个 api。\")],2),_vm._ssrNode(\" <p><strong>文档介绍</strong>：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/17/160ffd6c2dcf70e1?w=948&h=716&f=png&s=64938\\\" alt=\\\"v-once文档介绍\\\"></p> <p>这个 api 在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#%E5%AF%B9%E4%BD%8E%E5%BC%80%E9%94%80%E7%9A%84%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8-v-once\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"推荐：对低开销的静态组件使用 v-once\")],2),_vm._ssrNode(\" <p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">component</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'terms-of-service'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      template<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'\\\\\\n        &lt;div v-once&gt;\\\\\\n          &lt;h1&gt;Terms of Service&lt;/h1&gt;\\\\\\n          ...很多静态内容...\\\\\\n        &lt;/div&gt;\\\\\\n      '</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"vue-风格指南推荐：\\\"><a href=\\\"#vue-风格指南推荐：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 风格指南推荐：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"vue 框架还有一个\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/style-guide/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"风格指南\"),_c('OutboundLink')],2),_vm._ssrNode(\"推荐，如下图所示，大家也可以学习一波。\")],2),_vm._ssrNode(\" <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/17/160fff0ec0147156?w=1578&h=811&f=png&s=174542\\\" alt=\\\"vue风格指南\\\"></p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./vue小技巧.md?vue&type=template&id=00dcef25&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f557fdb8\"\n  \n)\n\ncomponent.options.__file = \"vue小技巧.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "18.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/vue钩子函数.md?23d6",
        "webpack:///./docs/accumulate/Vue/vue钩子函数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,s+CAAs+C,8bAA8b,2CAA2C,+KAA+K,4CAA4C,oFAAoF,oZAAoZ,2CAA2C,8KAA8K,4CAA4C,oFAAoF,iWAAiW,2CAA2C,oRAAoR,4CAA4C,oFAAoF,0zCAA0zC,8HAA8H,0KAA0K,8HAA8H,0gCAA0gC,iJAAiJ,6jBAA6jB,2CAA2C,gMAAgM,gDAAgD,4FAA4F,2tCAA2tC,4HAA4H,wWAAwW,+SAA+S,uWAAuW,qHAAqH,ooCAAooC,8QAA8Q,wIAAwI,2CAA2C,yIAAyI,sFAAsF,q0BAAq0B,iLAAiL,8KAA8K,6GAA6G,qFAAqF,wNAAwN,6FAA6F,4CAA4C,s3BAAs3B,2CAA2C,gYAAgY,4CAA4C,oFAAoF,mpCAAmpC,2CAA2C,6KAA6K,wLAAwL,mFAAmF,wIAAwI,sIAAsI,oFAAoF,iDAAiD,4CAA4C,oFAAoF,k3BAAk3B,0KAA0K,osBAAosB,8YAA8Y,2CAA2C,uIAAuI,KAAK,4NAA4N,oLAAoL,sIAAsI,oFAAoF,gGAAgG,4CAA4C,oFAAoF,siDAAsiD,cAAc,oBAAoB,cAAc,wMAAwM,cAAc,0KAA0K,aAAa,mGAAmG,8DAA8D,8GAA8G,qLAAqL,mDAAmD,oDAAoD,wGAAwG,8DAA8D,0GAA0G,+DAA+D,kDAAkD,qBAAqB,mGAAmG,8DAA8D,8GAA8G,mLAAmL,aAAa,0CAA0C,oDAAoD,wGAAwG,2DAA2D,8GAA8G,wGAAwG,wGAAwG,2DAA2D,0GAA0G,+DAA+D,uuBAAuuB,8DAA8D,8GAA8G,+DAA+D,wGAAwG,gEAAgE,0GAA0G,+DAA+D,ggBAAggB,cAAc,kYAAkY,8RAA8R,4DAA4D,6DAA6D,osBAAosB,yEAAyE,2tBAA2tB,+DAA+D,qEAAqE,+DAA+D,yUAAyU,iBAAiB,yvBAAyvB,0FAA0F,wDAAwD,kNAAkN,2BAA2B,0CAA0C,4DAA4D,2KAA2K,wDAAwD,kIAAkI,oDAAoD,iIAAiI,oDAAoD,kNAAkN,4BAA4B,0CAA0C,wDAAwD,0QAA0Q,oDAAoD,kIAAkI,8OAA8O,+JAA+J,8fAA8f,uNAAuN,wDAAwD,kGAAkG,igBAAigB,yNAAyN,wDAAwD,0GAA0G,oFAAoF,s6DAAs6D,kBAAkB,2GAA2G,0LAA0L,kDAAkD,oDAAoD,oHAAoH,qLAAqL,mDAAmD,oDAAoD,wGAAwG,8DAA8D,kHAAkH,+DAA+D,oEAAoE,8BAA8B,2GAA2G,2LAA2L,oDAAoD,oDAAoD,oHAAoH,qLAAqL,mDAAmD,oDAAoD,wGAAwG,8DAA8D,kHAAkH,+DAA+D,oEAAoE,2BAA2B,2GAA2G,2LAA2L,6NAA6N,oDAAoD,oHAAoH,qLAAqL,mDAAmD,oDAAoD,wGAAwG,8DAA8D,kHAAkH,+DAA+D,q3BAAq3B,oRAAoR,kHAAkH,+DAA+D,wGAAwG,gEAAgE,8GAA8G,+DAA+D,2oBAA2oB,cAAc,maAAma,0LAA0L,kDAAkD,gLAAgL,gDAAgD,oDAAoD,0DAA0D,gBAAgB,2GAA2G,+DAA+D,wGAAwG,gEAAgE,gHAAgH,+DAA+D;AACzo2C;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2F",
      "file": "18.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\\\"><a href=\\\"#vue的钩子函数-路由导航守卫、keep-alive、生命周期钩子\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</h2> <p>说到Vue的钩子函数，可能很多人只停留在一些很简单常用的钩子(<code>created</code>,<code>mounted</code>)，而且对于里面的区别，什么时候该用什么钩子，并没有仔细的去研究过，且Vue的生命周期在面试中也算是比较高频的考点，那么该如何回答这类问题，让人有眼前一亮的感觉呢...</p> <h2 id=\\\"vue-router导航守卫：\\\"><a href=\\\"#vue-router导航守卫：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue-Router导航守卫：</h2> <p>有的时候，我们需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"为此我们有很多种方法可以植入路由的导航过程：<strong>全局的, 单个路由独享的, 或者组件级的</strong>,推荐优先阅读\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由文档\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"全局守卫\\\"><a href=\\\"#全局守卫\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 全局守卫</h3> <p>vue-router全局有三个守卫：</p> <ol><li>router.beforeEach 全局前置守卫 进入路由之前</li> <li>router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用</li> <li>router.afterEach 全局后置钩子 进入路由之后</li></ol> <p><strong>使用方法</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js 入口文件</span>\\n<span class=\\\"token keyword\\\">import</span> router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./router'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引入路由</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeResolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">afterEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'afterEach 全局后置钩子'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><h4 id=\\\"to-from-next-这三个参数：\\\"><a href=\\\"#to-from-next-这三个参数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> to,from,next 这三个参数：</h4> <p>to和from是<strong>将要进入和将要离开的路由对象</strong>,路由对象指的是平时通过this.$route获取到的路由对象。</p> <p><strong>next:Function</strong> 这个参数是个函数，且<strong>必须调用，否则不能进入路由</strong>(页面空白)。</p> <ul><li>next() 进入该路由。</li> <li>next(false): 取消进入路由，url地址重置为from路由地址(也就是将要离开的路由地址)。</li> <li>next 跳转新路由，当前的导航被中断，重新开始一个新的导航。</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token function\\\">我们可以这样跳转：next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path地址'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">或者next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>path<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">或者next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        且允许设置诸如 replace<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>、name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'home'</span> 之类的选项\\n        以及你用在router<span class=\\\"token operator\\\">-</span>link或router<span class=\\\"token punctuation\\\">.</span>push的对象选项。\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"路由独享守卫\\\"><a href=\\\"#路由独享守卫\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由独享守卫</h3> <p>如果你不想全局配置守卫的话，你可以为某些路由单独配置守卫：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span>\\n        component<span class=\\\"token punctuation\\\">:</span> Foo<span class=\\\"token punctuation\\\">,</span>\\n        beforeEnter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n        <span class=\\\"token comment\\\">// 参数用法什么的都一样,调用顺序在全局前置守卫后面，所以不会被全局守卫覆盖</span>\\n        <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><h3 id=\\\"路由组件内的守卫：\\\"><a href=\\\"#路由组件内的守卫：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由组件内的守卫：</h3> <ol><li>beforeRouteEnter 进入路由前</li> <li>beforeRouteUpdate (2.2) 路由复用同一个组件时</li> <li>beforeRouteLeave 离开当前路由时</li></ol> <p><strong>文档中的介绍：</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteEnter</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token function\\\">beforeRouteUpdate</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`</span>\\n<span class=\\\"token comment\\\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\\n<span class=\\\"token comment\\\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// 导航离开该组件的对应路由时调用，可以访问组件实例 `this`</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p><strong>beforeRouteEnter访问this</strong></p> <p>因为钩子在组件实例还没被创建的时候调用，所以不能获取组件实例 <code>this</code>，可以通过传一个回调给<code>next</code>来访问组件实例\\n。</p> <p>但是<strong>回调的执行时机在mounted后面</strong>,所以在我看来这里对this的访问意义不太大，可以放在<code>created</code>或者<code>mounted</code>里面。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteEnter</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'在路由独享守卫后调用'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>vm <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p><strong>beforeRouteLeave：</strong></p> <p>导航离开该组件的对应路由时调用，我们用它来禁止用户离开，比如还未保存草稿，或者在用户离开前，将<code>setInterval</code>销毁，防止离开之后，定时器还在调用。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">beforeRouteLeave</span> <span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>文章保存<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 允许离开或者可以跳到别的路由 上面讲过了</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取消离开</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"关于钩子的一些知识：\\\"><a href=\\\"#关于钩子的一些知识：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于钩子的一些知识：</h3> <h4 id=\\\"路由钩子函数的错误捕获\\\"><a href=\\\"#路由钩子函数的错误捕获\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由钩子函数的错误捕获</h4> <p>如果我们在全局守卫/路由独享守卫/组件路由守卫的钩子函数中有错误，可以这样捕获：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">onError</span><span class=\\\"token punctuation\\\">(</span>callback <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> \\n<span class=\\\"token comment\\\">// 2.4.0新增 并不常用，了解一下就可以了 </span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'callback'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在路由文档中还有更多的\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"实例方法\"),_c('OutboundLink')],2),_vm._ssrNode(\"：动态添加路由等，有兴趣可以了解一下。\")],2),_vm._ssrNode(\" <h4 id=\\\"跳转死循环，页面永远空白\\\"><a href=\\\"#跳转死循环，页面永远空白\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 跳转死循环，页面永远空白</h4> <p>我了解到的，很多人会碰到这个问题，来看一下这段伪代码：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">beforeEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>登录<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>看逻辑貌似是对的，但是当我们跳转到<code>login</code>之后，因为此时还是未登录状态，所以会一直跳转到<code>login</code>然后死循环，页面一直是空白的，所以：我们需要把判断条件稍微改一下。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>登录 <span class=\\\"token operator\\\">||</span> to<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'login'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 登录，或者将要前往login页面的时候，就允许进入路由</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h4 id=\\\"全局后置钩子的跳转：\\\"><a href=\\\"#全局后置钩子的跳转：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 全局后置钩子的跳转：</h4> <p>文档中提到因为router.afterEach不接受<code>next</code>函数所以也不会改变导航本身，意思就是只能当成一个钩子来使用，但是我自己在试的时候发现，我们可以通过这种形式来实现跳转：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// main.js 入口文件</span>\\n<span class=\\\"token keyword\\\">import</span> router <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./router'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 引入路由</span>\\nrouter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">afterEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>未登录 <span class=\\\"token operator\\\">&amp;&amp;</span> to<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'login'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'login'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 跳转login</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>额，通过router.beforeEach 也完全可以实现且更好，我就骚一下。</p> <h3 id=\\\"完整的路由导航解析流程-不包括其他生命周期-：\\\"><a href=\\\"#完整的路由导航解析流程-不包括其他生命周期-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 完整的路由导航解析流程(不包括其他生命周期)：</h3> <ol><li>触发进入其他路由。</li> <li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li> <li>调用局前置守卫：<code>beforeEach</code></li> <li>在重用的组件里调用 <code>beforeRouteUpdate</code></li> <li>调用路由独享守卫 <code>beforeEnter</code>。</li> <li>解析异步路由组件。</li> <li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li> <li>调用全局解析守卫 <code>beforeResolve</code></li> <li>导航被确认。</li> <li>调用全局后置钩子的 <code>afterEach</code> 钩子。</li> <li>触发DOM更新(<code>mounted</code>)。</li> <li>执行<code>beforeRouteEnter</code> 守卫中传给 next 的回调函数</li></ol> <hr> <h2 id=\\\"你不知道的keep-alive-我猜你不知道\\\"><a href=\\\"#你不知道的keep-alive-我猜你不知道\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 你不知道的keep-alive[我猜你不知道]</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件<code>keep-alive</code>来<strong>缓存组件内部状态，避免重新渲染</strong>，\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/api/#keep-alive\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文档在这里\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <blockquote><p>文档：和 <code>&lt;transition&gt;</code>相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p></blockquote> <h3 id=\\\"用法：\\\"><a href=\\\"#用法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用法：</h3> <p><strong>缓存动态组件：</strong></p> <p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，此种方式并无太大的实用意义。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 基本 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!-- 多个条件判断的子组件 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>comp-a</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a &gt; 1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>comp-a</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>comp-b</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>comp-b</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p><strong>缓存路由组件：</strong></p> <p>使用<code>keep-alive</code>可以将所有路径匹配到的路由组件都缓存起来，包括路由组件里面的组件，<code>keep-alive</code>大多数使用场景就是这种。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"生命周期钩子：\\\"><a href=\\\"#生命周期钩子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 生命周期钩子：</h3> <p>这篇既然是Vue钩子函数的专场，那肯定要扣题呀~</p> <p>在被<code>keep-alive</code>包含的组件/路由中，会多出两个生命周期的钩子:<code>activated</code> 与 <code>deactivated</code>。</p> <blockquote><p>文档：在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <code>&lt;keep-alive&gt;</code> 树内的<strong>所有嵌套组件</strong>中触发。</p></blockquote> <p><strong>activated在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用</strong>。</p> <p><strong>activated调用时机：</strong></p> <p>第一次进入缓存路由/组件，在<code>mounted</code>后面，<code>beforeRouteEnter</code>守卫传给 next 的回调函数之前调用：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        beforeMount<span class=\\\"token operator\\\">=&gt;</span> 如果你是从别的路由<span class=\\\"token operator\\\">/</span><span class=\\\"token function\\\">组件进来</span><span class=\\\"token punctuation\\\">(</span>组件销毁destroyed<span class=\\\"token operator\\\">/</span>或离开缓存deactivated<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span>\\n        mounted<span class=\\\"token operator\\\">=&gt;</span> activated 进入缓存组件 <span class=\\\"token operator\\\">=&gt;</span> 执行 beforeRouteEnter回调\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>因为组件被缓存了，<strong>再次进入缓存路由/组件时，不会触发这些钩子</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// beforeCreate created beforeMount mounted 都不会触发。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>所以之后的调用时机是：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        组件销毁destroyed<span class=\\\"token operator\\\">/</span>或离开缓存deactivated <span class=\\\"token operator\\\">=&gt;</span> activated 进入当前缓存组件 \\n        <span class=\\\"token operator\\\">=&gt;</span> 执行 beforeRouteEnter回调\\n        <span class=\\\"token comment\\\">// 组件缓存或销毁，嵌套组件的销毁和缓存也在这里触发</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>deactivated：组件被停用(离开路由)时调用</strong></p> <p><strong>使用了<code>keep-alive</code>就不会调用<code>beforeDestroy</code>(组件销毁前钩子)和<code>destroyed</code>(组件销毁)，因为组件没被销毁，被缓存起来了</strong>。</p> <p>这个钩子可以看作<code>beforeDestroy</code>的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，你可以放在这个钩子里。</p> <p>如果你离开了路由，会依次触发：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        组件内的离开当前路由钩子beforeRouteLeave <span class=\\\"token operator\\\">=&gt;</span>  路由前置守卫 beforeEach <span class=\\\"token operator\\\">=&gt;</span>\\n        全局后置钩子afterEach <span class=\\\"token operator\\\">=&gt;</span> deactivated 离开缓存组件 <span class=\\\"token operator\\\">=&gt;</span> activated <span class=\\\"token function\\\">进入缓存组件</span><span class=\\\"token punctuation\\\">(</span>如果你进入的也是缓存路由<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">// 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated </span>\\n        <span class=\\\"token comment\\\">// 如果进入的路由也没有缓存的话  全局后置钩子afterEach=&gt;销毁 destroyed=&gt; beforeCreate等</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>那么，如果我只是想缓存其中几个路由/组件，那该怎么做？</p> <h3 id=\\\"缓存你想缓存的路由：\\\"><a href=\\\"#缓存你想缓存的路由：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缓存你想缓存的路由：</h3> <h4 id=\\\"vue2-1-0之前\\\"><a href=\\\"#vue2-1-0之前\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue2.1.0之前:</h4> <p>想实现类似的操作，你可以：</p> <ol><li>配置一下路由元信息</li> <li>创建两个<code>keep-alive</code>标签</li> <li>使用<code>v-if</code>通过路由元信息判断缓存哪些路由。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>        <span class=\\\"token operator\\\">&lt;</span>keep<span class=\\\"token operator\\\">-</span>alive<span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span>router<span class=\\\"token operator\\\">-</span>view v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;$route.meta.keepAlive&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>这里是会被缓存的路由<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>router<span class=\\\"token operator\\\">-</span>view<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>keep<span class=\\\"token operator\\\">-</span>alive<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span>router<span class=\\\"token operator\\\">-</span>view v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;!$route.meta.keepAlive&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>因为用的是v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">if</span> 所以下面还要创建一个未缓存的路由视图出口<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>router<span class=\\\"token operator\\\">-</span>view<span class=\\\"token operator\\\">&gt;</span>\\n        <span class=\\\"token comment\\\">//router配置</span>\\n        <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span>\\n              name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'home'</span><span class=\\\"token punctuation\\\">,</span>\\n              component<span class=\\\"token punctuation\\\">:</span> Home<span class=\\\"token punctuation\\\">,</span>\\n              meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                keepAlive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 需要被缓存</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/:id'</span><span class=\\\"token punctuation\\\">,</span>\\n              name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'edit'</span><span class=\\\"token punctuation\\\">,</span>\\n              component<span class=\\\"token punctuation\\\">:</span> Edit<span class=\\\"token punctuation\\\">,</span>\\n              meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                keepAlive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token comment\\\">// 不需要被缓存</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br></div></div><h4 id=\\\"vue2-1-0版本之后：\\\"><a href=\\\"#vue2-1-0版本之后：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue2.1.0版本之后：</h4> <p>使用路由元信息的方式，要多创建一个<code>router-view</code>标签，并且每个路由都要配置一个元信息，是可以实现我们想要的效果，但是过于繁琐了点。</p> <p>幸运的是在Vue2.1.0之后，Vue新增了两个属性配合<code>keep-alive</code>来有条件地缓存 路由/组件。</p> <p><strong>新增属性：</strong></p> <ul><li><code>include</code>：匹配的 路由/组件 会被缓存</li> <li><code>exclude</code>：匹配的 路由/组件 不会被缓存</li></ul> <p><code>include</code>和<code>exclude</code>支持三种方式来有条件的缓存路由：采用逗号分隔的字符串形式，正则形式，数组形式。</p> <p>正则和数组形式，必须采用<code>v-bind</code>形式来使用。</p> <p><strong>缓存组件的使用方式</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>        <span class=\\\"token comment\\\">&lt;!-- 逗号分隔字符串 --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a,b<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        \\n        <span class=\\\"token comment\\\">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">:include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>/a|b/<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        \\n        <span class=\\\"token comment\\\">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">:include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>[<span class=\\\"token punctuation\\\">'</span>a<span class=\\\"token punctuation\\\">'</span>, <span class=\\\"token punctuation\\\">'</span>b<span class=\\\"token punctuation\\\">'</span>]<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>component</span> <span class=\\\"token attr-name\\\">:is</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>view<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p><strong>但更多场景中，我们会使用<code>keep-alive</code>来缓存路由</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>a<span class=\\\"token punctuation\\\">'</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>匹配规则：</strong></p> <ol><li><strong>首先匹配组件的name选项</strong>，如果<code>name</code>选项不可用。</li> <li>则匹配它的<strong>局部注册名称</strong>。 (父组件 <code>components</code> 选项的键值)</li> <li><strong>匿名组件，不可匹配</strong>。</li></ol> <p>比如路由组件没有<code>name</code>选项，并且没有注册的组件名。</p> <ol start=\\\"4\\\"><li>只能匹配当前被包裹的组件，<strong>不能匹配更下面嵌套的子组件</strong>。</li></ol> <p>比如用在路由上，只能匹配路由组件的<code>name</code>选项，不能匹配路由组件里面的嵌套组件的<code>name</code>选项。</p> <ol start=\\\"5\\\"><li>文档：<code>&lt;keep-alive&gt;</code><strong>不会在函数式组件中正常工作</strong>，因为它们没有缓存实例。</li> <li><strong><code>exclude</code>的优先级大于<code>include</code></strong></li></ol> <p>也就是说：当<code>include</code>和<code>exclude</code>同时存在时，<code>exclude</code>生效，<code>include</code>不生效。</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>keep-alive</span> <span class=\\\"token attr-name\\\">include</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a,b<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">exclude</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>a<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token comment\\\">&lt;!--只有a不被缓存--&gt;</span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>router-view</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>keep-alive</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>当组件被<code>exclude</code>匹配，该组件将不会被缓存，不会调用<code>activated</code> 和 <code>deactivated</code></strong>。</p> <hr> <h2 id=\\\"组件生命周期钩子：\\\"><a href=\\\"#组件生命周期钩子：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件生命周期钩子：</h2> <p>关于组件的生命周期，是时候放出这张图片了：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/7/21/164bbf610b61f3cd?w=1200&h=2800&f=jpeg&s=946212\\\" alt></p> <p>这张图片已经讲得很清楚了，很多人这部分也很清楚了，大部分生命周期并不会用到，这里提一下几点：</p> <ol><li><p><strong>ajax请求最好放在<code>created</code>里面</strong>，因为此时已经可以访问<code>this</code>了，请求到数据就可以直接放在<code>data</code>里面。</p> <p>这里也碰到过几次，面试官问：ajax请求应该放在哪个生命周期。</p></li> <li><p><strong>关于dom的操作要放在<code>mounted</code>里面</strong>，在<code>mounted</code>前面访问dom会是<code>undefined</code>。</p></li> <li><p>每次进入/离开组件都要做一些事情，用什么钩子：</p></li></ol> <ul><li><p>不缓存：</p> <p>进入的时候可以用<code>created</code>和<code>mounted</code>钩子，离开的时候用<code>beforeDestory</code>和<code>destroyed</code>钩子,<code>beforeDestory</code>可以访问<code>this</code>，<code>destroyed</code>不可以访问<code>this</code>。</p></li> <li><p>缓存了组件：</p> <p>缓存了组件之后，再次进入组件不会触发<code>beforeCreate</code>、<code>created</code> 、<code>beforeMount</code>、 <code>mounted</code>，<strong>如果你想每次进入组件都做一些事情的话，你可以放在<code>activated</code>进入缓存组件的钩子中</strong>。</p> <p>同理：离开缓存组件的时候，<code>beforeDestroy</code>和<code>destroyed</code>并不会触发，可以使用<code>deactivated</code>离开缓存组件的钩子来代替。</p></li></ul> <hr> <h2 id=\\\"触发钩子的完整顺序：\\\"><a href=\\\"#触发钩子的完整顺序：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 触发钩子的完整顺序：</h2> <p>将路由导航、<code>keep-alive</code>、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件：</p> \"),_vm._ssrNode(\"<ol>\",\"</ol>\",[_vm._ssrNode(\"<li><code>beforeRouteLeave</code>:路由组件的组件离开路由前钩子，可取消路由离开。</li> <li><code>beforeEach</code>: 路由全局前置守卫，可用于登录验证、全局路由loading等。</li> <li><code>beforeEnter</code>: 路由独享守卫</li> <li><code>beforeRouteEnter</code>: 路由组件的组件进入路由前钩子。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<code>beforeResolve</code>:\"),_vm._ssrNode(\"<a href=\\\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E8%A7%A3%E6%9E%90%E5%AE%88%E5%8D%AB\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"路由全局解析守卫\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <li><code>afterEach</code>:路由全局后置钩子</li> <li><code>beforeCreate</code>:组件生命周期，不能访问<code>this</code>。</li> <li><code>created</code>:组件生命周期，可以访问<code>this</code>，不能访问dom。</li> <li><code>beforeMount</code>:组件生命周期</li> <li><code>deactivated</code>: 离开缓存组件a，或者触发a的<code>beforeDestroy</code>和<code>destroyed</code>组件销毁钩子。</li> <li><code>mounted</code>:访问/操作dom。</li> <li><code>activated</code>:进入缓存组件，进入a的嵌套子组件(如果有的话)。</li> <li>执行beforeRouteEnter回调函数next。</li>\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>Vue提供了很多钩子，但很多钩子我们几乎不会用到，只有清楚这些钩子函数的触发顺序以及背后的一些限制等，这样我们才能够正确的使用这些钩子，希望看了本文的同学，能对这些钩子有更加清晰的认识，使用起来更加得心应手。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./vue钩子函数.md?vue&type=template&id=7c79e11a&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"d220d994\"\n  \n)\n\ncomponent.options.__file = \"vue钩子函数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "19.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md?7691",
        "webpack:///./docs/accumulate/Vue/你或许不知道Vue的这些小技巧.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,iIAAiI,o1BAAo1B,4DAA4D,8GAA8G,iLAAiL,mDAAmD,oDAAoD,wGAAwG,wDAAwD,0GAA0G,6DAA6D,0GAA0G,0DAA0D,6ZAA6Z,qRAAqR,SAAS,oFAAoF,0OAA0O,WAAW,oFAAoF,aAAa,qFAAqF,mRAAmR,wJAAwJ,2DAA2D,0GAA0G,uGAAuG,uIAAuI,8IAA8I,2IAA2I,0IAA0I,4CAA4C,0FAA0F,6IAA6I,2IAA2I,0IAA0I,4CAA4C,0GAA0G,0DAA0D,0kCAA0kC,gCAAgC,UAAU,IAAI,IAAI,gBAAgB,aAAa,IAAI,IAAI,QAAQ,IAAI,QAAQ,oEAAoE,mKAAmK,2IAA2I,0IAA0I,4CAA4C,2dAA2d,SAAS,w+BAAw+B,kOAAkO,qOAAqO,8nBAA8nB,2IAA2I,0dAA0d,4RAA4R,gDAAgD,0CAA0C,4CAA4C,ibAAib,gQAAgQ,6NAA6N,oDAAoD,yTAAyT,yNAAyN,6NAA6N,2CAA2C,gBAAgB,m5CAAm5C,aAAa,oFAAoF,gYAAgY,OAAO,qFAAqF,aAAa,oFAAoF,quFAAquF,oWAAoW,gqCAAgqC,iBAAiB,WAAW,wBAAwB,oCAAoC,uBAAuB,mGAAmG,+KAA+K,mEAAmE,oDAAoD,wGAAwG,wDAAwD,4eAA4e,uLAAuL,gGAAgG,2JAA2J,oDAAoD,4IAA4I,gMAAgM,8UAA8U,qJAAqJ,wDAAwD,oDAAoD,gDAAgD,4CAA4C,6vDAA6vD,2FAA2F,kGAAkG,qGAAqG,QAAQ,kJAAkJ,WAAW,oDAAoD,8IAA8I,qGAAqG,UAAU,kJAAkJ,aAAa,oDAAoD,mDAAmD,4CAA4C,sIAAsI,qKAAqK,wBAAwB,0CAA0C,gDAAgD,2FAA2F,UAAU,+HAA+H,gBAAgB,0CAA0C,4CAA4C,oFAAoF,42CAA42C,iLAAiL,qDAAqD,oDAAoD,8GAA8G,wDAAwD,6BAA6B,GAAG,0FAA0F,yDAAyD,0GAA0G,wDAAwD,uhBAAuhB,gLAAgL,4DAA4D,6KAA6K,4DAA4D,oDAAoD,sBAAsB,QAAQ,4FAA4F,uDAAuD,+eAA+e,+KAA+K,uDAAuD,oDAAoD,8GAA8G,gLAAgL,4DAA4D,oDAAoD,sBAAsB,QAAQ,gGAAgG,uDAAuD,0GAA0G,uDAAuD,gIAAgI,+KAA+K,2DAA2D,oDAAoD,8GAA8G,gLAAgL,4DAA4D,oDAAoD,sBAAsB,QAAQ,gGAAgG,uDAAuD,0GAA0G,uDAAuD,0GAA0G,mGAAmG,sHAAsH,sDAAsD,ysCAAysC,8FAA8F,0OAA0O,kXAAkX,oDAAoD,oPAAoP,yIAAyI,2UAA2U,wLAAwL,cAAc,mLAAmL,oDAAoD,kPAAkP,sFAAsF,4nDAA4nD,2CAA2C,iOAAiO,YAAY,mLAAmL,4CAA4C,yLAAyL,qLAAqL,2CAA2C,2JAA2J,4CAA4C,iOAAiO,0CAA0C,wbAAwb,s3CAAs3C,oaAAoa,+VAA+V,gXAAgX,seAAse,iJAAiJ,uOAAuO,4FAA4F,ixCAAixC,iJAAiJ,sYAAsY,0FAA0F,wXAAwX,yRAAyR,sIAAsI;AACnt3C;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4F",
      "file": "19.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vue-小技巧-小问题2\\\"><a href=\\\"#vue-小技巧-小问题2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue 小技巧&amp;小问题2</h2> <p>用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章。</p> <h3 id=\\\"文章内容总结\\\"><a href=\\\"#文章内容总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 文章内容总结:</h3> <ol><li>组件style的scoped</li> <li>Vue 数组/对象更新 视图不更新</li> <li>vue filters 过滤器的使用</li> <li>列表渲染相关</li> <li>深度watch与watch立即触发回调</li> <li>这些情况下不要使用箭头函数</li> <li>路由懒加载写法</li> <li>路由的项目启动页和404页面</li> <li>Vue调试神器:vue-devtools</li></ol> <hr> <h3 id=\\\"组件style的scoped\\\"><a href=\\\"#组件style的scoped\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件style的scoped:</h3> <p>问题：在组件中用js动态创建的dom，添加样式不生效。</p> <p><strong>场景</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>test<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token script language-javascript\\\">\\n    <span class=\\\"token keyword\\\">let</span> a<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> newDom<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;div&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 创建dom</span>\\n    newDom<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;class&quot;</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">&quot;testAdd&quot;</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加样式</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>newDom<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 插入dom</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>style</span> <span class=\\\"token attr-name\\\">scoped</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token style language-css\\\">\\n<span class=\\\"token selector\\\">.test</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.testAdd</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>red<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>style</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div><p><strong>结果</strong>：</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">// test生效   testAdd 不生效\\n&lt;div data-v-1b971ada class=&quot;test&quot;&gt;&lt;div class=&quot;testAdd&quot;&gt;&lt;/div&gt;&lt;/div&gt;\\n\\n.test[data-v-1b971ada]</span><span class=\\\"token punctuation\\\">{</span> // 注意data-v-1b971ada\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>100px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p><strong>原因</strong>:</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当 <code>&lt;style&gt;</code> 标签有 \"),_vm._ssrNode(\"<a href=\\\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"scoped\"),_c('OutboundLink')],2),_vm._ssrNode(\" 属性时，它的 CSS 只作用于当前组件中的元素。\")],2),_vm._ssrNode(\" <p>它会<strong>为组件中所有的标签和class样式添加一个<code>scoped</code>标识</strong>，就像上面结果中的<code>data-v-1b971ada</code>。</p> <p>所以原因就很清楚了：因为动态添加的dom没有<code>scoped</code>添加的标识，<strong>没有跟<code>testAdd</code>的样式匹配起来</strong>，导致样式失效。</p> <p><strong>解决方式</strong></p> <ul><li>推荐：去掉该组件的scoped</li></ul> <p>每个组件的css并不会很多，当设计到动态添加dom，并为dom添加样式的时候，就可以去掉scoped，会比下面的方法方便很多。</p> <ul><li>可以动态添加style</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面的栗子可以这样添加样式</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'100px'</span><span class=\\\"token punctuation\\\">;</span>\\nnewDom<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>background<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><hr> <h3 id=\\\"vue-数组-对象更新-视图不更新\\\"><a href=\\\"#vue-数组-对象更新-视图不更新\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 数组/对象更新 视图不更新</h3> <p>很多时候，我们习惯于这样操作数组和对象:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// data数据</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        obj<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n            a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n            b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// 数据更新 数组视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// ['OBKoro1'];</span>\\n<span class=\\\"token comment\\\">// 数据更新 对象视图不更新</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>c <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'OBKoro1'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">delete</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// {b:2,c:'OBKoro1'}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br></div></div><p>由于js的限制，Vue 不能检测以上数组的变动，以及对象的添加/删除，很多人会因为像上面这样操作，出现视图没有更新的问题。</p> <p><strong>解决方式:</strong></p> <ol><li><strong>this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)</strong></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>arr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变数组</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$<span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;c&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变对象</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果还是不懂的话，可以看看这个codepen\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/oyjdbZ\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <ol start=\\\"2\\\"><li><strong>数组原生方法触发视图更新</strong>:</li></ol> <p>Vue可以监测到数组变化的，<strong>数组原生方法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>、 <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、unshift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token function\\\">、reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>意思是<strong>使用这些方法不用我们再进行额外的操作，视图自动进行更新</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐使用<code>splice</code>方法会比较好自定义,因为slice可以在数组的任何位置进行删除/添加操作，这部分可以看看我前几天写的一篇文章:\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b0903b26fb9a07a9d70c7e0?utm_source=gold_browser_extension#heading-7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"【干货】js 数组详细操作方法及解析合集\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <ol start=\\\"3\\\"><li><strong>替换数组/对象</strong></li></ol> <p>比方说:你想遍历这个数组/对象，对每个元素进行处理，然后触发视图更新。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 文档中的栗子: filter遍历数组，返回一个新数组，用新数组替换旧数组</span>\\nexample1<span class=\\\"token punctuation\\\">.</span>items <span class=\\\"token operator\\\">=</span> example1<span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/Foo/</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>举一反三</strong>：可以先把这个数组/对象保存在一个变量中，然后对这个变量进行遍历，等遍历结束后再用<strong>变量替换对象/数组</strong>。</p> <p><strong>并不会重新渲染整个列表</strong>:</p> <p>Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果你还是很困惑，可以看看\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"中关于这部分的解释。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"vue-filters-过滤器的使用\\\"><a href=\\\"#vue-filters-过滤器的使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vue filters 过滤器的使用:</h3> <p>过滤器，通常用于后台管理系统，或者一些约定类型，过滤。Vue过滤器用法是很简单，但是很多朋友可能都没有用过，这里稍微讲解一下。</p> <p><strong>在html模板中的两种用法</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\">&lt;!-- 在双花括号中 --&gt;</span>\\n{{ message | filterTest }}\\n<span class=\\\"token comment\\\">&lt;!-- 在 `v-bind` 中 --&gt;</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">:id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>message | filterTest<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>在组件<code>script</code>中的用法</strong>:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>    \\n        <span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n            message<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span>   \\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    filters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>  \\n        <span class=\\\"token function\\\">filterTest</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// value在这里是message的值</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'最后输出这个值'</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><p>用法就是上面讲的这样，可以自己在组件中试一试就知道了，很简单很好用的。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果不想自己试，可以点这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/rKxBMw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"里面修改代码就可以了，demo中包括<strong>过滤器串联</strong>、<strong>过滤器传参</strong>。\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"推荐看Vue\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/filters.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"过滤器\"),_c('OutboundLink')],2),_vm._ssrNode(\"文档，你会更了解它的。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"列表渲染相关\\\"><a href=\\\"#列表渲染相关\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 列表渲染相关</h3> <p><strong>v-for循环绑定model:</strong></p> <p>input在v-for中可以像如下这么进行绑定，我敢打赌很多人不知道。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 数据    </span>\\n<span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">{</span>\\n        obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;OB&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;Koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            ob<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认ob&quot;</span><span class=\\\"token punctuation\\\">,</span>\\n            koro1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;默认koro1&quot;</span>\\n        <span class=\\\"token punctuation\\\">}</span>   \\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// html模板</span>\\n<span class=\\\"token operator\\\">&lt;</span>div v<span class=\\\"token operator\\\">-</span><span class=\\\"token keyword\\\">for</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;(value,key) in obj&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;text&quot;</span> v<span class=\\\"token operator\\\">-</span>model<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;model[key]&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">// input就跟数据绑定在一起了，那两个默认数据也会在input中显示</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"为此，我做了个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/gKPOgw\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\",你可以点进去试试。\")],2),_vm._ssrNode(\" <p><strong>一段取值的v-for</strong></p> <p>如果我们有一段重复的html模板要渲染，又没有数据关联，我们可以:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>n in 5<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>这里会被渲染5次，渲染模板{{n}}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p><strong>v-if尽量不要与v-for在同一节点使用</strong>:</p> <p>v-for 的优先级比 v-if 更高,如果它们处于同一节点的话，那么每一个循环都会运行一遍v-if。</p> <p>如果你想根据循环中的<strong>每一项的数据来判断是否渲染，那么你这样做是对的</strong>:</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo.type===1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>如果你想要根据<strong>某些条件跳过循环，而又跟将要渲染的每一项数据没有关系的话，你可以将v-if放在v-for的父节点</strong>：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code>// 根据elseData是否为true 来判断是否渲染，跟每个元素没有关系    \\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>elseData<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n// 数组是否有数据 跟每个元素没有关系\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todos.length<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>todo in todos<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    {{ todo }}\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span>No todos left!<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><p>如上，正确使用v-for与v-if优先级的关系，可以为你节省大量的性能。</p> <hr> <h3 id=\\\"深度watch与watch立即触发回调\\\"><a href=\\\"#深度watch与watch立即触发回调\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 深度watch与watch立即触发回调</h3> <p>watch很多人都在用，但是这watch中的这两个选项<code>deep</code>、<code>immediate</code>，或许不是很多人都知道，我猜。</p> <p><strong>选项：deep</strong></p> <p>在选项参数中指定 <code>deep: true</code>，可以监听对象中属性的变化。</p> <p><strong>选项：immediate</strong></p> <p>在选项参数中指定 immediate: true, 将立即以表达式的当前值触发回调，也就是立即触发一次。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>watch<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'属性发生变化触发这个回调'</span><span class=\\\"token punctuation\\\">,</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        deep<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 监听这个对象中的每一个属性变化</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    step<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 属性</span>\\n        <span class=\\\"token comment\\\">//watch</span>\\n        <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认立即触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        immediate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 默认立即触发一次</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这两个选项可以同时使用，另外：是的，又有一个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/QxyWMa\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>还有下面这一点需要注意。</p> <hr> <h3 id=\\\"这些情况下不要使用箭头函数\\\"><a href=\\\"#这些情况下不要使用箭头函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这些情况下不要使用箭头函数:</h3> <ul><li>不应该使用箭头函数来定义一个生命周期方法</li> <li>不应该使用箭头函数来定义 method 函数</li> <li>不应该使用箭头函数来定义计算属性函数</li> <li>不应该对 data 属性使用箭头函数</li> <li>不应该使用箭头函数来定义 watcher 函数</li></ul> <p>示例：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 上面watch的栗子：</span>\\nhandler<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;默认触发一次&quot;</span><span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token comment\\\">// method：</span>\\nmethods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    plus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n        <span class=\\\"token comment\\\">// do something</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 生命周期:</span>\\ncreated<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 可以执行</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lala'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">)</span> \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>是的，没错，这些都能执行。</p> <p><strong>but</strong>:</p> <p>箭头函数绑定了父级作用域的上下文，<strong>this 将不会按照期望指向 Vue 实例</strong>。</p> <p>也就是说，你<strong>不能使用this来访问你组件中的data数据以及method方法了</strong>。</p> <p>this将会指向undefined。</p> <hr> <h3 id=\\\"路由懒加载写法\\\"><a href=\\\"#路由懒加载写法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由懒加载写法:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 我所采用的方法，个人感觉比较简洁一些，少了一步引入赋值。</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 引入组件</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// Vue路由文档的写法:</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">app</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./app.vue'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 引入组件</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/app'</span><span class=\\\"token punctuation\\\">,</span> component<span class=\\\"token punctuation\\\">:</span> app <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>文档的写法在于问题在于：如果我们的路由比较多的话，是不是要在路由上方引入赋值十几行组件？</p> <p>第一种跟第二种方法相比就是把引入赋值的一步，直接写在<code>component</code>上面，本质上是一样的。两种方式都可以的，大家自由选择哈。</p> <hr> <h3 id=\\\"路由的项目启动页和404页面\\\"><a href=\\\"#路由的项目启动页和404页面\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由的项目启动页和404页面</h3> <p>实际上这也就是一个设置而已:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    routes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 项目启动页</span>\\n        redirect<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'/login'</span>  <span class=\\\"token comment\\\">// 重定向到下方声明的路由 </span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'*'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 404 页面 </span>\\n        component<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./notFind'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 或者使用component也可以的</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><p>比如你的域名为:<code>www.baidu.com</code></p> <p>项目启动页指的是: 当你进入<code>www.baidu.com</code>，会自动跳转到login登录页。</p> <p>404页面指的是: 当进入一个没有 声明/没有匹配 的路由页面时就会跳转到404页面。</p> <p>比如进入<code>www.baidu.com/testRouter</code>,就会自动跳转到<code>notFind</code>页面。</p> <p>当你没有声明一个404页面，进入<code>www.baidu.com/testRouter</code>，显示的页面是一片空白。</p> <hr> <h3 id=\\\"vue调试神器-vue-devtools\\\"><a href=\\\"#vue调试神器-vue-devtools\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue调试神器:vue-devtools</h3> <p>每次调试的时候，写一堆<code>console</code>是否很烦？想要<strong>更快知道组件/Vuex内数据的变化</strong>？</p> <p>那么这款<strong>尤大开发</strong>的调试神器:vue-devtools，你真的要了解一下了。</p> <p>这波稳赚不赔，真的能提高开发效率。</p> <p><strong>安装方法</strong>：</p> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>谷歌商店+科学上网,搜索vue-devtools即可安装。</li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"不会科学上网？\"),_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000009682735\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"手动安装\"),_c('OutboundLink')],2)],2)],2),_vm._ssrNode(\" <p><strong>安装之后</strong>：</p> <p>在chrome开发者工具中会看一个vue的一栏，如下对我们网页应用内数据变化，组件层级等信息能够有更准确快速的了解。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/3/163c50e5198f6b8c?w=1917&h=324&f=png&s=45776\\\" alt></p> <hr> <h3 id=\\\"前几个月也写过一篇类似的\\\"><a href=\\\"#前几个月也写过一篇类似的\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前几个月也写过一篇类似的:</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a587b46f265da3e3b7a7677\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue 实践过程中的几个问题\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" <hr> <h2 id=\\\"结语\\\"><a href=\\\"#结语\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 结语</h2> <p>本文的内容很多都在Vue文档里面有过说明，推荐大家可以多看看Vue文档，不止看教程篇，还有文档的Api什么的，也都可以看。然后其实还有两三点想写的，因为预计篇幅都会比较长一点，所以准备留到以后的文章里面吧~</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./你或许不知道Vue的这些小技巧.md?vue&type=template&id=5d5e29f8&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"89ab3c0e\"\n  \n)\n\ncomponent.options.__file = \"你或许不知道Vue的这些小技巧.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "20.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/弹窗.md?9e5b",
        "webpack:///./docs/accumulate/Vue/弹窗.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,y2CAAy2C,4DAA4D,6GAA6G,iLAAiL,qDAAqD,oDAAoD,yDAAyD,+CAA+C,0GAA0G,iLAAiL,gEAAgE,8KAA8K,qDAAqD,gLAAgL,0DAA0D,oDAAoD,wGAAwG,wDAAwD,yDAAyD,oCAAoC,0GAA0G,uLAAuL,mDAAmD,oDAAoD,6DAA6D,gCAAgC,4GAA4G,iLAAiL,6DAA6D,iOAAiO,2EAA2E,ybAAyb,sDAAsD,8KAA8K,qDAAqD,oDAAoD,qHAAqH,iLAAiL,+DAA+D,oDAAoD,iEAAiE,mBAAmB,kHAAkH,iLAAiL,qDAAqD,oDAAoD,4GAA4G,yDAAyD,qHAAqH,wDAAwD,qHAAqH,iLAAiL,0DAA0D,iOAAiO,2EAA2E,0TAA0T,sDAAsD,oDAAoD,+DAA+D,cAAc,gHAAgH,iLAAiL,mDAAmD,oDAAoD,4GAA4G,yDAAyD,qHAAqH,wDAAwD,6DAA6D,eAAe,8GAA8G,kLAAkL,yDAAyD,+KAA+K,0DAA0D,oDAAoD,yHAAyH,iLAAiL,6DAA6D,oDAAoD,wGAAwG,wDAAwD,qHAAqH,wDAAwD,mHAAmH,wDAAwD,+GAA+G,+DAA+D,6GAA6G,wDAAwD,0GAA0G,6DAA6D,iuCAAiuC,8CAA8C,UAAU,kBAAkB,qJAAqJ,iJAAiJ,6IAA6I,8IAA8I,8CAA8C,2LAA2L,mRAAmR,8IAA8I,2IAA2I,qIAAqI,sIAAsI,0IAA0I,2IAA2I,8CAA8C,0KAA0K,8IAA8I,uIAAuI,yMAAyM,qJAAqJ,sJAAsJ,kJAAkJ,2IAA2I,8CAA8C,aAAa,UAAU,6qDAA6qD,wDAAwD,gIAAgI,yDAAyD,uUAAuU,gEAAgE,oDAAoD,6DAA6D,6CAA6C,gCAAgC,qGAAqG,qDAAqD,gHAAgH,sDAAsD,4GAA4G,qDAAqD,iHAAiH,sDAAsD,0GAA0G,iEAAiE,iwBAAiwB,iLAAiL,gEAAgE,oDAAoD,mDAAmD,mBAAmB,oGAAoG,iLAAiL,qDAAqD,oDAAoD,4GAA4G,yDAAyD,2GAA2G,wDAAwD,2GAA2G,iLAAiL,2DAA2D,iOAAiO,2EAA2E,0TAA0T,sDAAsD,oDAAoD,qDAAqD,cAAc,oGAAoG,iLAAiL,mDAAmD,oDAAoD,4GAA4G,yDAAyD,0GAA0G,wDAAwD,4qBAA4qB,mEAAmE,8GAA8G,gLAAgL,qDAAqD,oDAAoD,+HAA+H,wDAAwD,gHAAgH,iLAAiL,kEAAkE,6KAA6K,mDAAmD,oDAAoD,mLAAmL,wDAAwD,0GAA0G,oEAAoE,wjBAAwjB,KAAK,6mBAA6mB,gDAAgD,qIAAqI,8FAA8F,iGAAiG,8jBAA8jB,mLAAmL,qCAAqC,MAAM,gGAAgG,+UAA+U,4IAA4I,+UAA+U,gJAAgJ,kVAAkV,uIAAuI,kVAAkV,uIAAuI,kVAAkV,8CAA8C,sFAAsF,4CAA4C,uFAAuF,0zDAA0zD,gMAAgM,mEAAmE,sLAAsL,4DAA4D,oDAAoD,0GAA0G,oEAAoE,6yBAA6yB,oLAAoL,wNAAwN,cAAc,oFAAoF,gEAAgE,cAAc,sEAAsE,4CAA4C,ybAAyb,wLAAwL,0BAA0B,8KAA8K,mBAAmB,kIAAkI,iBAAiB,0CAA0C,6CAA6C,gGAAgG,+CAA+C,wIAAwI,mLAAmL,8EAA8E,iHAAiH,sFAAsF;AACr0kC;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "20.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"简单的弹窗组件实现\\\"><a href=\\\"#简单的弹窗组件实现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 简单的弹窗组件实现</h2> <p>最近在使用element-ui框架，用到了Dialog对话框组件，大致实现的效果，跟我之前自己在移动端项目里面弄的一个弹窗组件差不太多。然后就想着把这种弹窗组件的实现方式与大家分享一下，下面本文会带着大家手摸手实现一个弹窗组件。</p> <p>本文主要内容会涉及到弹窗遮罩的实现，<code>slot</code>插槽的使用方式，<code>props</code>、<code>$emit</code>传参，具体组件代码也传上去了。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <hr> <h3 id=\\\"组件最后实现的效果\\\"><a href=\\\"#组件最后实现的效果\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 组件最后实现的效果</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/21/162e6f9251c7c18f?w=650&h=1141&f=png&s=374719\\\" alt></p> <h2 id=\\\"实现步骤\\\"><a href=\\\"#实现步骤\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现步骤</h2> <ol><li>先搭建组件的html和css样式，遮罩层和内容层。</li> <li>定制弹窗内容：弹窗组件通过<code>slot</code>插槽接受从父组件那里传过来弹窗内容。</li> <li>定制弹窗样式：弹窗组件通过<code>props</code>接收从父组件传过来的弹窗宽度，上下左右的位置。</li> <li>组件开关：通过父组件传进来的<code>props</code>控制组件的显示与隐藏，子组件关闭时通过事件<code>$emit</code>触发父组件改变值。</li></ol> <hr> <h3 id=\\\"_1-搭建组件的html和css样式。\\\"><a href=\\\"#_1-搭建组件的html和css样式。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1.搭建组件的html和css样式。</h3> <p>html结构：一层遮罩层，一层内容层，内容层里面又有一个头部title和主体内容和一个关闭按钮。</p> <p>下面是组件中的html结构，里面有一些后面才要加进去的东西，如果看不懂的话可以先跳过，</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n       <span class=\\\"token comment\\\">&lt;!--外层的遮罩 点击事件用来关闭弹窗，isShow控制弹窗显示 隐藏的props--&gt;</span>\\n       <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog-cover back<span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>isShow<span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">@click</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>closeMyself<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n       <span class=\\\"token comment\\\">&lt;!-- transition 这里可以加一些简单的动画效果 --&gt;</span>\\n       <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>transition</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>drop<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token comment\\\">&lt;!--style 通过props 控制内容的样式  --&gt;</span>\\n         <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog-content<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span>topDistance+<span class=\\\"token string\\\">'%'</span>,<span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span>widNum+<span class=\\\"token string\\\">'%'</span>,<span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span>leftSite+<span class=\\\"token string\\\">'%'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span>  <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>isShow<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_head back<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n               <span class=\\\"token comment\\\">&lt;!--弹窗头部 title--&gt;</span>\\n               <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>提示信息<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_main<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">paddingTop</span><span class=\\\"token punctuation\\\">:</span>pdt+<span class=\\\"token string\\\">'px'</span>,<span class=\\\"token property\\\">paddingBottom</span><span class=\\\"token punctuation\\\">:</span>pdb+<span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n             <span class=\\\"token comment\\\">&lt;!--弹窗的内容--&gt;</span>\\n             <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token comment\\\">&lt;!--弹窗关闭按钮--&gt;</span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span>  <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>foot_close<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">@click</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>closeMyself<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n               <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>close_img back<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n         <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n     <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>transition</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><p>下面是组件中的主要的css样式，里面都做了充分的注释，主要通过<code>z-index</code>和<code>background</code>达到遮罩的效果，具体内容的css可以根据自己的需求来设置。</p> <div class=\\\"language-css line-numbers-mode\\\"><pre class=\\\"language-css\\\"><code>&lt;style lang=<span class=\\\"token string\\\">&quot;scss&quot;</span> scoped&gt;\\n  <span class=\\\"token comment\\\">/* 最外层 设置position定位  */</span>\\n  <span class=\\\"token selector\\\">.dialog</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> relative<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #2e2c2d<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> 16px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">/* 遮罩 设置背景层，z-index值要足够大确保能覆盖，高度 宽度设置满 做到全屏遮罩 */</span>\\n  <span class=\\\"token selector\\\">.dialog-cover</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rgba</span><span class=\\\"token punctuation\\\">(</span>0,0,0, 0.8<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> fixed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">z-index</span><span class=\\\"token punctuation\\\">:</span> 200<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span> 0<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100%<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">height</span><span class=\\\"token punctuation\\\">:</span> 100%<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">/* 内容层 z-index要比遮罩大，否则会被遮盖， */</span>\\n  <span class=\\\"token selector\\\">.dialog-content</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">position</span><span class=\\\"token punctuation\\\">:</span> fixed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">top</span><span class=\\\"token punctuation\\\">:</span> 35%<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">/* 移动端使用felx布局  */</span>\\n    <span class=\\\"token property\\\">display</span><span class=\\\"token punctuation\\\">:</span> flex<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">flex-direction</span><span class=\\\"token punctuation\\\">:</span> column<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">justify-content</span><span class=\\\"token punctuation\\\">:</span> center<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">align-items</span><span class=\\\"token punctuation\\\">:</span> center<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">z-index</span><span class=\\\"token punctuation\\\">:</span> 300<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n&lt;/style&gt;\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br></div></div><hr> <h3 id=\\\"_2-通过slot定制弹窗内容\\\"><a href=\\\"#_2-通过slot定制弹窗内容\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 通过<code>slot</code>定制弹窗内容</h3> <p>这一步，只要理解了<code>slot</code>的作用以及用法，就没有问题了。</p> <h4 id=\\\"单个插槽：\\\"><a href=\\\"#单个插槽：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 单个插槽：</h4> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是在没有slot传进来的时候，才显示的弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>上面是单个插槽也叫默认插槽，在父组件中使用插槽的正确姿势：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>my-component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token comment\\\">&lt;!--在my-component里面的所有内容片段都将插入到slot所在的DOM位置，并且会替换掉slot标签--&gt;</span>\\n  <span class=\\\"token comment\\\">&lt;!--这两个p标签，将替换整个slot标签里面的内容--&gt;</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是一些初始内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>这是更多的初始内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>my-component</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>ps:如果子组件里面包含<code>slot</code>插槽，那么上面的p标签的内容将会被丢弃。</p> <h4 id=\\\"具名插槽：\\\"><a href=\\\"#具名插槽：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 具名插槽：</h4> <p>所谓的具名插槽，即为<code>slot</code>标签赋一个<code>name</code>属性，具名插槽可以父组件中不同的内容片段放到子组件的不同地方，具名插槽还是可以拥有一个默认插槽。下面可以看一下弹窗组件插槽的使用方式：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_head back <span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token comment\\\">&lt;!--弹窗头部 title--&gt;</span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>提示信息<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_main <span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:</span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"><span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=&quot;</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">paddingTop</span><span class=\\\"token punctuation\\\">:</span>pdt+<span class=\\\"token string\\\">'px'</span>,<span class=\\\"token property\\\">paddingBottom</span><span class=\\\"token punctuation\\\">:</span>pdb+<span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n   <span class=\\\"token comment\\\">&lt;!--弹窗的内容--&gt;</span>\\n <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>弹窗内容<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>在父组件中的使用方式：</p> <ol><li>将弹窗组件引入要使用的组件中，并通过<code>components</code>注册成为组件。</li> <li>父组件中弹窗组件插槽的使用方法如下。</li></ol> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">slot</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>header<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>插入到name为header的slot标签里面<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>dialog_publish_main<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">slot</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>main<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        这里是内容插入到子组件的slot的name为main里面，可以在父组件中添加class定义样式，事件类型等各种操作\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>关于组件中用到的插槽的介绍就到这里了，插槽在弹窗组件中的应用是一个典型的栗子，可以看到插槽作用相当强大，而插槽本身的使用并不难，同学们爱上插槽了没有？</p> <hr> <h3 id=\\\"_3-通过props控制弹窗显隐-定制弹窗style\\\"><a href=\\\"#_3-通过props控制弹窗显隐-定制弹窗style\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.通过<code>props</code>控制弹窗显隐&amp;&amp;定制弹窗style</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<code>psops</code>是Vue中父组件向子组件传递数据的一种方式，不熟悉的小伙伴们可以看一下\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#Prop\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"props文档\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>因为弹窗组件都是引到别的组件里面去用的，为了适合不同组件场景中的弹窗，所以弹窗组件必须具备一定的可定制性，否则这样的组件将毫无意义,下面介绍一下props的使用方式，以弹窗组件为例：</p> <ol><li>首先需要在被传入的组件中定义props的一些特性，验证之类的。</li> <li>然后在父组件中绑定props数据。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>script<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    isShow<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token comment\\\">//弹窗组件是否显示 默认不显示</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Boolean<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n      required<span class=\\\"token punctuation\\\">:</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//必须</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">//下面这些属性会绑定到div上面 详情参照上面的html结构</span>\\n    <span class=\\\"token comment\\\">// 如： :style=&quot;{top:topDistance+'%',width:widNum+'%'}&quot;</span>\\n    widNum<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token comment\\\">//内容宽度</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">86.5</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    leftSite<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 左定位</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">6.5</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    topDistance<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//top上边距</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">35</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    pdt<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">//上padding</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">22</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    pdb<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">//下padding</span>\\n      type<span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">47</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>script<span class=\\\"token operator\\\">&gt;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br></div></div><p>父组件中使用方式：</p> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>dialogComponent</span> <span class=\\\"token attr-name\\\">:is-show</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>status.isShowPublish<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">:top-distance</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>status.topNum<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>dialogComponent</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p>ps：props传递数据不是双向绑定的，而是<strong>单向数据流</strong>，父组件的数据变化时，也会传递到子组件中，这就意外着我们不应该在子组件中修改props。所以我们在关闭弹窗的时候就<strong>需要通过<code>$emit</code>来修改父组件的数据</strong>，然后数据会自动传到子组件中。</p> <p>现在基本上弹窗组件都已实现的差不多了，还差一个弹窗的关闭事件，这里就涉及到子组件往父组件传参了。</p> <h3 id=\\\"_4-emit触发父组件事件修改数据，关闭弹窗\\\"><a href=\\\"#_4-emit触发父组件事件修改数据，关闭弹窗\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 4.<code>$emit</code>触发父组件事件修改数据，关闭弹窗</h3> <p>Vue中在子组件往父组件传参，很多都是通过<code>$emit</code>来触发父组件的事件来修改数据。</p> <p>在子组件中，在点击关闭，或者遮罩层的时候触发下面这个方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">closeMyself</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;on-close&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token comment\\\">//如果需要传参的话，可以在&quot;on-close&quot;后面再加参数，然后在父组件的函数里接收就可以了。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>父组件中的写法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>dialogComponent <span class=\\\"token punctuation\\\">:</span>is<span class=\\\"token operator\\\">-</span>show<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;status.isShowPublish&quot;</span> <span class=\\\"token punctuation\\\">:</span>top<span class=\\\"token operator\\\">-</span>distance<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;status.topNum&quot;</span>  @on<span class=\\\"token operator\\\">-</span>close<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;closeDialog&quot;</span><span class=\\\"token operator\\\">&gt;</span> \\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>dialogComponent<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">//&quot;on-close是监听子组件的时间有没有触发，触发的时候执行closeDialog函数</span>\\nmethods<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">closeDialog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this.status.isShowPublish=false;</span>\\n    <span class=\\\"token comment\\\">//把绑定的弹窗数组 设为false即可关闭弹窗</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><hr> <p>可以用弹窗组件实现下列这种信息展示，或者事件交互：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/21/162e7a7af2e0effa?w=402&h=728&f=png&s=140506\\\" alt></p> \"),_vm._ssrNode(\"<h3 id=\\\"弹窗组件代码\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#弹窗组件代码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"弹窗组件代码\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"上面是把弹窗的每个步骤拆分开来，一步步解析的，每一步都说的比较清楚了，具体连起来的话，可以看看\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/dialogComponent.vue\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码\"),_c('OutboundLink')],2),_vm._ssrNode(\"，再结合文章就能理的很清楚了。\")],2),_vm._ssrNode(\" <h2 id=\\\"小结：\\\"><a href=\\\"#小结：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结：</h2> <p>这个弹窗组件，实现起来一点都不难，我这里主要是提供了一个实现方式，当项目中有需要的话，大家也可以自己撸一个出来，以上就是本文的内容了，希望同学们看完能有所收获。</p> <p>以上2018.4.21</p> <h3 id=\\\"参考资料：\\\"><a href=\\\"#参考资料：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考资料：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E6%A7%BD%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue文档-插槽\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./弹窗.md?vue&type=template&id=de8c2448&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"cb670854\"\n  \n)\n\ncomponent.options.__file = \"弹窗.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "21.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/Vue/极简双向绑定.md?3529",
        "webpack:///./docs/accumulate/Vue/极简双向绑定.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,8oDAA8oD,iGAAiG,SAAS,4CAA4C,0CAA0C,2IAA2I,SAAS,0CAA0C,wOAAwO,WAAW,qFAAqF,w2BAAw2B,6IAA6I,kBAAkB,uIAAuI,gDAAgD,0NAA0N,oKAAoK,gDAAgD,4CAA4C,oFAAoF,4QAA4Q,sLAAsL,6UAA6U,mLAAmL,WAAW,0CAA0C,6QAA6Q,gTAAgT,wYAAwY,kGAAkG,k+GAAk+G,8KAA8K,kDAAkD,oDAAoD,8GAA8G,kLAAkL,mDAAmD,gLAAgL,mDAAmD,oDAAoD,8GAA8G,iLAAiL,mDAAmD,oDAAoD,wGAAwG,uDAAuD,8GAA8G,kLAAkL,mDAAmD,gLAAgL,wDAAwD,oDAAoD,8GAA8G,sDAAsD,gBAAgB,aAAa,0FAA0F,uDAAuD,8GAA8G,kLAAkL,mDAAmD,gLAAgL,wDAAwD,oDAAoD,8GAA8G,sDAAsD,gBAAgB,aAAa,0FAA0F,uDAAuD,0GAA0G,wDAAwD,k7BAAk7B,qQAAqQ,0RAA0R,ufAAuf,gDAAgD,sFAAsF,u/BAAu/B,0CAA0C,qFAAqF,gPAAgP,wcAAwc,oRAAoR,oOAAoO,0CAA0C,0CAA0C,+YAA+Y,0ZAA0Z,yGAAyG,0CAA0C,gvCAAgvC,gLAAgL,mOAAmO,kOAAkO,oOAAoO,qVAAqV,yFAAyF,0XAA0X,woBAAwoB,2GAA2G,oyCAAoyC,gLAAgL,uWAAuW,2CAA2C,2RAA2R,+PAA+P,0CAA0C,qOAAqO,+UAA+U,8XAA8X,8nBAA8nB,0UAA0U,uEAAuE,wJAAwJ,yEAAyE,uIAAuI,6GAA6G,4GAA4G,qOAAqO,+XAA+X,uEAAuE,uJAAuJ,0EAA0E,uIAAuI,+OAA+O,oHAAoH,0VAA0V,2CAA2C,iSAAiS,+FAA+F,uGAAuG,oFAAoF,4DAA4D,wDAAwD,oDAAoD,0FAA0F,oFAAoF,4CAA4C,k6DAAk6D,6TAA6T,ybAAyb,6CAA6C,8CAA8C,+HAA+H,oRAAoR,uRAAuR,6OAA6O,yGAAyG,8cAA8c,KAAK,0eAA0e,4cAA4c,qXAAqX,u/BAAu/B,2OAA2O,kYAAkY,wEAAwE,2EAA2E,wDAAwD,mNAAmN,oDAAoD,iZAAiZ,maAAma,y+BAAy+B,oJAAoJ,GAAG,QAAQ,aAAa,GAAG,4LAA4L,mDAAmD,gWAAgW,+dAA+d,2CAA2C,0TAA0T,uQAAuQ,oVAAoV,6SAA6S,4DAA4D,6zBAA6zB,0kBAA0kB,2CAA2C,uPAAuP,wHAAwH,iLAAiL,wDAAwD,oFAAoF,oDAAoD,gDAAgD,4CAA4C,q1EAAq1E,4nDAA4nD;AAC5t/C;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "21.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"仿vue极简双向绑定\\\"><a href=\\\"#仿vue极简双向绑定\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 仿Vue极简双向绑定</h2> <p>现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，<strong>接下来本文用160行代码带你实现一个极简的双向绑定机制</strong>。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <h2 id=\\\"效果gif：\\\"><a href=\\\"#效果gif：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 效果GIF：</h2> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl70vrkj3g30aw09iq3y.gif\\\" alt></p> <h2 id=\\\"demo地址：\\\"><a href=\\\"#demo地址：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> demo地址：</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>codepen:</strong>\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>Github:</strong>\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/simpleDemo/simpleDemo/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h2 id=\\\"了解object-defineproperty-：\\\"><a href=\\\"#了解object-defineproperty-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 了解Object.defineProperty()：</h2> <p>这个API是实现双向绑定的核心，最主要的作用是重写数据的<code>get</code>、<code>set</code>方法</p> <h3 id=\\\"使用方式：\\\"><a href=\\\"#使用方式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用方式：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    singer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;周杰伦&quot;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> default_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;青花瓷&quot;</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;music&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// value: '七里香', // 设置属性的值 下面设置了get set函数 所以这里不能设置</span>\\n    configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 是否可以删除属性 默认不能删除</span>\\n    <span class=\\\"token comment\\\">// writable: true,  // 是否可以修改对象 下面设置了get set函数 所以这里不能设置</span>\\n    enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// music是否可以被枚举 默认是不能被枚举(遍历)</span>\\n    <span class=\\\"token comment\\\">// ☆ get,set设置时不能设置writable和value，要一对一对设置，交叉设置/同时存在 就会报错</span>\\n    <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 获取obj.music的时候就会调用get方法</span>\\n    <span class=\\\"token comment\\\">// let default_value = &quot;强行设置get的返回值&quot;; // 打开注释 读取属性永远都是‘强行设置get的返回值’</span>\\n    <span class=\\\"token keyword\\\">return</span> default_value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 将修改的值重新赋给song</span>\\n    default_value <span class=\\\"token operator\\\">=</span> val<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\n<span class=\\\"token keyword\\\">delete</span> obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// configurable设为false 删除无效</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 青花瓷</span>\\nobj<span class=\\\"token punctuation\\\">.</span>music <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;听妈妈的话&quot;</span><span class=\\\"token punctuation\\\">;</span> \\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>music<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 听妈妈的话</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的</span>\\n    <span class=\\\"token comment\\\">// 需要设置enumerable为true才可以 否则只能拿到singer 属性</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// singer, music</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div><h3 id=\\\"示例demo：\\\"><a href=\\\"#示例demo：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 示例demo：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"对，这里有个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/XYYMMp?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"画一下重点：\\\"><a href=\\\"#画一下重点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 画一下重点：</h3> <ul><li>get,set设置时不能设置writable和value, 他们是一对情侣的存在，<strong>交叉设置或同时存在,会报错</strong></li> <li>通过<code>defineProperty</code>设置的属性，<strong>默认不能删除，不能遍历</strong>，当然你可以通过设置更改他们。</li> <li><strong>get、set 是函数，可以做的事情很多</strong>。</li></ul> <p><strong>兼容性</strong>：IE 9,Firefox 4, Chorme 5,Opera 11.6,Safari 5.1</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的可以看一下\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h2 id=\\\"实现思路：\\\"><a href=\\\"#实现思路：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现思路：</h2> <h3 id=\\\"mvvm系列的双向绑定，关键步骤：\\\"><a href=\\\"#mvvm系列的双向绑定，关键步骤：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> mvvm系列的双向绑定，关键步骤：</h3> <ol><li>实现数据监听器Observer，用<code>Object.defineProperty()</code><strong>重写数据的get、set，值更新就在set中通知订阅者更新数据</strong>。</li> <li>实现模板编译Compile，深度遍历dom树，对每个元素节点的指令模板进行<strong>替换数据以及订阅数据</strong>。</li> <li>实现Watch用于连接Observer和Compile，<strong>能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</strong>。</li> <li>mvvm入口函数，整合以上三者。</li></ol> <h3 id=\\\"流程图：\\\"><a href=\\\"#流程图：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 流程图：</h3> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fsl7dygfovj30ka0augpd.jpg\\\" alt></p> <p>这部分讲的很清楚，现在有点懵逼也没关系，看完代码，自己copy下来玩一玩之后，回头再看实现思路，相信会有收获的。</p> <hr> <h2 id=\\\"具体代码实现：\\\"><a href=\\\"#具体代码实现：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 具体代码实现：</h2> <h3 id=\\\"html结构：\\\"><a href=\\\"#html结构：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> html结构：</h3> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>app<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>name<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span> <span class=\\\"token attr-name\\\">v-bind</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>name<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>testData1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>{{ testData1 }}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>text<span class=\\\"token punctuation\\\">&quot;</span></span> <span class=\\\"token attr-name\\\">v-model</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>testData2<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>{{ testData2 }}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h3</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>看到这个模板，相信用过Vue的同学都不会陌生。</p> <h3 id=\\\"调用方法：\\\"><a href=\\\"#调用方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 调用方法：</h3> <p>采用类Vue方式来使用双向绑定：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">myVue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        el<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#app'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// dom</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 数据</span>\\n            testData1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'仿Vue'</span><span class=\\\"token punctuation\\\">,</span>\\n            testData2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'极简双向绑定'</span><span class=\\\"token punctuation\\\">,</span>\\n            name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OBKoro1'</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"创建myvue函数：\\\"><a href=\\\"#创建myvue函数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 创建myVue函数：</h3> <p>实际上这里是我们实现思路中的第四步，用于整合数据监听器<code>this._observer()</code>、指令解析器<code>this._compile()</code>以及连接Observer和Compile的_watcherTpl的watch池。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">myVue</span><span class=\\\"token punctuation\\\">(</span>options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 防止没传，设一个默认值</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$options <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 配置挂载</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取dom</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_data <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数据挂载</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_watcherTpl <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// watcher池</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_observer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传入数据，执行函数，重写数据的get set</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_compile</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传入dom，执行函数，编译模板 发布订阅</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><hr> <h3 id=\\\"watcher函数\\\"><a href=\\\"#watcher函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Watcher函数:</h3> <p>这是实现思路中的第三步，因为下方数据监听器<code>_observer()</code>需要用到Watcher函数，所以这里就先讲了。</p> <p>像实现思路中所说的，这里起到了连接Observer和Compile的作用：</p> <ol><li><strong>在模板编译_compile()阶段发布订阅</strong></li> <li><strong>在赋值操作的时候，更新视图</strong></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// new Watcher() 为this._compile()发布订阅+ 在this._observer()中set(赋值)的时候更新视图</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>el<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">,</span> attr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>el <span class=\\\"token operator\\\">=</span> el<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指令对应的DOM元素</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>vm <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// myVue实例</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> val<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 指令对应的值 </span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>attr <span class=\\\"token operator\\\">=</span> attr<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// dom获取值，如value获取input的值 / innerHTML获取dom的值</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 更新视图</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nWatcher<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">update</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>el<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>attr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>vm<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取data的最新值 赋值给dom 更新视图</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>没有看错，代码量就这么多，可能需要把整个代码连接起来，多看几遍才能够理解。</p> <h3 id=\\\"实现数据监听器-observer-：\\\"><a href=\\\"#实现数据监听器-observer-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现数据监听器_observer()：</h3> <p>实现思路中的第一步，用<code>Object.defineProperty()</code>遍历data重写所有属性的get set。</p> <p>然后在给对象的某个属性赋值的时候，就会触发set。</p> <p><strong>在set中我们可以监听到数据的变化，然后就可以触发watch更新视图</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myVue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_observer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历数据</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 每个数据的订阅池()</span>\\n            _directives<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取属性值</span>\\n        <span class=\\\"token keyword\\\">var</span> watcherTpl <span class=\\\"token operator\\\">=</span> _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数据的订阅池</span>\\n        Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 双向绑定最重要的部分 重写数据的set get</span>\\n            configurable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// 可以删除</span>\\n            enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 可以遍历</span>\\n            <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">获取值：</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>value<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取值的时候 直接返回</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 改变值的时候 触发set</span>\\n                console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>key<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">更新：</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">!==</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    value <span class=\\\"token operator\\\">=</span> newVal<span class=\\\"token punctuation\\\">;</span>\\n                    watcherTpl<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历订阅池 </span>\\n                        item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token comment\\\">// 遍历所有订阅的地方(v-model+v-bind+{{}}) 触发this._compile()中发布的订阅Watcher 更新视图  </span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br></div></div><h3 id=\\\"实现compile-模板编译\\\"><a href=\\\"#实现compile-模板编译\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现Compile 模板编译</h3> <p>这里是实现思路中的第三步，让我们来总结一下这里做了哪些事情：</p> <ul><li>首先是深度遍历dom树，遍历每个节点以及子节点。</li> <li>将模板中的变量替换成数据，初始化渲染页面视图。</li> <li>把指令绑定的属性添加到对应的订阅池中</li> <li>一旦数据有变动，收到通知，更新视图。</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myVue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_compile</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>el<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> nodes <span class=\\\"token operator\\\">=</span> el<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取app的dom</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历dom节点</span>\\n        <span class=\\\"token keyword\\\">var</span> node <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            _this<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_compile</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 递归深度遍历 dom树</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件    </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-model'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>tagName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'INPUT'</span> <span class=\\\"token operator\\\">||</span> node<span class=\\\"token punctuation\\\">.</span>tagName <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'TEXTAREA'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">var</span> attVal <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-model'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取v-model绑定的值</span>\\n                _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>attVal<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\\\"token punctuation\\\">,</span>\\n                    _this<span class=\\\"token punctuation\\\">,</span>\\n                    attVal<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">'value'</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                    _this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span>attVal<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> nodes<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// input值改变的时候 将新值赋给数据 触发set=&gt;set触发watch 更新视图</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-bind'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// v-bind指令 </span>\\n            <span class=\\\"token keyword\\\">var</span> attrVal <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'v-bind'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 绑定的data</span>\\n            _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">[</span>attrVal<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                node<span class=\\\"token punctuation\\\">,</span>\\n                _this<span class=\\\"token punctuation\\\">,</span>\\n                attrVal<span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token string\\\">'innerHTML'</span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n            \\n        <span class=\\\"token keyword\\\">var</span> reg <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/\\\\{\\\\{\\\\s*([^}]+\\\\S)\\\\s*\\\\}\\\\}/g</span><span class=\\\"token punctuation\\\">,</span> txt <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>textContent<span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 正则匹配{{}} </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>textContent <span class=\\\"token operator\\\">=</span> txt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>matched<span class=\\\"token punctuation\\\">,</span> placeholder<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token comment\\\">// matched匹配的文本节点包括双花括号, placeholder 是双花括号中间的属性名</span>\\n                <span class=\\\"token keyword\\\">var</span> getName <span class=\\\"token operator\\\">=</span> _this<span class=\\\"token punctuation\\\">.</span>_watcherTpl<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 所有绑定watch的数据</span>\\n                getName <span class=\\\"token operator\\\">=</span> getName<span class=\\\"token punctuation\\\">[</span>placeholder<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 获取对应watch 数据的值</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>getName<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 没有事件池 创建事件池</span>\\n                    getName<span class=\\\"token punctuation\\\">.</span>_directives <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n                getName<span class=\\\"token punctuation\\\">.</span>_directives<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token comment\\\">// 将dom替换成属性的数据并发布订阅 在set的时候更新数据</span>\\n                    node<span class=\\\"token punctuation\\\">,</span>\\n                    _this<span class=\\\"token punctuation\\\">,</span>\\n                    placeholder<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token string\\\">'innerHTML'</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span> placeholder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">return</span> _this<span class=\\\"token punctuation\\\">.</span>_data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取数据的值 触发get 返回当前值 </span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> _this<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br><span class=\\\"line-number\\\">41</span><br><span class=\\\"line-number\\\">42</span><br><span class=\\\"line-number\\\">43</span><br><span class=\\\"line-number\\\">44</span><br><span class=\\\"line-number\\\">45</span><br><span class=\\\"line-number\\\">46</span><br><span class=\\\"line-number\\\">47</span><br><span class=\\\"line-number\\\">48</span><br><span class=\\\"line-number\\\">49</span><br><span class=\\\"line-number\\\">50</span><br><span class=\\\"line-number\\\">51</span><br><span class=\\\"line-number\\\">52</span><br><span class=\\\"line-number\\\">53</span><br><span class=\\\"line-number\\\">54</span><br></div></div><hr> <h2 id=\\\"完整代码-demo地址\\\"><a href=\\\"#完整代码-demo地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 完整代码&amp;demo地址</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"GitHub完整代码\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>codepen:</strong>\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/qKKqQe?editors=0010\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>Github:</strong>\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/myVue/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"仿Vue极简双向绑定\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果觉得还不错的话，就给个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/simpleDemo\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"⭐️鼓励一下我吧~\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>本文只是一个简单的实现双向绑定的方法，主要目的是帮助各位同学理解mvvm框架的双向绑定机制，也并没有很完善，这里还是有很多缺陷，比如：没有实现数据的深度对数据进行<code>get</code>、<code>set</code>等。希望看完本文，大家能有所收获。</p> <p>以上2018.6.24</p> <h3 id=\\\"参考资料：\\\"><a href=\\\"#参考资料：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考资料：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000006599500\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"剖析Vue原理&amp;实现双向绑定MVVM\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5acc17cb51882555745a03f8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"面试题：你能写一个Vue的双向数据绑定吗？\"),_c('OutboundLink')],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5abdd6f6f265da23793c4458#heading-8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"不好意思！耽误你的十分钟，让MVVM原理还给你\"),_c('OutboundLink')],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./极简双向绑定.md?vue&type=template&id=23f5d558&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"26ba9f32\"\n  \n)\n\ncomponent.options.__file = \"极简双向绑定.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "22.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/amateur/VsCode文件头部注释生成.md?7698",
        "webpack:///./docs/accumulate/amateur/VsCode文件头部注释生成.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,4uCAA4uC,2BAA2B,GAAG,cAAc,YAAY,QAAQ,aAAa,eAAe,UAAU,QAAQ,iBAAiB,eAAe,iBAAiB,QAAQ,aAAa,eAAe,kBAAkB,QAAQ,iBAAiB,eAAe,iBAAiB,QAAQ,MAAM,MAAM;AAC9oD;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8F",
      "file": "22.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"vscode文件头部注释生成\\\"><a href=\\\"#vscode文件头部注释生成\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> VsCode文件头部注释生成</h2> <h2 id=\\\"language\\\"><a href=\\\"#language\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> language</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/koro1FileHeader/blob/master/README.md\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"English\"),_c('OutboundLink')],2),_vm._ssrNode(\" | 简体中文\")],2),_vm._ssrNode(\" <h2 id=\\\"简介\\\"><a href=\\\"#简介\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 简介</h2> <ul><li>vscode扩展插件</li> <li>在文件头中添加注释</li> <li>支持用户自定义文件注释模板对象</li> <li>在你保存文件的时候 自动更新编辑时间</li></ul> <h2 id=\\\"安装\\\"><a href=\\\"#安装\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 安装</h2> <p>在 Vscode 扩展商店中搜索 <code>koroFileHeader</code></p> <h2 id=\\\"使用\\\"><a href=\\\"#使用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用</h2> <ol><li>在 Vscode 中打开文件</li> <li>按 <code>ctrl+alt+i</code></li></ol> <p>成功在文件头部插入文件注释</p> <h2 id=\\\"注释模板\\\"><a href=\\\"#注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注释模板</h2> <h3 id=\\\"默认注释模板\\\"><a href=\\\"#默认注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 默认注释模板</h3> <ul><li><p>默认配置:</p> <pre><code>  &quot;fileheader.customMade&quot;: {\\n      &quot;Author&quot;: &quot;OBKoro1&quot;,\\n      &quot;Date&quot;: &quot;Do not edit&quot;,\\n      &quot;LastEditors&quot;: &quot;OBKoro1&quot;,\\n      &quot;LastEditTime&quot;: &quot;Do not edit&quot;,\\n      &quot;Description&quot;: &quot;&quot;,\\n  }\\n</code></pre></li> <li><p>文件注释生成:</p> <pre><code>  /*\\n   * @Author:OBKoro1\\n   * @Date:2018-05-15 16:20:04\\n   * @LastEditors:OBKoro1\\n   * @LastEditTime:2018-05-15 16:20:04\\n   * @Description:\\n   */\\n</code></pre></li></ul> <h3 id=\\\"推荐模板参数\\\"><a href=\\\"#推荐模板参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 推荐模板参数</h3> <p><code>Email</code>、<code>Company</code>、<code>version</code>等.</p> <h3 id=\\\"自定义注释模板\\\"><a href=\\\"#自定义注释模板\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 自定义注释模板</h3> <ol><li>在 VsCode 设置中搜索<code>fileheader.customMade</code></li> <li>复制默认配置+修改配置</li> <li>重启 VsCode 生效</li></ol> <h4 id=\\\"example\\\"><a href=\\\"#example\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Example</h4> <ul><li>设置：</li></ul> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/18/16370e8435d1cbd3?w=865&h=288&f=jpeg&s=161453\\\" alt></p> <ul><li><p>文件注释生成:</p> <pre><code>  /*\\n   * @Author: OBKoro1\\n   * @Date: 2018-05-16 12:33:57\\n   * @LastEditors: OBKoro1\\n   * @LastEditTime: 2018-05-16 12:33:57\\n   * @Description: \\n   * @Email: your Email\\n   * @Company: your company\\n   * @youWant: add you want\\n   */\\n</code></pre></li></ul> <h2 id=\\\"自动更新编辑时间-示例\\\"><a href=\\\"#自动更新编辑时间-示例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 自动更新编辑时间 示例:</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/18/16370e8435ed4d71?w=413&h=270&f=gif&s=49647\\\" alt></p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./VsCode文件头部注释生成.md?vue&type=template&id=d930bc64&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"c4520fde\"\n  \n)\n\ncomponent.options.__file = \"VsCode文件头部注释生成.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "23.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/amateur/推箱子.md?af0a",
        "webpack:///./docs/accumulate/amateur/推箱子.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,q2DAAq2D,4QAA4Q,iWAAiW,ghBAAghB,4CAA4C,oFAAoF,oWAAoW,qfAAqf,msBAAmsB,gDAAgD,4CAA4C,oFAAoF,sbAAsb,YAAY,oFAAoF,6FAA6F,moTAAmoT,mLAAmL,kLAAkL,2mBAA2mB,2IAA2I,yfAAyf,8FAA8F,kkBAAkkB,8FAA8F,2hBAA2hB,8FAA8F,gDAAgD,wQAAwQ,+FAA+F,oFAAoF,wgDAAwgD,2hBAA2hB,mZAAmZ,ieAAie,ybAAyb,KAAK,+oBAA+oB,gcAAgc,YAAY,oFAAoF,6OAA6O,YAAY,oFAAoF,wMAAwM,kGAAkG,+dAA+d,KAAK,oYAAoY,KAAK,+oBAA+oB,8cAA8c,8OAA8O,YAAY,oFAAoF,gUAAgU,+OAA+O,YAAY,sNAAsN,WAAW,oFAAoF,8QAA8Q,mGAAmG,4CAA4C,m7CAAm7C,gQAAgQ,kBAAkB,2NAA2N,oMAAoM,0HAA0H,6IAA6I,yBAAyB,oFAAoF,qGAAqG,kPAAkP,wMAAwM,wLAAwL,oDAAoD,oFAAoF,6IAA6I,iBAAiB,oFAAoF,oDAAoD,gDAAgD,4CAA4C;AACn79B;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "23.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"推箱子\\\"><a href=\\\"#推箱子\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 推箱子</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/1/7/160d0a90689f2101?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1\\\" alt=\\\"demo图片\\\"></p> \"),_vm._ssrNode(\"<h3 id=\\\"demo：推箱子小游戏\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#demo：推箱子小游戏\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> demo：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"推箱子小游戏\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h2 id=\\\"步骤解析：\\\"><a href=\\\"#步骤解析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 步骤解析：</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>\",\"</strong>\",[_vm._ssrNode(\"本文代码已经放在了\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github\"),_c('OutboundLink')],2),_vm._ssrNode(\"上面了,里面也进行了很详细的代码注释，可以copy下来，在本地运行一下看看\")],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <h3 id=\\\"_1-渲染地图\\\"><a href=\\\"#_1-渲染地图\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 渲染地图</h3> <ol><li><p>html结构：\\n<img src=\\\"https://user-gold-cdn.xitu.io/2018/1/7/160d1149856a3714?w=503&h=727&f=png&s=48024\\\" alt></p> <pre><code> html结构十分简单，只要弄一堆div，来放置地图的class就可以了，我这里初始化了12*9个div，地图里最多九行高度。   \\n 这些div都是同样大小，地图渲染出来区别的只是颜色的不同。\\n</code></pre></li> <li><p>地图函数：</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> box<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.box div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//地图使用的div集合</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//创建地图函数</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//index的数量是固定的，是box div下面div的数量</span>\\n        <span class=\\\"token comment\\\">// 每次创建地图初始化div</span>\\n    box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">each</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span>element<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//循环整个div的数量 二维数组里数量不够的 默认为空白</span>\\n<span class=\\\"token comment\\\">//level为关卡数 根据关卡渲染地图 builder为二维数组，为地图关卡</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>builder<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//过滤0</span>\\n        box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type'</span><span class=\\\"token operator\\\">+</span>builder<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>origin<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//推箱人 皮卡丘位置</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//第一关的地图长这样（下面只是栗子，不是代码），0代表不可抵达区域，1代表目标（要被推到的地方），</span>\\n<span class=\\\"token comment\\\">//2代表普通路径（可以走的），3代表墙，4代表箱子</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br></div></div><h3 id=\\\"_2-捕获键盘事件-判断是否可以移动\\\"><a href=\\\"#_2-捕获键盘事件-判断是否可以移动\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2. 捕获键盘事件,判断是否可以移动</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"使用\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/jquery/event_keydown.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"$(document).keydown()\"),_c('OutboundLink')],2),_vm._ssrNode(\"jqery事件，捕获键盘事件。\")],2),_vm._ssrNode(\" <ol><li>捕获键盘事件，上下左右以及wsad。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keydown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> key<span class=\\\"token operator\\\">=</span>e<span class=\\\"token punctuation\\\">.</span>which<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//col 的值为12，上下移动要12个div为一个周期</span>\\n        <span class=\\\"token comment\\\">//方向键上或者w</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">87</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">38</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span>col<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//判断移动函数</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键下或者s</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">83</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">40</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span>col<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键左或者a</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">65</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">37</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//方向键右或者d</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">68</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token number\\\">39</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>win<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//按键之后调判断是否过关</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br></div></div><ol start=\\\"2\\\"><li>判断是否可以移动。</li></ol> <p>分为两个判断条件：一个是推箱子，一个是不推箱子 自然移动，否则不移动皮卡丘。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">move</span><span class=\\\"token punctuation\\\">(</span>step<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//是否移动判断</span>\\n        <span class=\\\"token comment\\\">// 分为两个判断条件一个是推箱子，一个是不推箱子 自然移动。 否则不移动皮卡丘</span>\\n        <span class=\\\"token comment\\\">//step 上下是12个div一个周期，左右是1个div positin是皮卡丘的原来位置</span>\\n    <span class=\\\"token keyword\\\">var</span> pikaqiu1<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//皮卡丘现在的地方</span>\\n    <span class=\\\"token keyword\\\">var</span> pikaqiu2<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//皮卡丘要去的下一个地方</span>\\n    <span class=\\\"token keyword\\\">var</span> pushBox<span class=\\\"token operator\\\">=</span>box<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//箱子要去的下一个地方</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span> pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">||</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//自然移动</span>\\n        <span class=\\\"token comment\\\">//判断：如果下一个div的class不包含type4(箱子)，并且 下一个div含有type1(目标位置)，或者type2(普通路径)</span>\\n        <span class=\\\"token comment\\\">//这一步和下一步判断是否有type4的原因是普通路径会变成有type4的路径，这时候就会出现问题</span>\\n        pikaqiu1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//移除当前皮卡丘</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移动皮卡丘到下一个位置</span>\\n        position<span class=\\\"token operator\\\">=</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//增加position值</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span><span class=\\\"token punctuation\\\">(</span>pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">||</span> pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//推箱子    </span>\\n        <span class=\\\"token comment\\\">//如果下一个div的class包含type4(箱子)并且 不包含重叠type4(箱子) 并且 包含class type1（目标位置）或者 包含type2(空路)</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移除当前箱子</span>\\n        pikaqiu1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移除当前皮卡丘</span>\\n        pushBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'type4'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//移动箱子到下一个位置</span>\\n        pikaqiu2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;pusher&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;type2&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//</span>\\n        <span class=\\\"token comment\\\">//本来是type4 移除之后，这里没有class了，要变成普通路径</span>\\n        position<span class=\\\"token operator\\\">=</span>position<span class=\\\"token operator\\\">+</span>step<span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//增加position值 </span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><h3 id=\\\"_3-胜利判断：\\\"><a href=\\\"#_3-胜利判断：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.胜利判断：</h3> <p>每次移动都要调用这个胜利判断。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">win</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//胜利条件判断</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;.type1.type4&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span>goal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//推的箱子与关卡设置通过箱子的数量对比</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>level<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;666，挑战下一关吧--OBKoro1&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            level<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//关卡+1</span>\\n            goal <span class=\\\"token operator\\\">=</span> goalList<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            position <span class=\\\"token operator\\\">=</span> origin<span class=\\\"token punctuation\\\">[</span>level<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;厉害啊 大佬 通关了都&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div>\"),_vm._ssrNode(\"<h3 id=\\\"代码地址、demo地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址、demo地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/web_accumulate/blob/d6b599ca22d8656d3f31f80bffa976fac36d2d75/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/web_accumulate/example/pushKoro/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>以上2018.1.7</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./推箱子.md?vue&type=template&id=7a749353&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1bd2f152\"\n  \n)\n\ncomponent.options.__file = \"推箱子.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "24.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/input的一些坑点分享.md?258a",
        "webpack:///./docs/accumulate/effect/input的一些坑点分享.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,umEAAumE,4yCAA4yC,qRAAqR,aAAa,oFAAoF,4NAA4N,cAAc,oFAAoF,wLAAwL,gDAAgD,mFAAmF,4LAA4L,gDAAgD,4CAA4C,mqHAAmqH,quBAAquB,0LAA0L,kDAAkD,oDAAoD,4iBAA4iB,gGAAgG,uBAAuB,sFAAsF,UAAU,kFAAkF,0CAA0C,kOAAkO,kJAAkJ,gTAAgT,6KAA6K,4CAA4C,8gCAA8gC,0LAA0L,0DAA0D,oDAAoD;AACp/Y;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6F",
      "file": "24.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"input-的一些坑点分享\\\"><a href=\\\"#input-的一些坑点分享\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> input 的一些坑点分享</h2> <h2 id=\\\"本文内容包括：\\\"><a href=\\\"#本文内容包括：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 本文内容包括：</h2> <ol><li>移动端底部 input 被弹出的键盘遮挡。</li> <li>控制 input 显/隐密码。</li> <li>在 input 中输入 emoji 表情导致请求失败。</li> <li>input 多行输入显示换行。</li> <li>输入框首尾清除空格-trim()</li> <li>在 input 中监听键盘事件</li></ol> <hr> <h3 id=\\\"移动端底部-input-被弹出的键盘遮挡\\\"><a href=\\\"#移动端底部-input-被弹出的键盘遮挡\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 移动端底部 input 被弹出的键盘遮挡</h3> <p>input 输入框是通过<code>position:fixed</code>一直放在页面底部，当点击 input 进行输入的时候，就会出现如下图片情况（有的机型会遮挡一些）。</p> <p>当时这个问题是去年在 ios 中遇到的，在最新版的 ios 系统中，貌似解决了这个 bug，但是为了向下兼容以及防止其他其他机型也出现这个问题，大家可以稍微记一下这个解决方法。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/16353072dcc21218?w=586&h=1038&f=jpeg&s=48097\\\" alt></p> <p>在解决这个问题的时候，有试过下面这种方法:</p> <p><s>在 input 的 focus 事件中，开启一个定时器，然后每隔 300 毫秒进行一次 document.body.scrollTop=document.body.scrollHeight 的调整，运行 3 次即可。</s></p> <p>当时还以为解决了，但是当你底部评论区还有很多内容，你每次点击 input，想要输入的时候，整个页面通过<code>scrollTop</code>就会不断的向下滚动，这个体验不用说自己也知道是相当失败的，然后就再去找解决方法，结果就有了下面这个。</p> <h4 id=\\\"element-scrollintoview\\\"><a href=\\\"#element-scrollintoview\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Element.scrollIntoView()</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Element.scrollIntoView()\"),_c('OutboundLink')],2),_vm._ssrNode(\":方法<strong>让当前的元素滚动到浏览器窗口的可视区域内</strong>。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#inputId'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">scrollIntoView</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//只要在input的点击事件，或者获取焦点的事件中，加入这个api就好了</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这个 api 还可以设置对齐方法，选择将 input 放在屏幕的上方/下方，类似的 api 还有:\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Element.scrollIntoViewIfNeeded()\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这两个是解决同一个问题的，选择一个用就可以了。\")],2),_vm._ssrNode(\" <hr> <h3 id=\\\"控制-input-显-隐密码\\\"><a href=\\\"#控制-input-显-隐密码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 控制 input 显/隐密码</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这个就很简单了，只需更改 input 的 type 属性值就可以了。可以看一下 codepen 的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/VxxgyG\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//点击函数，获取dom，判断更改属性。</span>\\n<span class=\\\"token function\\\">show</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> input<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;inputId&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">==</span><span class=\\\"token string\\\">&quot;password&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'password'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><hr> <h3 id=\\\"在-input-中输入-emoji-表情导致请求失败\\\"><a href=\\\"#在-input-中输入-emoji-表情导致请求失败\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在 input 中输入 emoji 表情导致请求失败</h3> <p>现在用户输入 emoji 简直已经成为了习惯，如果前后端没有对 emoji 表情进行处理，那么用户在上传的时候，就会请求失败。</p> <p><strong>通常这个问题是后端那边处理比较合适的</strong>，前端是做不了这件事的，或者说很难做这件事。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"之前看过一篇\"),_vm._ssrNode(\"<a href=\\\"https://www.bbsmax.com/A/nAJvkxjY5r/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这个文章里面讲了怎么在上传和拿数据下来的时候不会报错，但是不能在显示的时候转换为表情。\")],2),_vm._ssrNode(\" <p>ps:之前拿微信用户名的时候，有些人可能在微信昵称上面就会包含表情，<strong>如果后端没对表情处理转换，那么普通请求也会出错</strong>。</p> <p>之所以说这个，当表单请求错误的时候各位如果实在找不到问题可以往这方面考虑一下，我真的被坑过的 o(╥﹏╥)o。</p> <hr> <h3 id=\\\"textarea-多行回车换行，显示的时候换行设置：\\\"><a href=\\\"#textarea-多行回车换行，显示的时候换行设置：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> textarea 多行回车换行，显示的时候换行设置：</h3> <p>在使用<code>textarea</code>标签输入多行文本的时候，如果没有对多行文本显示处理，会导致没有换行的情况,就比如下面这种情况，用户在<code>textarea</code>是有换行的。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/1635388bf4dca899?w=420&h=531&f=jpeg&s=223202\\\" alt></p> \"),_vm._ssrNode(\"<h4 id=\\\"css-属性-white-space\\\">\",\"</h4>\",[_vm._ssrNode(\"<a href=\\\"#css-属性-white-space\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Css 属性:\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"white-space\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>white-space 属性用于设置如何处理元素内的空白，其中包括空白符和换行符。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/12/16353927aec80539?w=613&h=240&f=jpeg&s=103831\\\" alt></p> <p>只要在<strong>显示内容的地方将该属性设置为<code>white-space: pre-line</code>或者<code>white-space:pre-wrap</code>，多行文本就可以换行了</strong>。</p> <h4 id=\\\"设置之后，显示效果：\\\"><a href=\\\"#设置之后，显示效果：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置之后，显示效果：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/5/14/1635d9d75136f6d8?w=419&h=506&f=png&s=128663\\\" alt></p> <hr> <h3 id=\\\"输入框首尾清除空格-trim\\\"><a href=\\\"#输入框首尾清除空格-trim\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输入框首尾清除空格-trim()</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"输入框清除首尾空格是 input 较为常见的需求，通常在上传的时候将首尾空格去除掉。一般使用:字符串的原生方法\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"trim()\"),_c('OutboundLink')],2),_vm._ssrNode(\" 从一个字符串的两端删除空白字符。\")],2),_vm._ssrNode(\" <p>trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p> <h4 id=\\\"原生清除方法\\\"><a href=\\\"#原生清除方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原生清除方法:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//原生方法获取值，清除首尾空格上传str2</span>\\n<span class=\\\"token keyword\\\">let</span> str2 <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputId'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h4 id=\\\"vue-清除方法：\\\"><a href=\\\"#vue-清除方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 清除方法：</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Vue 提供了\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/forms.html#trim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"修饰符\"),_c('OutboundLink')],2),_vm._ssrNode(\"删除首尾空格， 加了修饰符<code>.trim</code>会自动过滤用户输入的首尾空白字符\")],2),_vm._ssrNode(\" <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">v-model.trim</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>msg<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>貌似 angular 也提供了类似过滤的方法，感兴趣的可以自己去查一下。</p> <hr> <h3 id=\\\"在-input-中监听键盘事件\\\"><a href=\\\"#在-input-中监听键盘事件\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在 input 中监听键盘事件</h3> <p>在用户登录或者搜索框的时候，一般都会监听键盘事件绑定回车按键，来执行登录/搜索 等操作。</p> <h4 id=\\\"原生绑定\\\"><a href=\\\"#原生绑定\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 原生绑定:</h4> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token operator\\\">&lt;</span>input onkeydown<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;keydownMsg(event)&quot;</span> type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;text&quot;</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">keydownMsg</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  keyCode <span class=\\\"token operator\\\">=</span> key<span class=\\\"token punctuation\\\">.</span>keyCode<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取按键代码</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>keyCode <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//判断按下的是否为回车键</span>\\n    <span class=\\\"token comment\\\">// 在input上监听到回车 do something</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h4 id=\\\"vue-按键修饰符\\\"><a href=\\\"#vue-按键修饰符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vue 按键修饰符</h4> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Vue 为监听键盘事件，提供了\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"按键修饰符\"),_c('OutboundLink')],2),_vm._ssrNode(\"，并且为常用的按键提供了别名，使用方法如下:当回车按键在 input 中被按下的时候，会触发里面的函数。\")],2),_vm._ssrNode(\" <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">@keyup.enter</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>enterActive<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./input的一些坑点分享.md?vue&type=template&id=f99d5964&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ac6784d\"\n  \n)\n\ncomponent.options.__file = \"input的一些坑点分享.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "25.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/判断用户浏览器.md?3537",
        "webpack:///./docs/accumulate/effect/判断用户浏览器.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,wgCAAwgC,+XAA+X,wxBAAwxB,qaAAqa,kKAAkK,6RAA6R,4CAA4C,iWAAiW,kKAAkK,wRAAwR,4CAA4C,yVAAyV,kKAAkK,iSAAiS,4CAA4C;AAC9zJ;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "25.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"判断用户浏览器\\\"><a href=\\\"#判断用户浏览器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断用户浏览器</h1> <h3 id=\\\"navigator-useragent\\\"><a href=\\\"#navigator-useragent\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> navigator.userAgent</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"判断用户所使用的浏览器主要用到的 api 是\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/htmldom/prop_nav_useragent.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"navigator.userAgent\"),_c('OutboundLink')],2),_vm._ssrNode(\"，这是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值，<strong>不同浏览器的<code>userAgent</code>值都不相同，所以我们可以根据这个字符串来判断用户是从哪个浏览器进入</strong>。\")],2),_vm._ssrNode(\" <h3 id=\\\"判断方式：\\\"><a href=\\\"#判断方式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断方式：</h3> <p>下面两个是刚做的 demo 获取的值，仔细观察下面两个字符串，会发现有些值是不一样的，并且浏览器特有的，依据这个我们就可以作为不同浏览器的判断条件。</p> <h4 id=\\\"qq-内置浏览器的-useragent-值：\\\"><a href=\\\"#qq-内置浏览器的-useragent-值：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> QQ 内置浏览器的 userAgent 值：</h4> <p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 qq/7.5.8.422 v1_iph_sq_7.5.8_1_app_a pixel/1080 core/uiwebview device/apple(iphone 8plus) nettype/wifi qbwebviewtype/1</p> <h4 id=\\\"微信内置浏览器的-useragent-值：\\\"><a href=\\\"#微信内置浏览器的-useragent-值：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 微信内置浏览器的 userAgent 值：</h4> <p>mozilla/5.0 (iphone; cpu iphone os 11_1_2 like mac os x) applewebkit/604.3.5 (khtml, like gecko) mobile/15b202 micromessenger/6.6.6 nettype/wifi language/zh_cn</p> <h3 id=\\\"示例-判断qq和微信内置浏览器\\\"><a href=\\\"#示例-判断qq和微信内置浏览器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 示例:判断QQ和微信内置浏览器</h3> <p>使用方式，直接使用这个 api 读取值，然后<strong>根据事先观察<code>userAgent</code>字符串的不同之处</strong>来判断：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> url <span class=\\\"token operator\\\">=</span> navigator<span class=\\\"token punctuation\\\">.</span>userAgent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//使用toLowerCase将字符串全部转为小写 方便我们判断使用</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'15b202 qq'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//单独判断QQ内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'QQ APP 内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'micromessenger'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//单独判断微信内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'微信内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'15b202'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//判断微信内置浏览器，QQ内置浏览器</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'QQ和微信内置浏览器，做你想做的操作'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><p>上面判断了微信和 QQ 的内置浏览器，如果有更多不同的需求的话，可以按照上面的方式，先获取<code>userAgent</code>的字符串，然后再根据观察，使用<code>indexOf</code>判断是否含有指定的字符，来对不同浏览器进行不同的操作。</p> <p>以上2018.5.5</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./判断用户浏览器.md?vue&type=template&id=712216be&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"501c5c84\"\n  \n)\n\ncomponent.options.__file = \"判断用户浏览器.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "26.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/前端弹幕效果实现思路.md?915c",
        "webpack:///./docs/accumulate/effect/前端弹幕效果实现思路.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,mgDAAmgD,iLAAiL,wDAAwD,oDAAoD,8GAA8G,+KAA+K,kDAAkD,qDAAqD,8GAA8G,8KAA8K,yDAAyD,oDAAoD,kHAAkH,8KAA8K,4DAA4D,oDAAoD,wGAAwG,wDAAwD,kHAAkH,8KAA8K,4DAA4D,oDAAoD,wGAAwG,wDAAwD,kHAAkH,8KAA8K,4DAA4D,oDAAoD,wGAAwG,wDAAwD,kHAAkH,8KAA8K,4DAA4D,oDAAoD,wGAAwG,wDAAwD,8GAA8G,wDAAwD,0GAA0G,wDAAwD,kDAAkD,+DAA+D,2CAA2C,2DAA2D,gtDAAgtD,uRAAuR,ihBAAihB,qOAAqO,2LAA2L,+OAA+O,sQAAsQ,oDAAoD,oYAAoY,uPAAuP,kJAAkJ,woCAAwoC,oDAAoD,gDAAgD,0CAA0C,oYAAoY,sZAAsZ,2ZAA2Z,gDAAgD,+aAA+a,4WAA4W,6WAA6W,gXAAgX,wJAAwJ,8OAA8O,uXAAuX,sVAAsV,0EAA0E,8FAA8F,+OAA+O,mcAAmc,4SAA4S,iRAAiR,wTAAwT,yLAAyL,0HAA0H,6OAA6O,oDAAoD,mFAAmF,yKAAyK,oDAAoD,6eAA6e,uRAAuR,0CAA0C,+UAA+U,sbAAsb,6PAA6P,yHAAyH,gSAAgS,4DAA4D,mFAAmF,mMAAmM,4DAA4D,wDAAwD,oDAAoD,oDAAoD,wIAAwI,gYAAgY,ocAAoc,oOAAoO,2IAA2I,ocAAoc,kVAAkV,oPAAoP,0GAA0G,oDAAoD,mFAAmF,mMAAmM,sGAAsG,oDAAoD,gDAAgD,0KAA0K,4CAA4C;AACnouB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "26.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端弹幕效果实现思路\\\"><a href=\\\"#前端弹幕效果实现思路\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端弹幕效果实现思路</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这是几个月前写的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5ae56927f265da0b7e0c0968\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2),_vm._ssrNode(\"，文章下面有很多精彩的讨论，或许能给你一点启发\")],2),_vm._ssrNode(\" <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">更好的方式</p> <p>可以利用<code>canvas</code>或者 CSS 动画来实现弹幕需求，不过文章中的思路，可以参考一下。</p></div> <hr> <h2 id=\\\"实现效果：\\\"><a href=\\\"#实现效果：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现效果：</h2> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/4/29/1631066f5f7cbcd4?w=415&h=234&f=png&s=109831\\\" alt></p> <h2 id=\\\"实现原理：\\\"><a href=\\\"#实现原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现原理：</h2> <p>实现弹幕的原理，并不算太复杂，耗费一些时间，怼一怼应该都可以做出来。</p> <ol><li>获取弹幕数据。</li> <li>将弹幕设置为四个通道，每个通道最多只能出现两条弹幕。</li> <li>使用<code>setInterval</code>动态设置<code>dom</code>的<code>left</code>属性。</li> <li>使用 dom 的<code>offsetWidth</code>和屏幕的宽度判断元素是否滚动超出屏幕，然后移除 dom。</li></ol> <hr> <h2 id=\\\"实现步骤：\\\"><a href=\\\"#实现步骤：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现步骤：</h2> <h3 id=\\\"_1-首先看一下html的结构。\\\"><a href=\\\"#_1-首先看一下html的结构。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 1. 首先看一下<code>html</code>的结构。</h3> <div class=\\\"language-html line-numbers-mode\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>detailImg<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>url<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">/&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageDiv<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer1<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer2<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer3<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>barrageLayer4<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token comment\\\">&lt;!--detailImg 设置relative， barrageDiv设置z-index在图片上面，以及图片的位置--&gt;</span>\\n<span class=\\\"token comment\\\">&lt;!-- barrageLayer1~4 主要设置了一个top属性让四个div在各自的水平线上，形成四个通道--&gt;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>关于这里的 css 样式，关键点都在上面说了，就注意一下上面通道是怎样形成的，就可以了。具体的样式也就不贴出来了，就根据各自的需求来吧。</p> <h3 id=\\\"_2-获取弹幕所需要的数据。\\\"><a href=\\\"#_2-获取弹幕所需要的数据。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 2.获取弹幕所需要的数据。</h3> <p>要实现弹幕效果肯定需要有数据，这里就是发请求了。</p> <p>获取数据时，<strong>要考虑数据量，一次不可能全部都获取</strong>，可以一次获取一部分，当数据要加载完的时候，再次请求数据。</p> <p>这里要<strong>记录数据数据是否全部请求完成</strong>，如果请求完成，就可以不再发送数据，直接用之前获取的全部数据就可以了。</p> <h3 id=\\\"_3-执行弹幕的函数。\\\"><a href=\\\"#_3-执行弹幕的函数。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3.执行弹幕的函数。</h3> <p>弹幕数据获取后，就执行弹幕运行的函数，因为我在写弹幕函数的时候，设置了很多数据状态，这里就大概讲一下实现思路和关键部分代码。</p> <h4 id=\\\"弹幕函数包括的功能：\\\"><a href=\\\"#弹幕函数包括的功能：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 弹幕函数包括的功能：</h4> <ol><li>定时获取数据(判断数据是否加载完毕)</li> <li>定时发射弹幕(判断通道是否闲置),传入弹幕所需要的内容，用户头像等。</li> <li>创建 dom 内容，根据传参生成弹幕 div，设置 style 属性，根据控制弹幕数据数组的下标将 div 插入对应的 dom 中。</li> <li>采用定时器移动 dom，这里是根据内容长度定义弹幕的移动速度。</li> <li>移动弹幕的过程中判断四个通道是否处于闲置状态，当 dom 移动出了屏幕，移动 dom 并且清除定时器。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">barrage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//第一部分先判断数据是否加载完成 这里是一个定时器，设置为15秒。</span>\\n    <span class=\\\"token comment\\\">//如果数据还未加载完毕，就再次运行请求数据的接口，请求的页数可以 数组/每次请求的条数+1</span>\\n    <span class=\\\"token comment\\\">//数据加载完毕就清除定时器。（我将定时器都保存在vue 组件的data里面） 清除的时候clearInterval(this.data);</span>\\n\\n    <span class=\\\"token comment\\\">//定时发射</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>divStatus<span class=\\\"token punctuation\\\">.</span>intervalid<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span> selfTime<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">selfTime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">&gt;=</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//当dataNum大于等于数组的数量时，弹幕从头再来一遍</span>\\n            _this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//设置四个通道的变量，当这几个变量为false的时候，才可发射</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">===</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//这里只演示其中一个变量</span>\\n        divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        _this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">barrageOut</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">[</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">,</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">[</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>commentator<span class=\\\"token punctuation\\\">.</span>headImgUrl<span class=\\\"token punctuation\\\">,</span>_this<span class=\\\"token punctuation\\\">.</span>dataNum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 创建弹幕内容，自定义弹幕移动速度</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">barrageOut</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">,</span>imgUrl<span class=\\\"token punctuation\\\">,</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//text：弹幕的内容,imgUrl:用户的头像,num:数组的第几个</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">4</span><span class=\\\"token operator\\\">==</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//根据数组下标 创建对应通道的节点 这里也演示其中一个</span>\\n        barrageLayer<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'barrageLayer1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// 创建dom内容 定义dom style样式</span>\\n    <span class=\\\"token keyword\\\">let</span> divBox <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> divBoxImg<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> divBoxText<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'class'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'barrageDivClass'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxText<span class=\\\"token punctuation\\\">.</span>innerHTML<span class=\\\"token operator\\\">=</span>text<span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBoxImg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxImg<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setAttribute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'class'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'barrageDivClass_img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBoxImg<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>backgroundImage<span class=\\\"token operator\\\">=</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`url(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>imgUrl<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBoxText<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    divBox<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">2000</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// 初始化left位置,一开始在屏幕的右侧</span>\\n    barrageLayer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>divBox<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 定时器移动dom，形成弹幕</span>\\n    <span class=\\\"token keyword\\\">let</span> time<span class=\\\"token punctuation\\\">,</span>l<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    time<span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 这里可以根据需求自定义弹幕加载的速度</span>\\n        l<span class=\\\"token operator\\\">=</span>l<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n        l<span class=\\\"token operator\\\">=</span>l<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token comment\\\">//通过减少left属性移动这个div 从右往左移动</span>\\n        divBox<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token operator\\\">+</span>l<span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">'px'</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">delDiv</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">4</span><span class=\\\"token operator\\\">==</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//在移动弹幕的过程中判断四个通道是否处于闲置状态 这里只演示其中一个</span>\\n                barrageLayer<span class=\\\"token operator\\\">=</span>document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'barrageLayer1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>barrageLayer<span class=\\\"token punctuation\\\">.</span>childNodes<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">//判断弹幕数量，如果小于2，设为false，上面的定时器可以继续发射弹幕</span>\\n                divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n                divStatus<span class=\\\"token punctuation\\\">.</span>div1<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> l <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">-</span>divBox<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">120</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>_this<span class=\\\"token punctuation\\\">.</span>barrageStatus<span class=\\\"token punctuation\\\">.</span>divStatus<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">switch</span><span class=\\\"token operator\\\">==</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//弹幕开关</span>\\n            <span class=\\\"token function\\\">delDiv</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">-</span>divBox<span class=\\\"token punctuation\\\">.</span>offsetWidth<span class=\\\"token operator\\\">-</span>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span>clientWidth<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">//不断减少left属性，当小于这个内容的宽度,并且滚了120的时候</span>\\n                barrageLayer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>divBox<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//移除dom</span>\\n                <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清除这个div的定时器</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>time<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//清除这个div的定时器</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br><span class=\\\"line-number\\\">41</span><br><span class=\\\"line-number\\\">42</span><br><span class=\\\"line-number\\\">43</span><br><span class=\\\"line-number\\\">44</span><br><span class=\\\"line-number\\\">45</span><br><span class=\\\"line-number\\\">46</span><br><span class=\\\"line-number\\\">47</span><br><span class=\\\"line-number\\\">48</span><br><span class=\\\"line-number\\\">49</span><br><span class=\\\"line-number\\\">50</span><br><span class=\\\"line-number\\\">51</span><br><span class=\\\"line-number\\\">52</span><br><span class=\\\"line-number\\\">53</span><br><span class=\\\"line-number\\\">54</span><br><span class=\\\"line-number\\\">55</span><br><span class=\\\"line-number\\\">56</span><br><span class=\\\"line-number\\\">57</span><br><span class=\\\"line-number\\\">58</span><br><span class=\\\"line-number\\\">59</span><br><span class=\\\"line-number\\\">60</span><br><span class=\\\"line-number\\\">61</span><br><span class=\\\"line-number\\\">62</span><br><span class=\\\"line-number\\\">63</span><br><span class=\\\"line-number\\\">64</span><br><span class=\\\"line-number\\\">65</span><br><span class=\\\"line-number\\\">66</span><br><span class=\\\"line-number\\\">67</span><br><span class=\\\"line-number\\\">68</span><br><span class=\\\"line-number\\\">69</span><br><span class=\\\"line-number\\\">70</span><br><span class=\\\"line-number\\\">71</span><br><span class=\\\"line-number\\\">72</span><br><span class=\\\"line-number\\\">73</span><br><span class=\\\"line-number\\\">74</span><br><span class=\\\"line-number\\\">75</span><br><span class=\\\"line-number\\\">76</span><br><span class=\\\"line-number\\\">77</span><br><span class=\\\"line-number\\\">78</span><br><span class=\\\"line-number\\\">79</span><br><span class=\\\"line-number\\\">80</span><br><span class=\\\"line-number\\\">81</span><br><span class=\\\"line-number\\\">82</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./前端弹幕效果实现思路.md?vue&type=template&id=29fa64fb&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"6014bd39\"\n  \n)\n\ncomponent.options.__file = \"前端弹幕效果实现思路.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "27.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/复制粘贴系列.md?f636",
        "webpack:///./docs/accumulate/effect/复制粘贴系列.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,mXAAmX,qCAAqC,uCAAuC,uGAAuG,0JAA0J,8EAA8E,urBAAurB,2CAA2C,mGAAmG,0CAA0C,uUAAuU,2CAA2C,mGAAmG,oFAAoF,+kBAA+kB,uFAAuF,WAAW,0CAA0C,0CAA0C,oFAAoF,4CAA4C,uFAAuF,WAAW,0CAA0C,0CAA0C,oFAAoF,uZAAuZ,qMAAqM,2CAA2C,uLAAuL,kpCAAkpC,2CAA2C,4SAA4S,wHAAwH,0CAA0C,w7BAAw7B,2CAA2C,4SAA4S,kkBAAkkB,4CAA4C,0CAA0C,8oBAA8oB,2CAA2C,2rBAA2rB,4CAA4C,0CAA0C,kvCAAkvC,2CAA2C,qOAAqO,ynBAAynB,+TAA+T,4HAA4H,mpBAAmpB,8CAA8C,qFAAqF,yGAAyG,wGAAwG,uOAAuO,gaAAga,+FAA+F,qFAAqF,mdAAmd,8CAA8C,4CAA4C,0CAA0C,q0DAAq0D,2CAA2C,kTAAkT,sIAAsI,iEAAiE,4CAA4C,0CAA0C,8SAA8S,2CAA2C,oTAAoT,sIAAsI,iEAAiE,4CAA4C,0CAA0C,oSAAoS,2CAA2C,oTAAoT,sIAAsI,iEAAiE,4CAA4C,mSAAmS,2CAA2C,mTAAmT,sIAAsI,iEAAiE,4CAA4C,0CAA0C,qSAAqS,2CAA2C,qTAAqT,sIAAsI,iEAAiE,4CAA4C,0CAA0C,8GAA8G,gJAAgJ,iOAAiO,oOAAoO,gOAAgO,4CAA4C,0/FAA0/F,UAAU,8TAA8T,2ZAA2Z,iaAAia,qMAAqM,8QAA8Q,4TAA4T,yQAAyQ,4CAA4C;AAC900B;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "27.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"复制粘贴系列\\\"><a href=\\\"#复制粘贴系列\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 复制粘贴系列</h1> <h2 id=\\\"api-介绍\\\"><a href=\\\"#api-介绍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> API 介绍:</h2> <h4 id=\\\"复制、剪切、粘贴事件：\\\"><a href=\\\"#复制、剪切、粘贴事件：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 复制、剪切、粘贴事件：</h4> <ol><li><code>copy</code> 发生复制操作时触发;</li> <li><code>cut</code> 发生剪切操作时触发;</li> <li><code>paste</code> 发生粘贴操作时触发;</li> <li>每个事件都有一个 before 事件对应：<code>beforecopy</code>、<code>beforecut</code>、<code>beforepaste</code>;</li></ol> <p>这几个 before 一般不怎么用，所以我们把注意力放在另外三个事件就可以了。</p> <p><strong>触发条件:</strong></p> <ol><li><p>鼠标右键菜单的<code>复制</code>、<code>粘贴</code>、<code>剪切</code>;</p></li> <li><p>使用了相应的键盘组合键，比如:<code>command+c</code>、<code>command+v</code>;</p> <p><strong>就算你是随便按的，也会触发事件</strong>。高程中介绍在<code>Chorme</code>、<code>Firefox</code>和<code>Safari</code>中，这几个 before 事件只会在真实会发生剪贴板事件的情况下触发，IE 上则可以触发 before。我实际测试的时候最新版<code>chorme</code>也会乱按也会触发，所以限制应该是在早一点的版本上。</p> <p>so 想说的是：before 这几个事件最好不要用,有关于剪切板的处理最好放在<code>copy</code>、<code>cut</code>、<code>paste</code>上面。</p></li></ol> <p><strong>使用姿势：</strong></p> <p>以 copy 为例:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 监听全局复制 做点什么</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 还有这种写法：</span>\\ndocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">,</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 监听全局复制 做点什么</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p>上面是在<code>document.body</code>上全局监听的，然而很多人不知道的是，我们还可以为某些 dom 单独添加剪切板事件：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// html结构</span>\\n<span class=\\\"token operator\\\">&lt;</span>div id<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;test1&quot;</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token operator\\\">&lt;</span>div id<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;test2&quot;</span><span class=\\\"token operator\\\">&gt;</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n<span class=\\\"token comment\\\">// 写法一样：</span>\\n<span class=\\\"token keyword\\\">let</span> test1 <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#test1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ntest1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 监听test1发生的复制事件 做点什么</span>\\n    <span class=\\\"token comment\\\">// test1发生的复制事件会触发回调，其他地方不会触发回调</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>其他事件也是一样的，这里就不赘述了。</p> <h4 id=\\\"clipboarddata-对象-用于访问以及修改剪贴板中的数据\\\"><a href=\\\"#clipboarddata-对象-用于访问以及修改剪贴板中的数据\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> clipboardData 对象:用于访问以及修改剪贴板中的数据</h4> <p><strong>兼容：</strong></p> <p><strong>不同浏览器，所属的对象不同</strong>：在 IE 中这个对象是<code>window</code>对象的属性，在<code>Chrome</code>、<code>Safari</code>和<code>Firefox</code>中，这个对象是相应的<code>event</code>对象的属性。所以我们在使用的时候，需要做一下如下兼容:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> clipboardData <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>clipboardData <span class=\\\"token operator\\\">||</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 获取clipboardData对象 + do something</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>对象方法：</strong></p> <p>对象有三个方法: <code>getData()</code>、<code>setData()</code>、<code>clearData()</code></p> <ul><li><p><code>getData()</code> 访问剪切板中的数据</p> <p>参数： <code>getData()</code>接受一个<code>'text'</code>参数，即要取得的数据的格式。</p> <p><strong>在复制、剪切、粘贴触发的事件的数据：</strong></p> <p>实际上在 chorme 上测试只有<code>paste</code>粘贴的时候才能用<code>getData()</code>访问到数据，用法如下：</p> <p><strong>要粘贴的数据：</strong></p></li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onpaste</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> clipboardData <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">.</span>clipboardData <span class=\\\"token operator\\\">||</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 兼容处理</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'要粘贴的数据'</span><span class=\\\"token punctuation\\\">,</span> clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p><strong>被复制/剪切的数据：</strong></p> <p>在复制和剪切中的数据，需要通过<code>window.getSelection(0).toString()</code>来访问:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>document<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'被复制的数据:'</span><span class=\\\"token punctuation\\\">,</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSelection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ul><li><p><code>setData():</code> 修改剪切板中的数据</p> <p>参数：第一个参数也是<code>'text'</code>，第二个参数是要放在剪切板中的文本。</p> <p>剩下的留在下面仿知乎/掘金复制大段文本添加版权信息那里再说。</p></li> <li><p><code>clearData()</code> :</p> <p>这个方法就不太知道了，试了好久不知道怎么用(如果有大佬知道，可以在评论区指点一下)。</p> <p>如果只是为了禁止复制，或者禁止粘贴，在下面还有另外的方法可以做到，并且可以细粒化操作。</p></li></ul> <hr> <h2 id=\\\"应用\\\"><a href=\\\"#应用\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 应用:</h2> <p>如果学习不是为了装 X，那么一切将毫无意义，来看这个东西可以在哪些场景使用：</p> <h3 id=\\\"实现类知乎-掘金复制大段文本添加版权信息\\\"><a href=\\\"#实现类知乎-掘金复制大段文本添加版权信息\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现类知乎/掘金复制大段文本添加版权信息:</h3> <p>实现很简单：取消默认复制之后，主要是在被复制的内容后面添加信息，然后根据 clipboardData 的 setData()方法将信息写入剪贴板。</p> <p>可以直接复制这段代码到本地去试试。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 掘金这里不是全局监听，应该只是监听文章的dom范围内。</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> event <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">preventDefault</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取消默认的复制事件</span>\\n  <span class=\\\"token keyword\\\">let</span> textFont<span class=\\\"token punctuation\\\">,</span>\\n    copyFont <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSelection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 被复制的文字 等下插入</span>\\n  <span class=\\\"token comment\\\">// 防知乎掘金 复制一两个字则不添加版权信息 超过一定长度的文字 就添加版权信息</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>copyFont<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    textFont <span class=\\\"token operator\\\">=</span>\\n      copyFont <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'作者：OBKoro1\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'来源：掘金\\\\n'</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">'著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    textFont <span class=\\\"token operator\\\">=</span> copyFont<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没超过十个字 则采用被复制的内容。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> event<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span> textFont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将信息写入粘贴板</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 兼容IE</span>\\n    <span class=\\\"token keyword\\\">return</span> window<span class=\\\"token punctuation\\\">.</span>clipboardData<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">,</span> textFont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br></div></div><p>然后 command+c、command+v，输出:</p> <pre><code>你复制的内容\\n作者：OBKoro1\\n链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts\\n来源：掘金\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\\n</code></pre> <h3 id=\\\"实现类起点网的防复制功能\\\"><a href=\\\"#实现类起点网的防复制功能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 实现类起点网的防复制功能:</h3> <ul><li>禁止复制+剪切</li> <li>禁止右键，右键某些选项:全选，复制，粘贴等。</li> <li>禁用文字选择，能选择却不能复制，体验很差。</li> <li>user-select 用 css 禁止选择文本。</li></ul> <p>可以把代码拷到本地玩一玩：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 禁止右键菜单</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncontextmenu</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'右键'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止文字选择。</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onselectstart</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'文字选择'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止复制</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncopy</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 禁止剪切</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">oncut</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'cut'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 禁止粘贴</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onpaste</span> <span class=\\\"token operator\\\">=</span> e <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'paste'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// e.preventDefault();</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// css 禁止文本选择 这样不会触发js</span>\\nbody <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>moz<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>webkit<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token operator\\\">-</span>ms<span class=\\\"token operator\\\">-</span>user<span class=\\\"token operator\\\">-</span>select<span class=\\\"token punctuation\\\">:</span> none<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br></div></div><p>PS：</p> <ul><li>使用<code>e.preventDefault()</code>也可以禁用，但建议使用<code>return false</code>这样就不用去访问<code>e</code>和<code>e</code>的方法了。</li> <li>示例中<code>document.body</code>全局都禁用了，也可以对 dom(某些区域)进行禁用。</li></ul> <p><strong>破解防复制</strong>：</p> <p>上面的防复制方法通过<code>js</code>+<code>css</code>实现的，所以<strong>思路就是</strong>：禁用<code>js</code>+取消<code>user-select</code>样式。</p> <p><code>Chrome</code>浏览器的话：打开浏览器控制台，按<code>F1</code>进入<code>Setting</code>，勾选<code>Disable JavaScript</code>(禁止 js)。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/8/16518cf40dd44b7c?w=1917&h=363&f=png&s=145894\\\" alt></p> <p>此时如果还不能复制的话，就要去找<code>user-select</code>样式,取消这个样式就可以了。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/8/16518d4625634931?w=861&h=305&f=png&s=195959\\\" alt></p> <p>所以那些盗版小说手打的，我真的不太能理解，Excuse me？？？</p> <h3 id=\\\"点击复制功能：\\\"><a href=\\\"#点击复制功能：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 点击复制功能：</h3> <p><strong>不能使用 clipboardData：</strong></p> <p>在 IE 中可以用<code>window.clipboardData.setData('text','内容')</code>实现。</p> <p>上文提到过，在 IE 中<code>clipboardData</code>是<code>window</code>的属性。</p> <p>而其他浏览器则是相应的<code>event</code>对象的属性，这实际上是一种安全措施，防止未经授权的访问,为了兼容其他浏览器，所以我们不能通过<code>clipboardData</code>来实现这种操作。</p> <p><strong>具体做法：</strong></p> <ul><li><p>创建一个隐藏的<code>input</code>框</p></li> <li><p>点击的时候，将要复制的内容放进<code>input</code>框中</p></li> <li><p>选择文本内容<code>input.select()</code></p> <p>这里只能用<code>input</code>或者<code>textarea</code>才能选择文本。</p></li> <li><p>document.execCommand(&quot;copy&quot;)，执行浏览器的复制命令。</p></li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">copyText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> text <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>innerText<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取要复制的内容也可以传进来</span>\\n  <span class=\\\"token keyword\\\">var</span> input <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取隐藏input的dom</span>\\n  input<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修改文本框的内容</span>\\n  input<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 选中文本</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">execCommand</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'copy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行浏览器复制命令</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'复制成功'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/mjjEGa\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"点击复制内容\"),_c('OutboundLink')],2),_vm._ssrNode(\"的 demo 在这里，可以点进去看看。\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./复制粘贴系列.md?vue&type=template&id=8dbbadb0&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"259af68e\"\n  \n)\n\ncomponent.options.__file = \"复制粘贴系列.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "28.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/显示隐藏密码.md?a3b3",
        "webpack:///./docs/accumulate/effect/显示隐藏密码.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,8hBAA8hB,uRAAuR,aAAa,oFAAoF,iRAAiR,cAAc,qFAAqF,0LAA0L,2FAA2F,qFAAqF,8LAA8L,2FAA2F,4CAA4C;AACzjE;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "28.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"显示隐藏密码\\\"><a href=\\\"#显示隐藏密码\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 显示隐藏密码</h2> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fuwjt7sgiej30ku07xdg5.jpg\\\" alt></p> <p><strong>超简单，就是切换input框的type类型:</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isShow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> input <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;inputId&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// input的dom</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">&quot;password&quot;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'text'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 显示</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        input<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'password'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 隐藏</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"CodePen: \"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/VxxgyG\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./显示隐藏密码.md?vue&type=template&id=4436937c&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"47887a99\"\n  \n)\n\ncomponent.options.__file = \"显示隐藏密码.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "29.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/effect/正则表达式收集.md?6564",
        "webpack:///./docs/accumulate/effect/正则表达式收集.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,6+BAA6+B,uVAAuV,0GAA0G,+CAA+C,6FAA6F,qwBAAqwB,EAAE,cAAc,EAAE,iDAAiD,EAAE,mDAAmD,iMAAiM,EAAE,0CAA0C,EAAE,4CAA4C,m2BAAm2B,EAAE,4CAA4C,ueAAue,IAAI,6CAA6C,weAAwe,KAAK,4CAA4C,iuBAAiuB,+JAA+J,2CAA2C,iXAAiX,GAAG,iDAAiD,mDAAmD,uaAAua,KAAK,4CAA4C,ufAAuf,KAAK,8CAA8C,6cAA6c,KAAK,IAAI,EAAE,OAAO,qDAAqD,++BAA++B,+JAA+J,uGAAuG,KAAK,8HAA8H,gcAAgc,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,4CAA4C,iQAAiQ,8UAA8U,EAAE,MAAM,IAAI,OAAO,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,EAAE,iBAAiB,EAAE,6CAA6C,2fAA2f,8JAA8J,gIAAgI,8JAA8J,+MAA+M,+EAA+E,0CAA0C,+sBAA+sB,qmBAAqmB,+EAA+E,wKAAwK,+EAA+E,0CAA0C,weAAwe,IAAI,QAAQ,IAAI,4BAA4B,IAAI,UAAU,IAAI,iDAAiD,iMAAiM,EAAE,OAAO,IAAI,QAAQ,IAAI,WAAW,EAAE,gDAAgD;AAClhc;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "29.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"常见正则表达式合集\\\"><a href=\\\"#常见正则表达式合集\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 常见正则表达式合集</h2> <p>为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。</p> <h3 id=\\\"如何验证？\\\"><a href=\\\"#如何验证？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何验证？</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"验证的方式当然是很多了，这里推荐采用\"),_vm._ssrNode(\"<a href=\\\"http://www.w3school.com.cn/js/jsref_test_regexp.asp\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"test()\"),_c('OutboundLink')],2),_vm._ssrNode(\"方法来验证。\")],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> RegExpObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">// RegExpObject为正则 string是要检测的字符串</span>\\n<span class=\\\"token comment\\\">// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isTrue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//验证成功 do something</span>\\n<span class=\\\"token punctuation\\\">}</span>elseP<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//验证失败</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><h3 id=\\\"身份证号码正则表达式：\\\"><a href=\\\"#身份证号码正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 身份证号码正则表达式：</h3> <p>第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//第二代身份证号码正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//第一代身份证正则表达式(15位)</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"手机号码正则表达式：\\\"><a href=\\\"#手机号码正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 手机号码正则表达式：</h3> <p>时间截止为：2018 年 1 月 11 日</p> <p>移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198</p> <p>联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186</p> <p>电信号段：133 149 153 173 174 177 180 181 189 199</p> <p>虚拟运营商：170</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"邮箱正则表达式：\\\"><a href=\\\"#邮箱正则表达式：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 邮箱正则表达式：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^([A-Za-z0-9_\\\\-\\\\.\\\\u4e00-\\\\u9fa5])+\\\\@([A-Za-z0-9_\\\\-\\\\.])+\\\\.([A-Za-z]{2,8})$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"用户名正则\\\"><a href=\\\"#用户名正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用户名正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">////用户名正则，4到16位（字母，数字，下划线，减号）</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[a-zA-Z0-9_-]{4,16}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"密码正则\\\"><a href=\\\"#密码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 密码正则:</h3> <p>密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z</span><span class=\\\"token punctuation\\\">]</span>\\\\w<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">}</span>$<span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^.*(?=.{6,})(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"qq-号码正则\\\"><a href=\\\"#qq-号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> QQ 号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[1-9][0-9]{4,10}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"微信号码正则\\\"><a href=\\\"#微信号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 微信号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"特殊字符检测正则\\\"><a href=\\\"#特殊字符检测正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 特殊字符检测正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/[&quot;'&lt;&gt;%;)(&amp;+]+-!！@#$~/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"域名正则\\\"><a href=\\\"#域名正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 域名正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z0</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span>a<span class=\\\"token operator\\\">-</span>zA<span class=\\\"token operator\\\">-</span><span class=\\\"token constant\\\">Z0</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">62</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"车牌号码正则\\\"><a href=\\\"#车牌号码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 车牌号码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"包含中文正则\\\"><a href=\\\"#包含中文正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 包含中文正则:</h3> <pre><code>let isTrue = /[\\\\u4E00-\\\\u9FA5]/;\\n//这个可以用于验证用户的真实姓名。\\n</code></pre> <h3 id=\\\"护照正则\\\"><a href=\\\"#护照正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 护照正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(P\\\\d{7}|G\\\\d{7,8}|TH\\\\d{7,8}|S\\\\d{7,8}|A\\\\d{7,8}|L\\\\d{7,8}|\\\\d{9}|D\\\\d+|1[4,5]\\\\d{7})$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"固定电话正则：\\\"><a href=\\\"#固定电话正则：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 固定电话正则：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">(</span>\\\\<span class=\\\"token punctuation\\\">(</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span>\\\\<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">|</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">|</span>\\\\s<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">?</span>\\\\d<span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"ip-地址正则\\\"><a href=\\\"#ip-地址正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> IP 地址正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span>\\\\<span class=\\\"token punctuation\\\">.</span>\\\\d<span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"邮政编码正则\\\"><a href=\\\"#邮政编码正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 邮政编码正则:</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> isTrue<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span>\\\\d<span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"经纬度正则\\\"><a href=\\\"#经纬度正则\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 经纬度正则</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//经度正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(\\\\-|\\\\+)?(((\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})\\\\.\\\\d{0,6})|(\\\\d|[1-9]\\\\d|1[0-7]\\\\d|0{1,3})|180\\\\.0{0,6}|180)$/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//纬度正则</span>\\n<span class=\\\"token keyword\\\">let</span> isTrue <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^(\\\\-|\\\\+)?([0-8]?\\\\d{1}\\\\.\\\\d{0,6}|90\\\\.0{0,6}|[0-8]?\\\\d{1}|90)$/</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"常用的正则表达式大概就是上面这些了，如果大家还有其他干货的话，欢迎关注我的\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2),_vm._ssrNode(\"给我留言。\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./正则表达式收集.md?vue&type=template&id=3ad8e3b8&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"b884fdb0\"\n  \n)\n\ncomponent.options.__file = \"正则表达式收集.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "30.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/interviewQuestion/树状数组结构转化.md?66de",
        "webpack:///./docs/accumulate/interviewQuestion/树状数组结构转化.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,iwBAAiwB,yrBAAyrB,wFAAwF,ohCAAohC,wFAAwF,ohCAAohC,wFAAwF,0rBAA0rB,sFAAsF,wmDAAwmD,kaAAka,ydAAyd,8FAA8F,wFAAwF,kaAAka,obAAob,weAAwe,gGAAgG,weAAwe,sGAAsG,4FAA4F,0dAA0d,8FAA8F,sFAAsF;AACz+T;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "30.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"树状数组结构转化\\\"><a href=\\\"#树状数组结构转化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 树状数组结构转化</h2> <h3 id=\\\"题目如下：\\\"><a href=\\\"#题目如下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目如下：</h3> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/19/16551c0d51e4f348?w=1080&h=2314&f=jpeg&s=177311\\\" alt></p> <p>这道题是我朋友发给我的，之前一开始看的时候，觉得很简单，但仔细往下看的时候，眉头一皱发现事情并不简单。</p> <p>PS：这类题目之前也以不同形式出现过</p> <h3 id=\\\"传进去的数组：\\\"><a href=\\\"#传进去的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 传进去的数组：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> oldArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'工具'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'备忘录'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'中等'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'高等'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'3_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'1_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'成人教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'1_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'2_id'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div><h3 id=\\\"输出的数组：\\\"><a href=\\\"#输出的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 输出的数组：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'工具'</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'备忘录'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'教育'</span><span class=\\\"token punctuation\\\">,</span>\\n    children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'学历教育'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>\\n            label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'中等'</span><span class=\\\"token punctuation\\\">,</span>\\n            children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token punctuation\\\">{</span>\\n            value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n            label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'高等'</span><span class=\\\"token punctuation\\\">,</span>\\n            children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span>\\n        label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'成人教育'</span><span class=\\\"token punctuation\\\">,</span>\\n        children<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br><span class=\\\"line-number\\\">37</span><br><span class=\\\"line-number\\\">38</span><br><span class=\\\"line-number\\\">39</span><br><span class=\\\"line-number\\\">40</span><br></div></div><h3 id=\\\"建议大家好好想想，争取能够自己解出来\\\"><a href=\\\"#建议大家好好想想，争取能够自己解出来\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 建议大家好好想想，争取能够自己解出来</h3> <h3 id=\\\"参考一下我的解题方法：\\\"><a href=\\\"#参考一下我的解题方法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考一下我的解题方法：</h3> <ol><li><p>先算出层级嵌套数</p> <p>遍历数组，再遍历数组的元素，用<code>parseInt</code>拿到每一个值，将最大的值取出来，即为层级嵌套数。</p></li> <li><p>数组转成属性层级的对象。对象的属性是层级，值是数组，层级里面的值。</p> <p>1.去重操作(比如:<code>1_id</code>相等的话就不再重复添加)</p> <p>2.提取需要的信息，最终的值和相应父级的信息(之后组装数组的时候放到对应的地方，需要的信息)。</p> <p>最后输出的对象是这个样子</p></li></ol> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/19/165520ab3cf04040?w=1288&h=664&f=jpeg&s=122584\\\" alt></p> <ol start=\\\"3\\\"><li><p>将属性层级的对象转成树状结构数组。</p> <p>遍历对象，获取层级值。</p> <p>遍历层级的每个元素。</p> <p>找到对应的层级将值添加进去，否则递归继续找对应层级。</p></li></ol> <h3 id=\\\"通关秘籍\\\"><a href=\\\"#通关秘籍\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 通关秘籍</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这里有一份\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/simpleDemo/blob/b62f8ae98d345c287bea9b5622504fdbae626102/interviewQuestion/treeArr.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"通关秘籍\"),_c('OutboundLink')],2),_vm._ssrNode(\"，全宇宙最低价，998 卖给你。\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./树状数组结构转化.md?vue&type=template&id=0867c438&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"595e06be\"\n  \n)\n\ncomponent.options.__file = \"树状数组结构转化.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "31.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/template.md?933d",
        "webpack:///./docs/accumulate/template.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB;AAChI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+F",
      "file": "31.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./template.md?vue&type=template&id=76845e75&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"08103f7a\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "32.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/tool/http缓存.md?fdd5",
        "webpack:///./docs/accumulate/tool/http缓存.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,y5LAAy5L,kFAAkF,0oBAA0oB,wqDAAwqD,gbAAgb,sCAAsC,wcAAwc,sCAAsC;AACj2S;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4F",
      "file": "32.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"谈论http缓存时我们在谈论什么\\\"><a href=\\\"#谈论http缓存时我们在谈论什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 谈论HTTP缓存时我们在谈论什么</h2> <p>在浏览器众多缓存中的HTTP缓存可能很多人对这个的概念并没有很清晰，每个人都知道进入一次网页之后再刷新一次页面，加载速度会比首次加载快非常多，每个人都知道这是浏览器缓存的magic，但是对此背后的原因可能不甚了解...</p> <h3 id=\\\"当我们在谈论http缓存时我们在谈论什么\\\"><a href=\\\"#当我们在谈论http缓存时我们在谈论什么\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 当我们在谈论HTTP缓存时我们在谈论什么:</h3> <p>我们实际上是在谈论下面这两种情况:</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e32ac608a1146?w=1849&h=301&f=png&s=70428\\\" alt></p> <p>如上图，浏览器对静态资源的HTTP缓存有两种情况，一种是强缓存(本地缓存)，另一种是弱缓存(协商缓存)。</p> <hr> <h3 id=\\\"缓存流程：\\\"><a href=\\\"#缓存流程：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缓存流程：</h3> <h4 id=\\\"浏览器第一次请求资源时：\\\"><a href=\\\"#浏览器第一次请求资源时：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器第一次请求资源时：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e323d0879019f?w=686&h=382&f=png&s=25723\\\" alt=\\\"图片出自网络\\\"></p> <p>浏览器<strong>第一次请求资源时，必须下载所有的资源，然后根据响应的header内容来决定，如何缓存资源</strong>。可能采用的是强缓存，也可能是弱缓存</p> <h4 id=\\\"浏览器后续请求资源时的匹配流程：\\\"><a href=\\\"#浏览器后续请求资源时的匹配流程：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 浏览器后续请求资源时的匹配流程：</h4> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e33ba0484fb14?w=401&h=861&f=png&s=122643\\\" alt></p> <p>由上图可以知道当浏览器请求一个静态资源时的HTTP流程：</p> <ol><li>强缓存阶段：先在本地查找该资源，如果发现该资源，并且其他限制也没有问题(比如:缓存有效时间)，就命中强缓存，返回200，直接使用强缓存，并且不会发送请求到服务器</li> <li>弱缓存阶段：在本地缓存中找到该资源，发送一个http请求到服务器，服务器判断这个资源没有被改动过，则返回304，让浏览器使用该资源。</li> <li>缓存失败阶段(重新请求)：当服务器发现该资源被修改过，或者在本地没有找到该缓存资源，服务器则返回该资源的数据。</li></ol> <h3 id=\\\"强缓存与弱缓存的区别：\\\"><a href=\\\"#强缓存与弱缓存的区别：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存与弱缓存的区别：</h3> <p><strong>获取资源形式</strong>： 都是从缓存中获取资源的。</p> <p><strong>状态码</strong>： 强缓存返回200(from cache),弱缓存返回304状态码</p> <p><strong>请求(最大区别)</strong>：</p> <p>强缓存不发送请求，直接从缓存中取。</p> <p>弱缓存需要发送一个请求，验证这个文件是否可以使用（有没有被改动过）。</p> <hr> <h3 id=\\\"强缓存：\\\"><a href=\\\"#强缓存：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存：</h3> <p>强缓存是利用Expires或者Cache-Control，让原始服务器为文件设置一个过期时间，在多长时间内可以将这些内容视为最新的。</p> <p>若时间未过期，则命中强缓存，使用缓存文件不发送请求。</p> <h3 id=\\\"cache-control\\\"><a href=\\\"#cache-control\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Cache-Control</h3> <p>Cache-Control 是http1.1中为了弥补<code>Expires</code>的缺陷而加入的，当Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires。</p> <p><strong>选项</strong>：</p> <p>可缓存性:</p> <p><code>public</code>： 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。</p> <p><code>private</code>: 只有用户自己的浏览器能够进行缓存，公共的代理服务器不允许缓存。</p> <p><code>no-cache</code>:  强制浏览器在使用cache拷贝之前先<strong>提交一个http请求到源服务器进行确认</strong>。http请求没有减少，会减少一个响应体(文件内容),这种个选项类似弱缓存。</p> <p><code>only-if-cached</code>: 表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</p> <p>到期设置：</p> <p><code>max-age=60</code>：设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。 这里是60秒</p> <p>其他设置：</p> <p><code>no-store</code>: 告诉浏览器在任何情况下都不要进行cache，不在本地保留拷贝。</p> <p><code>must-revalidate</code>: 缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更多设置，移动\"),_vm._ssrNode(\"<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"MDN\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 示例</span>\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span> no<span class=\\\"token operator\\\">-</span>cache<span class=\\\"token punctuation\\\">,</span> no<span class=\\\"token operator\\\">-</span>store<span class=\\\"token punctuation\\\">,</span> must<span class=\\\"token operator\\\">-</span>revalidate\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token operator\\\">-</span>age<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">31536000</span>\\nCache<span class=\\\"token operator\\\">-</span>Control<span class=\\\"token punctuation\\\">:</span> max<span class=\\\"token operator\\\">-</span>age<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">3600</span><span class=\\\"token punctuation\\\">,</span> must<span class=\\\"token operator\\\">-</span>revalidate\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><h3 id=\\\"http1-0时代的缓存-expires-pragma\\\"><a href=\\\"#http1-0时代的缓存-expires-pragma\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> http1.0时代的缓存 Expires+Pragma</h3> <p><strong>Expires用于设置缓存到期时间</strong>：</p> <p>指定缓存到期GMT的绝对时间，如果设了max-age，max-age就会覆盖expires，如果expires到期需要重新请求。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Expires<span class=\\\"token punctuation\\\">:</span>Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>有一个问题是由于使用具体时间，如果时间表示出错或者没有转换到正确的时区都可能造成缓存生命周期出错。</p> <p><strong>Pragma禁用缓存：</strong></p> <p><code>Pragma : no-cache</code> 表示防止客户端缓存，需要强制从服务器获取最新的数据；</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Pragma <span class=\\\"token punctuation\\\">:</span> no<span class=\\\"token operator\\\">-</span>cache  <span class=\\\"token comment\\\">//只有这一个用法 禁用缓存，强制从服务器获取最新的数据； </span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"强缓存命中-from-memory-cache-from-disk-cache\\\"><a href=\\\"#强缓存命中-from-memory-cache-from-disk-cache\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 强缓存命中 from memory cache &amp; from disk cache</h3> <p>在测试的时候，看到命中强缓存时，有两种状态，200 (from memory cache) cache &amp; 200 (from disk cache)，于是去找了一下这两者的区别：</p> <p>memory cache: 将资源存到<strong>内存</strong>中，从内存中获取。</p> <p>disk cache：将资源缓存到<strong>磁盘</strong>中，从磁盘中获取。</p> <p>二者最大的区别在于：<strong>当退出进程时，内存中的数据会被清空，而磁盘的数据不会</strong>。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的介绍推荐这篇\"),_vm._ssrNode(\"<a href=\\\"https://blog.csdn.net/baidu_38742725/article/details/77181078\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <hr> <h3 id=\\\"弱缓存：\\\"><a href=\\\"#弱缓存：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 弱缓存：</h3> <p>如果强缓存时间过期，或者没有设置，导致未命中的话。就进入到了弱缓存的阶段了，</p> <p><strong>Last-Modified &amp; if-modified-since:</strong></p> <p>Last-Modified与If-Modified-Since是一对报文头，属于http 1.0。</p> <p>last-modified是web服务器认为文件的最后修改时间，<code>last-modified</code>是第一次请求文件的时候，<strong>服务器返回</strong>的一个属性。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>Last<span class=\\\"token operator\\\">-</span>Modified<span class=\\\"token punctuation\\\">:</span> Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span> \\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>第二次请求这个文件时，浏览器把<code>If-Modified-Since</code><strong>发送给服务器</strong>，询问该时间之后文件是否被修改过。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>If<span class=\\\"token operator\\\">-</span>Modified<span class=\\\"token operator\\\">-</span>Since<span class=\\\"token punctuation\\\">:</span> Sat<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">09</span> Jun <span class=\\\"token number\\\">2018</span> <span class=\\\"token number\\\">08</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">56</span> <span class=\\\"token constant\\\">GMT</span> <span class=\\\"token comment\\\">// 跟Last-Modified的值一样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><strong>ETag &amp; If-None-Match</strong></p> <p>ETag与If-None-Match是一对报文，属于http 1.1。</p> <p><strong>ETag是一个文件的唯一标志符</strong>。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。</p> <p>ETag机制类似于乐观锁机制，如果请求报文的ETag与服务器的不一致，则表示该资源已经被修改过来，需要发最新的内容给浏览器。</p> <p><code>ETag</code>也是首次请求的时候，服务器返回的:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>ETag<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;8F759D4F67D66A7244638AD249675BE2&quot;</span> <span class=\\\"token comment\\\">// 长这样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p><code>If-None-Match</code>也是浏览器发送到服务器验证，文件是否改变的:</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>If<span class=\\\"token operator\\\">-</span>None<span class=\\\"token operator\\\">-</span>Match<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">&quot;8F759D4F67D66A7244638AD249675BE2&quot;</span> <span class=\\\"token comment\\\">// 跟ETag的值一样</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"etag-lastmodified过程如下\\\"><a href=\\\"#etag-lastmodified过程如下\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <strong>Etag/lastModified过程如下:</strong></h3> <ol><li>客户端第一次向服务器发起请求,服务器将附加<code>Last-Modified/ETag</code>到所提供的资源上去</li> <li>当再一次请求资源,<strong>如果没有命中强缓存</strong>,在执行在验证时,<strong>将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器</strong>。</li> <li>服务器检查该Last-Modified或ETag，并判断出该资源<strong>页面自上次客户端请求之后还未被修改，返回响应304和一个空的响应体</strong>。</li></ol> <h3 id=\\\"同时使用两个报文头\\\"><a href=\\\"#同时使用两个报文头\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 同时使用两个报文头:</h3> <p>同时使用这两个报文头，<strong>两个都匹配才会命中弱缓存</strong>，否则将重新请求资源。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e3d5d5e2119a5?w=975&h=583&f=png&s=74354\\\" alt></p> <h3 id=\\\"etag-主要为了解决-last-modified-无法解决的一些问题：\\\"><a href=\\\"#etag-主要为了解决-last-modified-无法解决的一些问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Etag 主要为了解决 Last-Modified 无法解决的一些问题：</h3> <ol><li>一些文件也许内容并不改变(仅仅改变的修改时间)，这个时候我们不希望文件重新加载。（Etag值会触发缓存，Last-Modified不会触发）</li> <li>If-Modified-Since能检查到的粒度是秒级的，当修改非常频繁时，Last-Modified会触发缓存，而Etag的值不会触发，重新加载。</li> <li>某些服务器不能精确的得到文件的最后修改时间。</li></ol> <hr> <h3 id=\\\"用户操作行为与缓存\\\"><a href=\\\"#用户操作行为与缓存\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用户操作行为与缓存</h3> <p>F5刷新导致强缓存失效。</p> <p>ctrl+F5强制刷新页面强缓存，弱缓存都会失效。</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e4019ed29d0ae?w=495&h=175&f=png&s=7693\\\" alt=\\\"图片出自网络\\\"></p> <h3 id=\\\"如何设置？\\\"><a href=\\\"#如何设置？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何设置？</h3> <p>一般是服务器端设置这些请求头的，我自己试了用阿里云服务器设置<code>Cache-Control</code>，设置一下很方便的。</p> <p>嗯，据说客户端也是可以设置强弱缓存，但是找了半天不知道怎么设置，如果有路过的大佬知道，可以指导一波^_^。</p> <h3 id=\\\"没有设置强缓存，返回200\\\"><a href=\\\"#没有设置强缓存，返回200\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 没有设置强缓存，返回200</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如下图这种情况，就不太懂怎么回事，下方的解释也没看明白，图片内容出自这篇\"),_vm._ssrNode(\"<a href=\\\"https://div.io/topic/854\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/9/163e40f9eb594c9e?w=827&h=813&f=png&s=153881\\\" alt></p> <hr> <h3 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h3> <p>ßß\\n通过网络重复请求资源既缓慢，成本又高，缓存和重用以前获取的资源的能力成为优化性能很关键的一个方面,也是大厂面试时很频繁出现的内容，掌握好这块知识点是非常重要的，希望本文能给你带来些收获。</p> <p>文章如有不正确的地方欢迎各位路过的大佬鞭策！喜欢的话，赶紧点波<s>订阅</s>关注/喜欢。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./http缓存.md?vue&type=template&id=5b51daf4&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"64138289\"\n  \n)\n\ncomponent.options.__file = \"http缓存.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "33.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/tool/js事件循环机制.md?dbdf",
        "webpack:///./docs/accumulate/tool/js事件循环机制.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,g3DAAg3D,2CAA2C,kOAAkO,2CAA2C,uRAAuR,uXAAuX,6CAA6C,mFAAmF,+HAA+H,uRAAuR,kRAAkR,iRAAiR,2CAA2C,kOAAkO,2CAA2C,uRAAuR,uXAAuX,6CAA6C,mFAAmF,+HAA+H,uRAAuR,kRAAkR,iRAAiR,2CAA2C,kOAAkO,2CAA2C,uRAAuR,uXAAuX,6CAA6C,mFAAmF,+HAA+H,uRAAuR,kRAAkR,2KAA2K,2KAA2K,2KAA2K,4jDAA4jD,UAAU,kCAAkC,UAAU,2BAA2B,SAAS,yBAAyB,UAAU,w5BAAw5B,WAAW,6lCAA6lC,mQAAmQ,4CAA4C,oFAAoF,sWAAsW,ibAAib,sVAAsV,iOAAiO,4CAA4C,ySAAyS;AAC57b;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0F",
      "file": "33.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"事件循环-event-loop-机制以及实例\\\"><a href=\\\"#事件循环-event-loop-机制以及实例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件循环(Event Loop)机制以及实例</h2> <p>大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生...</p> <h3 id=\\\"为什么js是单线程？\\\"><a href=\\\"#为什么js是单线程？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 为什么js是单线程？</h3> <p>js作为主要运行在浏览器的脚本语言，js主要用途之一是操作DOM。</p> <p>在js高程中举过一个栗子，如果js同时有两个线程，同时对同一个dom进行操作，这时浏览器应该听哪个线程的，如何判断优先级？</p> <p>为了避免这种问题，js必须是一门单线程语言，并且在未来这个特点也不会改变。</p> <h2 id=\\\"执行栈与任务队列\\\"><a href=\\\"#执行栈与任务队列\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行栈与任务队列</h2> <p>因为js是单线程语言，当遇到异步任务(如ajax操作等)时，不可能一直等待异步完成，再继续往下执行，在这期间浏览器是空闲状态，显而易见这会导致巨大的资源浪费。</p> <h3 id=\\\"执行栈\\\"><a href=\\\"#执行栈\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行栈</h3> <p>当执行某个函数、用户点击一次鼠标，Ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生时就会进入执行栈队列中，等待主线程读取,遵循先进先出原则。</p> <h3 id=\\\"主线程\\\"><a href=\\\"#主线程\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 主线程</h3> <p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个事件。</p> <p>主线程循环：即主线程会不停的从执行栈中读取事件，会执行完所有栈中的同步代码。</p> <p>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。</p> <p><strong>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务</strong>。如果有，那么主线程会依次执行那些任务队列中的回调函数。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"不太理解的话，可以运行一下下面的代码，或者点击一下这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/LrzqBd\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>结果是当a、b、c函数都执行完成之后，三个setTimeout才会依次执行。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数1'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">b</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数2'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">c</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'任务队列函数3'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5000</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c的for循环'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'c事件执行完'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">b</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">c</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 当a、b、c函数都执行完成之后，三个setTimeout才会依次执行</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br></div></div><hr> <h3 id=\\\"js-异步执行的运行机制。\\\"><a href=\\\"#js-异步执行的运行机制。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> js 异步执行的运行机制。</h3> <ol><li>所有任务都在主线程上执行，形成一个执行栈。</li> <li>主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</li> <li>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;。那些对应的异步任务，结束等待状态，进入执行栈并开始执行。</li> <li><strong>主线程不断重复上面的第三步</strong>。</li></ol> <hr> <h3 id=\\\"宏任务与微任务\\\"><a href=\\\"#宏任务与微任务\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 宏任务与微任务:</h3> <p>异步任务分为 宏任务（macrotask） 与 微任务 (microtask)，不同的API注册的任务会依次进入自身对应的队列中，然后等待 Event Loop 将它们依次压入执行栈中执行。</p> <p><strong>宏任务(macrotask)：</strong>：</p> <p>script(整体代码)、setTimeout、setInterval、UI 渲染、 I/O、postMessage、 MessageChannel、setImmediate(Node.js 环境)</p> <p><strong>微任务(microtask)：</strong></p> <p>Promise、 MutaionObserver、process.nextTick(Node.js环境）</p> <h2 id=\\\"event-loop-事件循环-：\\\"><a href=\\\"#event-loop-事件循环-：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Event Loop(事件循环)：</h2> <p>Event Loop(事件循环)中，每一次循环称为 tick, 每一次tick的任务如下：</p> <ul><li>执行栈选择最先进入队列的宏任务(通常是<code>script</code>整体代码)，如果有则执行</li> <li>检查是否存在 Microtask，如果存在则不停的执行，直至清空 microtask 队列</li> <li>更新render(每一次事件循环，浏览器都可能会去更新渲染)</li> <li>重复以上步骤</li></ul> <p>宏任务 &gt; 所有微任务 &gt; 宏任务，如下图所示：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/16/164081cfd8400f92\\\" alt></p> <p>从上图我们可以看出：</p> <ol><li>将所有任务看成两个队列：执行队列与事件队列。</li> <li>执行队列是同步的，事件队列是异步的，宏任务放入事件列表，微任务放入执行队列之后，事件队列之前。</li> <li>当执行完同步代码之后，就会执行位于执行列表之后的微任务，然后再执行事件列表中的宏任务</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"上面提到的\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/LrzqBd\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"demo\"),_c('OutboundLink')],2),_vm._ssrNode(\"结果可以这么理解：先执行<code>script</code>宏任务，执行完了之后，再执行其他两个定时器宏任务。\")],2),_vm._ssrNode(\" <hr> <h2 id=\\\"面试题实践\\\"><a href=\\\"#面试题实践\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 面试题实践</h2> <p>下面这个题，很多人都应该看过/遇到过，重新来看会不会觉得清晰很多：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 执行顺序问题，考察频率挺高的，先自己想答案**</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span>reject<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br></div></div><p>根据本文的解析，我们可以得到:</p> <ol><li><p>先执行<code>script</code>同步代码</p> <pre><code> 先执行new Promise中的console.log(2),then后面的不执行属于微任务\\n 然后执行console.log(4)\\n</code></pre></li> <li><p>执行完<code>script</code>宏任务后，执行微任务，console.log(3)，没有其他微任务了。</p></li> <li><p>执行另一个宏任务，定时器，console.log(1)。</p></li></ol> <p>根据本文的内容，可以很轻松，且有理有据的<s>猜出</s>写出正确答案：2,4,3,1.</p> <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>类似上文的面试题还有很多，实则都大同小异，只要掌握了事件循环的机制，这些问题都会变得很简单。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./js事件循环机制.md?vue&type=template&id=00495c64&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5e9a8d3e\"\n  \n)\n\ncomponent.options.__file = \"js事件循环机制.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "34.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/tool/js垃圾回收机制.md?7cbc",
        "webpack:///./docs/accumulate/tool/js垃圾回收机制.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,sgFAAsgF,iTAAiT,qJAAqJ,8MAA8M,2lBAA2lB,yLAAyL,4jCAA4jC,0OAA0O,kJAAkJ,6DAA6D,sDAAsD,yKAAyK,y6BAAy6B,gDAAgD,gBAAgB,0CAA0C,iLAAiL,0BAA0B,0CAA0C,6FAA6F,QAAQ,0CAA0C,4CAA4C,yKAAyK,42CAA42C,yQAAyQ,0WAA0W,gLAAgL,iaAAia,0GAA0G,wHAAwH,uKAAuK,u5BAAu5B,oRAAoR,SAAS,oFAAoF,mUAAmU,sUAAsU,gDAAgD,0CAA0C,yDAAyD,4CAA4C,gkCAAgkC,qRAAqR,8QAA8Q,UAAU,oFAAoF,yjBAAyjB;AACjnd;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0F",
      "file": "34.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"js高程中的垃圾回收机制与常见内存泄露的解决方法\\\"><a href=\\\"#js高程中的垃圾回收机制与常见内存泄露的解决方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS高程中的垃圾回收机制与常见内存泄露的解决方法</h2> <p>起因是因为想了解闭包的内存泄露机制，然后想起《js高级程序设计》中有关于垃圾回收机制的解析，之前没有很懂，过一年回头再看就懂了，写篇博客与大家分享一下。</p> <h3 id=\\\"内存的生命周期：\\\"><a href=\\\"#内存的生命周期：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 内存的生命周期：</h3> <ol><li>分配你所需要的内存：</li></ol> <p>由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都会<strong>分配内存来存储那个实体</strong>。</p> <ol start=\\\"2\\\"><li><p>使用分配到的内存做点什么。</p></li> <li><p>不需要时将其释放回归：</p></li></ol> <p>在不需要字符串、对象的时候，需要释放其所占用的内存，否则将会消耗完系统中所有可用的内存，造成系统崩溃，这就是<strong>垃圾回收机制所存在的意义</strong>。</p> <p><strong>所谓的内存泄漏指的是</strong>：由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。</p> <hr> <h2 id=\\\"垃圾回收机制：\\\"><a href=\\\"#垃圾回收机制：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 垃圾回收机制：</h2> <p>在C和C++之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写js的过程中，内存的分配以及内存的回收完全实现了自动管理，我们不用操心这种事情。</p> <h3 id=\\\"垃圾收集机制的原理：\\\"><a href=\\\"#垃圾收集机制的原理：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 垃圾收集机制的原理：</h3> <p>垃圾收集器会按照固定的时间间隔，<strong>周期性的找出不再继续使用的变量，然后释放其占用的内存</strong>。</p> <p><strong>什么叫不再继续使用的变量？</strong></p> <p>不再使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在，当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p> <p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说<strong>全局变量不会被当成垃圾回收</strong>。</p> <h3 id=\\\"标记清除：当前采用的垃圾收集策略\\\"><a href=\\\"#标记清除：当前采用的垃圾收集策略\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标记清除：当前采用的垃圾收集策略</h3> <p>工作原理：</p> <p>当变量进入环境时(例如在函数中声明一个变量)，将这个变量标记为“进入环境”，当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。</p> <p>工作流程：</p> <ol><li>垃圾收集器会在运行的时候会给存储在内存中的<strong>所有变量都加上标记</strong>。</li> <li><strong>去掉环境中的变量</strong>以及被环境中的变量引用的变量的标记。</li> <li>那些<strong>还存在标记的变量被视为准备删除的变量</strong>。</li> <li>最后垃圾收集器会执行最后一步内存清除的工作，<strong>销毁那些带标记的值并回收它们所占用的内存空间</strong>。</li></ol> <p>到2008年为止,IE、Chorme、Fireofx、Safari、Opera <strong>都使用标记清除式的垃圾收集策略</strong>，只不过垃圾收集的时间间隔互有不同。</p> <h3 id=\\\"引用计数略：被废弃的垃圾收集策略\\\"><a href=\\\"#引用计数略：被废弃的垃圾收集策略\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 引用计数略：被废弃的垃圾收集策略</h3> <p>循环引用：跟踪记录每个值被引用的技术</p> <p>在老版本的浏览器中(对，又是IE)，IE9以下BOM和DOM对象就是使用C++以COM对象的形式实现的。</p> <p>COM的垃圾收集机制采用的就是引用计数策略，这种机制在出现循环引用的时候永远都释放不掉内存。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'something'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> myObject <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyObject<span class=\\\"token punctuation\\\">.</span>element <span class=\\\"token operator\\\">=</span> element<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// element属性指向dom</span>\\nelement<span class=\\\"token punctuation\\\">.</span>someThing <span class=\\\"token operator\\\">=</span> myObject<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// someThing回指myObject 出现循环引用(两个对象一直互相包含 一直存在计数)。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div><p>解决方式是，当我们不使用它们的时候，手动切断链接：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>myObject<span class=\\\"token punctuation\\\">.</span>element <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span> \\nelement<span class=\\\"token punctuation\\\">.</span>someThing <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><p><strong>淘汰</strong>：</p> <p>IE9把BOM和DOM对象转为了真正的js对象，避免了使用这种垃圾收集策略，消除了IE9以下常见的内存泄漏的主要原因。</p> <p>IE7以下有一个声明狼藉的性能问题，大家了解一下：</p> <ol><li>256个变量，4096个对象(或数组)字面或者64KB的字符串，达到任何一个临界值会触发垃圾收集器运行。</li> <li>如果一个js脚本的生命周期一直保有那么多变量，垃圾收集器会一直频繁的运行，引发严重的性能问题。</li></ol> <p>IE7已修复这个问题。</p> <hr> <h2 id=\\\"哪些情况会引起内存泄漏？\\\"><a href=\\\"#哪些情况会引起内存泄漏？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 哪些情况会引起内存泄漏？</h2> <p>虽然有垃圾回收机制，但我们在编写代码的时候，有些情况还是会造成内存泄漏，了解这些情况，并在编写程序的时候，注意避免，我们的程序会更具健壮性。</p> <h3 id=\\\"意外的全局变量：\\\"><a href=\\\"#意外的全局变量：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 意外的全局变量：</h3> <p>上文我们提到了<strong>全局变量不会被当成垃圾回收</strong>，我们在编码中有时会出现下面这种情况：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>bar2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'默认绑定this指向全局'</span> <span class=\\\"token comment\\\">// 全局变量=&gt; window.bar2</span>\\n    bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'全局变量'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没有声明变量 实际上是全局变量=&gt;window.bar</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当我们使用\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b3715def265da59af40a630#heading-3\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"默认绑定\"),_c('OutboundLink')],2),_vm._ssrNode(\"，this会指向全局，<code>this.something</code>也会创建一个全局变量，这一点可能很多人没有注意到。\")],2),_vm._ssrNode(\" <p><strong>解决方法：在函数内使用严格模式or细心一点</strong></p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">&quot;use strict&quot;</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>bar2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;严格模式下this指向undefined&quot;</span><span class=\\\"token punctuation\\\">;</span> \\n    bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;报错&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>当然我们也可以<strong>手动释放全局变量的内存</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span>bar <span class=\\\"token operator\\\">=</span> undefined\\n<span class=\\\"token keyword\\\">delete</span> window<span class=\\\"token punctuation\\\">.</span>bar2\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"被遗忘的定时器和回调函数\\\"><a href=\\\"#被遗忘的定时器和回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 被遗忘的定时器和回调函数</h3> <p>当<strong>不需要</strong><code>setInterval</code>或者<code>setTimeout</code>时，<strong>定时器没有被clear</strong>，定时器的<strong>回调函数以及内部依赖的变量都不能被回收</strong>，造成内存泄漏。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> someResource <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Node'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        node<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>someResource<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 定时器也没有清除</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// node、someResource 存储了大量数据 无法回收</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p><strong>解决方法</strong>： 在定时器完成工作的时候，手动清除定时器。</p> <h3 id=\\\"闭包：\\\"><a href=\\\"#闭包：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 闭包：</h3> <p><strong>闭包可以维持函数内局部变量，使其得不到释放，造成内存泄漏</strong>。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bindEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;XXX&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">unused</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'闭包内引用obj obj不会被释放'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// obj = null;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br></div></div><p><strong>解决方法</strong>：手动解除引用，<code>obj = null</code>。</p> <h3 id=\\\"循环引用问题\\\"><a href=\\\"#循环引用问题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 循环引用问题</h3> <p>就是IE9以下的循环引用问题，上文讲过了。</p> <h3 id=\\\"没有清理dom元素引用：\\\"><a href=\\\"#没有清理dom元素引用：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 没有清理DOM元素引用：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> refA <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'refA'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>refA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// dom删除了</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>refA<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;refA&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 但是还存在引用 能console出整个div 没有被回收</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"不信的话，可以看下这个\"),_vm._ssrNode(\"<a href=\\\"https://codepen.io/OBKoro1/pen/vroKbg\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"dom\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p><strong>解决办法</strong>：<code>refA = null</code>;</p> <h3 id=\\\"console保存大量数据在内存中。\\\"><a href=\\\"#console保存大量数据在内存中。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> console保存大量数据在内存中。</h3> <p>过多的console，比如定时器的console会导致浏览器卡死。</p> <p><strong>解决</strong>：合理利用console，线上项目尽量少的使用console，当然如果你要发招聘除外。</p> <hr> <h3 id=\\\"如何避免内存泄漏：\\\"><a href=\\\"#如何避免内存泄漏：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何避免内存泄漏：</h3> <p><strong>记住一个原则：不用的东西，及时归还，毕竟你是'借的'嘛</strong>。</p> <ol><li>减少不必要的全局变量，使用严格模式避免意外创建全局变量。</li> <li>在你使用完数据后，及时解除引用(闭包中的变量，dom引用，定时器清除)。</li> <li>组织好你的逻辑，避免死循环等造成浏览器卡顿，崩溃的问题。</li></ol> <h3 id=\\\"关于内存泄漏：\\\"><a href=\\\"#关于内存泄漏：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 关于内存泄漏：</h3> <ol><li>即使是1byte的内存，也叫内存泄漏，并不一定是导致浏览器崩溃、卡顿才能叫做内存泄漏。</li> <li>一般是堆区内存泄漏，栈区不会泄漏。</li></ol> <p>基本类型的值存在内存中，被保存在栈内存中，引用类型的值是对象，保存在堆内存中。所以<strong>对象、数组之类的，才会发生内存泄漏</strong>。</p> \"),_vm._ssrNode(\"<ol start=\\\"3\\\">\",\"</ol>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"使用chorme监控内存泄漏，可以看一下这篇\"),_vm._ssrNode(\"<a href=\\\"https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"文章\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>了解了内存泄漏的原因以及出现的情况，那么我们在编码过程中只要多加注意，就不会发生非常严重的内存泄漏问题。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./js垃圾回收机制.md?vue&type=template&id=5c0aea84&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"68e4e7c4\"\n  \n)\n\ncomponent.options.__file = \"js垃圾回收机制.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "35.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/accumulate/tool/忍者秘籍定时器机制.md?a5c0",
        "webpack:///./docs/accumulate/tool/忍者秘籍定时器机制.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,4oLAA4oL,sUAAsU,0IAA0I;AAC5tM;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "35.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"js忍者秘籍中的定时器机制详解\\\"><a href=\\\"#js忍者秘籍中的定时器机制详解\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> JS忍者秘籍中的定时器机制详解</h2> <p>前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。</p> <h3 id=\\\"准备\\\"><a href=\\\"#准备\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 准备</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"阅读本文之前，推荐先阅读\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b24b116e51d4558a65fdb70\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Js 的事件循环(Event Loop)机制以及实例讲解\"),_c('OutboundLink')],2),_vm._ssrNode(\"这篇文章来理解背后发生的事情，本文对事件循环机制不会很仔细的讲解。\")],2),_vm._ssrNode(\" <h3 id=\\\"定时器解决的问题：\\\"><a href=\\\"#定时器解决的问题：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 定时器解决的问题：</h3> <p>由于JS的单线程特性，定时器提供了一种跳出单线程限制的方法，即让一段代码在一定毫秒之后，再异步执行。</p> <h3 id=\\\"设置和清除定时器：\\\"><a href=\\\"#设置和清除定时器：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 设置和清除定时器：</h3> <p>直接引用忍者秘籍中的图片：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/17/1640c7f6e32c21c3?w=620&h=172&f=png&s=80063\\\" alt></p> <h3 id=\\\"注意：\\\"><a href=\\\"#注意：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注意：</h3> <ol><li>定时器的时间间隔设为0，也会有几毫秒的延迟。</li> <li>在使用<code>setTimeout</code>和<code>setInterval</code>的时候最好将其赋值给一个变量，以便取消定时器。</li> <li>在使用<code>Vue</code>的时候，<code>setTimeout</code>和<code>setInterval</code>的this指向的是window对象，访问不到组件数据以及方法。</li> <li>在使用<code>Vue</code>的时候，路由跳转并不会销毁<code>setInterval</code>，但是组件已经销毁了，这会导致问题。</li> <li>在执行线程中<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数的。</li> <li><code>setInterval</code>调用有可能会被废弃以及<code>setInterval</code>的连续执行</li></ol> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"第三点和第四点的解决方法可以参考我之前写的\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5a587b46f265da3e3b7a7677#heading-4\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue 实践过程中的几个问题\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <p>接下来要讲的是第五点和第六点，这两点是最重要，也是本文要重点解析的内容。</p> <h2 id=\\\"执行线程中的定时器执行\\\"><a href=\\\"#执行线程中的定时器执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 执行线程中的定时器执行</h2> <p>下面来看忍者秘籍中的栗子：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/6/17/1640ca6240fb3eeb?w=654&h=384&f=png&s=103797\\\" alt></p> <p>让我们看看这里发生了什么事情：</p> <ol><li>首先在0毫秒的时候有一个持续18毫秒的js代码块要执行。</li> <li>然后在0毫秒的时候设了两个10毫秒延迟的定时器，<code>setTimeout</code>以及<code>setInterval</code>,<code>setTimeout</code>先设定。</li> <li>在第6毫秒的时候有一个发生了鼠标单击事件。</li></ol> <h3 id=\\\"事件排队。\\\"><a href=\\\"#事件排队。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件排队。</h3> <p>同时发生了这么多事情，由于js的单线程特性，<strong>当线程正在执行状态，有异步事件触发时，它就会排队，并且在线程空闲时才进行执行</strong>。</p> <pre><code>    这里的异步事件包括：鼠标单击，定时器触发，ajax请求、promise等事件。\\n</code></pre> <p>让我们回到栗子中：</p> <p>栗子中首先有一个18毫秒的代码块要执行，在这18毫秒中只能执行这段代码块，<strong>其他事件触发了之后只能排队等待执行</strong>。</p> <p>在代码块还在运行期间，第6毫秒的时候，发生了一个鼠标单击事件，以及第10毫秒时的<code>setTimeout</code>和<code>setInterval</code>两个处理程序，这三个事件不能立即执行，而是<strong>被添加到等待执行的队列</strong>中。</p> <h3 id=\\\"先进先出-先排队的先执行\\\"><a href=\\\"#先进先出-先排队的先执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先进先出(先排队的先执行)</h3> <p>18毫秒的时候代码块结束执行，有三个任务在排队等待执行，根据<strong>先进先出的原则，此时会先执行click事件</strong>，<code>setTimeout</code>和<code>setInterval</code>将继续排队等待执行。</p> <h3 id=\\\"setinterval调用被废弃\\\"><a href=\\\"#setinterval调用被废弃\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval调用被废弃</h3> <p>在click事件执行时，第20毫秒处，第二个<code>setInterval</code>也到期了，因为此时已经click事件占用了线程，所以<code>setInterval</code>还是不能被执行，并且因为此时<strong>队列中已经有一个<code>setInterval</code>正在排队等待执行，所以这一次的<code>setInterval</code>的调用将被废弃</strong>。</p> <p><strong>浏览器不会对同一个setInterval处理程序多次添加到待执行队列。</strong></p> <h3 id=\\\"settimeout-setinterval无法保证准时执行回调函数\\\"><a href=\\\"#settimeout-setinterval无法保证准时执行回调函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数</h3> <p>click事件在第28毫秒处结束执行，有两个任务(<code>setTimeout</code>和<code>setInterval</code>)正在等待执行，遵循先进先出的原则，<code>setTimeout</code>早于<code>setInterval</code>设定，所以先执行<code>setTimeout</code>。</p> <p>so:<strong>我们期望在第10毫秒处执行的<code>setTimeout</code>处理程序，最终会在第28毫秒处才开始执行</strong>，这就是上文提到的<code>setTimeout</code>/<code>setInterval</code>无法保证准时执行回调函数。</p> <p>在30毫秒处，<code>setInterval</code>又触发了，因为队列中已经有<code>setInterval</code>在排队，所以这次的触发又作废了。</p> <h3 id=\\\"setinterval的连续执行\\\"><a href=\\\"#setinterval的连续执行\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setInterval的连续执行</h3> <p><code>setTimeout</code>执行结束，在第36毫秒处，队列中的<code>setInterval</code>处理程序才开始执行，<code>setInterval</code>需要执行6毫秒。</p> <p>在第40毫秒的时候<code>setInterval</code>再次触发，因为此时<strong>上一个<code>setInterval</code>正在执行期间，队列中并没有<code>setInterval</code>在排队，这次触发的<code>setInterval</code>将进入队列等候</strong>。</p> <p>所以：<code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</p> <p>第42毫秒的时候，<strong>第一个<code>setInterval</code>结束，然后队列中的<code>setInterval</code>立即开始执行</strong>，在48毫秒的时候完成执行。然后50毫秒的时候再次触发<code>setInterval</code>，此时没有任务在排队，将会立即执行。</p> <h3 id=\\\"settimeout按照一定的间隔周期性的触发定时器。\\\"><a href=\\\"#settimeout按照一定的间隔周期性的触发定时器。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> setTimeout按照一定的间隔周期性的触发定时器。</h3> <p>上文说了，<strong><code>setInterval</code>的处理时长不能比设定的间隔长，否则<code>setInterval</code>将会没有间隔的重复执行</strong>。</p> <p>但是对这个问题，很多情况下，我们并不能清晰的把控处理程序所消耗的时长，为了我们能<strong>按照一定的间隔周期性的触发定时器</strong>，忍者秘籍中提供了下面这种使用方法：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 实际上我不止在忍者秘籍中见过，在很多地方都见过这种技术。</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">repeatMe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// do something</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>repeatMe<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token comment\\\">// 执行完处理程序的内容后，在末尾再间隔10毫秒来调用该程序，这样就能保证一定是10毫秒的周期调用</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><hr> <h3 id=\\\"忍者秘籍中关于定时器的其他知识：\\\"><a href=\\\"#忍者秘籍中关于定时器的其他知识：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 忍者秘籍中关于定时器的其他知识：</h3> <ul><li>定时器不能非常细粒化的控制执行的时间，书中建议在15ms以上。</li> <li>可以使用定时器来分解长时间运行的任务，这里可以自行谷歌。</li></ul> <h3 id=\\\"任务队列只有排队这么简单吗？\\\"><a href=\\\"#任务队列只有排队这么简单吗？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 任务队列只有排队这么简单吗？</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"事实上，关于任务队列并不是只有简单的排队而已，忍者秘籍中提到为了方便，使用了这个概念，如果希望能更清晰的了解背后的机制，再次推荐阅读一下：\"),_vm._ssrNode(\"<a href=\\\"https://juejin.im/post/5b24b116e51d4558a65fdb70\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Js 的事件循环(Event Loop)机制以及实例讲解\"),_c('OutboundLink')],2),_vm._ssrNode(\"，\")],2),_vm._ssrNode(\" <h2 id=\\\"小结\\\"><a href=\\\"#小结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 小结</h2> <p>这上面所有一切，都是由js单线程特性导致的，所以会有事件排队、先进先出、setInterval调用被废弃、定时器无法保证准时执行回调函数以及出现setInterval的连续执行，时刻记住这一特性，很多关于事件执行顺序的问题都能想的通，并且找出解决方法。</p> <h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"游泳、健身了解一下：\"),_vm._ssrNode(\"<a href=\\\"http://obkoro1.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"博客\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"前端算法\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"公众号\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./忍者秘籍定时器机制.md?vue&type=template&id=17c2a9be&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"710f87d9\"\n  \n)\n\ncomponent.options.__file = \"忍者秘籍定时器机制.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "36.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/README.md?a6b1",
        "webpack:///./docs/algorithm/README.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,m0BAAm0B,OAAO,qBAAqB;AAC/9B;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6F",
      "file": "36.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"前端算法\\\"><a href=\\\"#前端算法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端算法</h2> <p>可以跟着本文档的栗子来慢慢学习一下算法，对于提高自身的编程和逻辑能力也是相当有效的一个途径。</p> <p>文档会将算法按照<strong>难度分级</strong>，代码中都有<strong>详细注释</strong>，且会提供<strong>多种解法</strong>。</p> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">TIP</p> <p>重要的是解题的思路，扩展我们的脑洞，不要拘泥于应试！</p></div> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果觉得本文档还不错的话，记得给个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Star\"),_c('OutboundLink')],2),_vm._ssrNode(\"鼓励一下我吧~\")],2),_vm._ssrNode(\" <h2 id=\\\"前端积累\\\"><a href=\\\"#前端积累\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 前端积累</h2> <p>这个模块是我平时的一些积累，用以记录一些上手即用的东西/知识点等内容，范围较广。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_c('router-link',{attrs:{\"to\":\"/accumulate/\"}},[_vm._v(\"传送门\")])],1),_vm._ssrNode(\" <h3 id=\\\"公众号：\\\"><a href=\\\"#公众号：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 公众号：</h3> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"扫描公众号二维码:\"),_vm._ssrNode(\"<a href=\\\"https://user-gold-cdn.xitu.io/2018/5/1/1631b6f52f7e7015?w=344&h=344&f=jpeg&s=8317\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"OBKoro1的学习分享\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>有新的文章，算法题，面试题等都会第一时间发布与公众号上。</p>\")],2)])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./README.md?vue&type=template&id=13b98f18&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2850571c\"\n  \n)\n\ncomponent.options.__file = \"README.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "37.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/induction/反转3位整数.md?486d",
        "webpack:///./docs/algorithm/induction/反转3位整数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,iqCAAiqC,yyBAAyyB,4CAA4C,0CAA0C,8rBAA8rB,qrCAAqrC,8OAA8O,qkBAAqkB,qTAAqT,g9BAAg9B,qGAAqG,0CAA0C;AAC1tM;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0F",
      "file": "37.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"反转一个-3-位整数\\\"><a href=\\\"#反转一个-3-位整数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 反转一个 3 位整数</h1> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>反转一个只有 3 位数的整数</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>123 反转之后是 321。\\n900 反转之后是 9。</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li><code>009</code>这种形式需要转为<code>9</code></li> <li>最后输出的数字。</li></ul> <hr> <h3 id=\\\"转数组操作\\\"><a href=\\\"#转数组操作\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转数组操作:</h3> <p>这是最简单，最容易想到的答案：</p> <ol><li>数字转成字符串再转成数组</li> <li>颠倒数组(翻转了),恢复成字符串</li> <li>输出正常数字，这里用了+号。(用<code>parseInt</code>等也是可以的)</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h3 id=\\\"取余数，逐个颠倒\\\"><a href=\\\"#取余数，逐个颠倒\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 取余数，逐个颠倒</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">100</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">%</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">10</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><p>通过取余操作，个位转百位，十位转十位，百位转个位。</p> <p>比如：123=&gt;300+20+1,输出321</p> <h3 id=\\\"拼接字符串：\\\"><a href=\\\"#拼接字符串：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 拼接字符串：</h3> <ul><li>数字转字符串</li> <li>从后往前取对应位置字符,拼接成一个颠倒的字符串</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>number<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取对应位置字符，拼接成新的字符串</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./反转3位整数.md?vue&type=template&id=66dd365e&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2f16567d\"\n  \n)\n\ncomponent.options.__file = \"反转3位整数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "38.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/induction/数组重复次数.md?a35b",
        "webpack:///./docs/algorithm/induction/数组重复次数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,w2BAAw2B,yIAAyI,ulCAAulC,8VAA8V,0CAA0C,qPAAqP,6LAA6L,2CAA2C,yQAAyQ,iPAAiP,iOAAiO,yFAAyF,qPAAqP,mJAAmJ,+FAA+F,gDAAgD,qFAAqF,uRAAuR,gDAAgD,8CAA8C,oFAAoF,8FAA8F,4CAA4C,0CAA0C;AAC1kK;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "38.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"找出数组重复次数最多的元素\\\"><a href=\\\"#找出数组重复次数最多的元素\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 找出数组重复次数最多的元素</h2> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个字符串数组, 每一个元素代表一个 IP 地址，找到出现频率最高的 IP。</p> <p>注：给定数据只有一个频率最高的 IP</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>lines <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'192.118.2.1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'192.168.1.1'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>说了一堆，其实就是找出数组重复次数最多的元素</p> <p>思路：</p> <p>用对象来处理，将元素赋值到属性上，判断之前有没有这个属性。</p> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">数组去重</p> <p>虽然对象属性同样可以用来做数组去重，但是会将 number,NaN,undefined,null，变为字符串形式，因为对象的属性名就是一个字符串</p></div> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param ipLines: ip  address\\n * @return: return highestFrequency ip address\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">highestFrequency</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>ipLines<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  ipLines<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 已经有值了 就把值+1</span>\\n      obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 判断重复次数有没有超过当前最高的</span>\\n        max <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 重复次数</span>\\n        name <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 当前元素</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 没有值 就初始化一个值</span>\\n      obj<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./数组重复次数.md?vue&type=template&id=39846e46&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"10bf9e4f\"\n  \n)\n\ncomponent.options.__file = \"数组重复次数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "39.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/induction/查找斐波纳契数列中第N个数.md?cfa3",
        "webpack:///./docs/algorithm/induction/查找斐波纳契数列中第N个数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,y/DAAy/D,2CAA2C,uVAAuV,KAAK,4MAA4M,KAAK,6CAA6C,qKAAqK,4IAA4I,8CAA8C,8ZAA8Z,+LAA+L,2CAA2C,6fAA6f,snBAAsnB,8OAA8O,8CAA8C,0CAA0C,kQAAkQ,kVAAkV,mJAAmJ,4CAA4C,0CAA0C,06BAA06B,2CAA2C,yiBAAyiB,yPAAyP,6CAA6C,4CAA4C,+HAA+H,qIAAqI,2FAA2F,2FAA2F,0NAA0N,8FAA8F,oTAAoT,2FAA2F,4CAA4C,0CAA0C,+7BAA+7B,2CAA2C,2fAA2f,6SAA6S,mTAAmT,6CAA6C,2HAA2H,+HAA+H,siBAAsiB,wHAAwH,gQAAgQ,oGAAoG,0CAA0C;AAC15Y;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0F",
      "file": "39.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"查找斐波纳契数列中第-n-个数\\\"><a href=\\\"#查找斐波纳契数列中第-n-个数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 查找斐波纳契数列中第 N 个数</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p><strong>所谓的斐波纳契数列是指</strong>：</p> <p>前 2 个数是 0 和 1 。</p> <p>第 i 个数是第 i-1 个数和第 i-2 个数的和。</p> <p><strong>斐波纳契数列的前 10 个数字是</strong>：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">34</span> <span class=\\\"token operator\\\">...</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"怎样算解成功：\\\"><a href=\\\"#怎样算解成功：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 怎样算解成功：</h3> <p>给定 1，返回 0</p> <p>给定 2，返回 1</p> <p>给定 10，返回 34</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>值得注意的是：前两个数字可以算成是起始元素，从第三个元素才开始有规则。</p> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>递归解法：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> n <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'number'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> n <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'请输入大于0的整数数字'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">var</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">temp</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">||</span> n <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 递归获取推算数组每一个元素的值</span>\\n    <span class=\\\"token keyword\\\">return</span> array<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">temp</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将数组恢复成 斐波纳契数列</span>\\n  <span class=\\\"token keyword\\\">return</span> num<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><ol start=\\\"2\\\"><li>遍历保存结果</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">,</span>\\n    d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    c <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n    a <span class=\\\"token operator\\\">=</span> b<span class=\\\"token punctuation\\\">;</span>\\n    b <span class=\\\"token operator\\\">=</span> c<span class=\\\"token punctuation\\\">;</span>\\n    d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 加戏 恢复数列</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>d<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'斐波纳契数列'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><ol start=\\\"3\\\"><li>一次遍历 逐步推导所有元素 时间消耗:158ms 最优</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fill</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化数组，并设置初始值</span>\\n  num<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置第二个元素的值 推导第3个元素</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> num<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 遍历逐步推导元素值 数组完全符合数列不用进行判断等 运行效率最高。</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> num<span class=\\\"token punctuation\\\">[</span>n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组是从0开始计算 所以要减1</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><p>不行，我一定要秀一波，不然心里难受：</p> <p><img src=\\\"https://user-gold-cdn.xitu.io/2018/8/5/1650894f0e88c323?w=3002&h=1766&f=jpeg&s=383340\\\" alt></p> <p>最后一题的提交，甩的第二名看不到我的车尾灯，开心！</p> <p>第一回刷算法题，以后要继续坚持！</p> \"),_vm._ssrNode(\"<h3 id=\\\"代码地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm/blob/master/codeSource/FibonacciSequence.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.5</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./查找斐波纳契数列中第N个数.md?vue&type=template&id=51cea600&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3d022c93\"\n  \n)\n\ncomponent.options.__file = \"查找斐波纳契数列中第N个数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "40.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/induction/水仙花数.md?4e01",
        "webpack:///./docs/algorithm/induction/水仙花数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,gnDAAgnD,2CAA2C,kWAAkW,iWAAiW,4NAA4N,oSAAoS,6CAA6C,4CAA4C,+HAA+H,oeAAoe,mHAAmH,8NAA8N,qIAAqI,gGAAgG,qFAAqF,sIAAsI,8CAA8C,4CAA4C,0CAA0C,kmCAAkmC,2CAA2C,u9BAAu9B,4PAA4P,iNAAiN,8CAA8C,uNAAuN,6CAA6C,8CAA8C,+HAA+H,oTAAoT,wNAAwN,2PAA2P,6CAA6C,4CAA4C,+HAA+H,kiBAAkiB,qHAAqH,8NAA8N,8NAA8N,gDAAgD,8CAA8C,6FAA6F,4CAA4C,0CAA0C;AACl4T;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "40.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"水仙花数\\\"><a href=\\\"#水仙花数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 水仙花数</h2> <h3 id=\\\"水仙花数的定义：\\\"><a href=\\\"#水仙花数的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 水仙花数的定义：</h3> <p><strong>一个 N 位非负整数，其各位数字的 N 次方和等于该数本身</strong>。</p> <p>栗子：</p> <p>153 = 13^3 + 53^3 + 33^3</p> <p>370 = 3^3 + 7^3 + 0^3</p> <p>371 = 3^3 + 7^3 + 1^3</p> <p>1634 = 14^4 + 64^4 + 34^4 + 44^4。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"更详细的推荐：\"),_vm._ssrNode(\"<a href=\\\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"维基百科\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给出<code>n</code>，找到所有的<code>n</code>位十进制水仙花数。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>比如 <code>n = 1</code>, 所有水仙花数为：<code>[0,1,2,3,4,5,6,7,8,9]</code>。</p> <p>而对于 <code>n = 2</code>, 则没有 2 位的水仙花数，返回 <code>[]</code>。</p> <h3 id=\\\"题目分析\\\"><a href=\\\"#题目分析\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析:</h3> <p>弄懂水仙花数！</p> <hr> <h3 id=\\\"判断一个数是否为水仙花数：\\\"><a href=\\\"#判断一个数是否为水仙花数：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断一个数是否为水仙花数：</h3> <p>要找出水仙花数，首先我们需要能识别一个数是否为水仙花数：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 判断一个数是否为水仙花数</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isTrue</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> n <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数的长度</span>\\n  <span class=\\\"token keyword\\\">const</span> str <span class=\\\"token operator\\\">=</span> num<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符 等下取数字</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 总数</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    total <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">===</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最终相等 即为正确</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br></div></div><h3 id=\\\"找出所有的n位十进制水仙花数\\\"><a href=\\\"#找出所有的n位十进制水仙花数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 找出所有的<code>n</code>位十进制水仙花数</h3> <ul><li>确定查找的范围(找出n位的最大值与最小值)</li> <li>遍历每个数，判断为水仙花数，添加到数组中</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getNarcissisticNumbers</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> min <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// n == 1的时候，min应该等于0，但是min等于1,所以这边手动判断一下。</span>\\n    min <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> min<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> max<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> str <span class=\\\"token operator\\\">=</span> j<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n    <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 判断一个数是否为水仙花数</span>\\n      total <span class=\\\"token operator\\\">+=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符串一个字符一个字符拿出来 计算其各位数字的N次方和</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">===</span> total<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br></div></div><p><strong>注意：</strong></p> <p>查找位数过大会出现性能问题，以及最大值溢出问题。</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./水仙花数.md?vue&type=template&id=761ec4ef&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f3545464\"\n  \n)\n\ncomponent.options.__file = \"水仙花数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "41.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/template.md?7674",
        "webpack:///./docs/algorithm/simple/template.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB;AAChI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+F",
      "file": "41.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./template.md?vue&type=template&id=4c1c82d2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"8187731a\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "42.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/两数之和.md?e501",
        "webpack:///./docs/algorithm/simple/两数之和.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,ymCAAymC,qYAAqY,0CAA0C,0CAA0C,mhCAAmhC,qYAAqY,mIAAmI,0CAA0C,0CAA0C,6YAA6Y,6CAA6C,kGAAkG,+HAA+H,mOAAmO,2TAA2T,2WAA2W,kHAAkH,qFAAqF,ySAAyS,4FAA4F,8CAA8C,iXAAiX,4CAA4C,0CAA0C,23CAA23C,m6CAAm6C,kbAAkb,oRAAoR,yYAAyY,6CAA6C,gDAAgD,+HAA+H,wiBAAwiB,iGAAiG,8CAA8C,4CAA4C,0CAA0C,23CAA23C,u/BAAu/B,kbAAkb,oRAAoR,seAAse,iXAAiX,wOAAwO,8FAA8F,8CAA8C,4CAA4C,0CAA0C,23CAA23C;AACh8gB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "42.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"两数之和\\\"><a href=\\\"#两数之和\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 两数之和</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。</p> <p>你需要实现的函数 twoSum 需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 0 到 n-1。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 numbers = [2, 7, 11, 15], target = 9, 返回 [0, 1].</p> <p>给出 numbers = [2, 33, 11, 2], target = 4, 返回 [0, 3].</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p><code>target</code>减去每个元素的值，得出来的值，就是我们要搜索的值。</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>转成对象：</li></ol> <p>这是别人的一种解法，比下面的解法复杂点，可以看看，扩展一下思路。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param numbers: An array of Integer\\n * @param target: target = numbers[index1] + numbers[index2]\\n * @return: [index1, index2] (index1 &lt; index2)\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> map <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// key : the complement (target - num)</span>\\n  <span class=\\\"token comment\\\">// value: index for that num</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> numbers<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> num <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>map<span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 找到值</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>map<span class=\\\"token punctuation\\\">[</span>num<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次保存的index 和 刚找到的下标 即结果。</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 第一次进入 保存 要搜索的值和index</span>\\n      map<span class=\\\"token punctuation\\\">[</span>target <span class=\\\"token operator\\\">-</span> num<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 第一次</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br></div></div><ol start=\\\"2\\\"><li>双循环</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> target <span class=\\\"token operator\\\">-</span> numbers<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要搜索的值</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&gt;</span> index<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 倒序查找，跳过已经遍历过的值</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">===</span> numbers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 搜索到了 即找到</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><ol start=\\\"3\\\"><li>indexOf()</li></ol> <p><code>indexOf</code>的第二个参数是开始搜索的位置，也可以跳过前面已经搜索过的值。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">twoSum</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>numbers<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> target <span class=\\\"token operator\\\">-</span> numbers<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 相减</span>\\n    <span class=\\\"token keyword\\\">let</span> search <span class=\\\"token operator\\\">=</span> numbers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> index <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 跳过前面已经搜索过的，防止2+2=4 搜索两个2在同一个位置</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>search <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">,</span> search<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 直接返回值</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">twoSum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">33</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./两数之和.md?vue&type=template&id=35de140f&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"73b575a0\"\n  \n)\n\ncomponent.options.__file = \"两数之和.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "43.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/中位数.md?8e62",
        "webpack:///./docs/algorithm/simple/中位数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,mzCAAmzC,0CAA0C,0CAA0C,uuCAAuuC,mTAAmT,2CAA2C,uIAAuI,2FAA2F,oFAAoF,uLAAuL,2XAA2X,yiBAAyiB,4FAA4F,qFAAqF,mVAAmV,gGAAgG,4CAA4C,0CAA0C,8yCAA8yC,qTAAqT,kIAAkI,8iBAA8iB,qFAAqF,0CAA0C;AACziP;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "43.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"中位数\\\"><a href=\\\"#中位数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 中位数</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个未排序的整数数组，找到其中位数。</p> <p>中位数是排序后数组的中间值，如果数组的个数是偶数个，则返回排序后数组的第 N/2 个数。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出数组[4, 5, 1, 2, 3]， 返回 3</p> <p>给出数组[7, 9, 4, 5]，返回 5</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <ol><li>升序排序数组</li> <li>模拟几个数组的返回值，找到里面的规律，找出数组中对应元素。</li></ol> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>判断奇数偶数，找到对应的下标</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 升序排序</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> num <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 保存数组长度</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断奇数偶数</span>\\n    <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 奇数转偶数</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span>num <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 减一 对应数组下标</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><ol start=\\\"2\\\"><li>奇数上舍入，找到下标</li></ol> <p>两种写法一样，但无疑第二种写法更为优雅。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: An integer denotes the middle number of the array\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">median</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span> v2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> v1 <span class=\\\"token operator\\\">-</span> v2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span>Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ceil</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// </span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./中位数.md?vue&type=template&id=1b6f36f2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"cbca1ca6\"\n  \n)\n\ncomponent.options.__file = \"中位数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "44.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/分解质因数.md?2c82",
        "webpack:///./docs/algorithm/simple/分解质因数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,oqDAAoqD,uNAAuN,yJAAyJ,2RAA2R,uFAAuF,+CAA+C,+HAA+H,6SAA6S,oMAAoM,4QAA4Q,wHAAwH,8CAA8C,4aAA4a,iJAAiJ,4CAA4C,0CAA0C;AAC1uI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "44.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"分解质因数\\\"><a href=\\\"#分解质因数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 分解质因数</h1> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"质因数的定义：\\\"><a href=\\\"#质因数的定义：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 质因数的定义：</h3> <p>能整除给定正整数的质数。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"百度百科：\"),_vm._ssrNode(\"<a href=\\\"https://baike.baidu.com/item/%E8%B4%A8%E5%9B%A0%E6%95%B0#reference-%5B1%5D-341369-wrap\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"质因数\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <ol><li>将一个整数分解为若干质因数之乘积</li> <li>你需要从小到大排列质因子</li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <ul><li>给出 <code>10</code>, 返回 <code>[2, 5]</code></li> <li>给出 <code>660</code>, 返回 <code>[2, 2, 3, 5, 11]</code></li></ul> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>从小到大排列质因子，需要将同一个质因子整除干净。</p> <p>比如：20 可以被 2 整除两次。</p> <p>提示：需要两层循环。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 分解质因数</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">primeFactorization</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 不需要判定i是否为质数，如果i不为质数，且能整除num时，num早被i的因数所除。故能整除num的i必是质数。</span>\\n  <span class=\\\"token comment\\\">// i * i &gt; num 退出循环 num一开始会在第二层循环被i整除成比较小的数字</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">*</span> i <span class=\\\"token operator\\\">&lt;=</span> num<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">%</span> i <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 直到有余数退出循环</span>\\n      num <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">/</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 改变num</span>\\n      res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没有余数 能整除 这一步会找出所有质因数 不会出现4的那种情况</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// num到最后也是质因数</span>\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./分解质因数.md?vue&type=template&id=28647fb2&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"13760682\"\n  \n)\n\ncomponent.options.__file = \"分解质因数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "45.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/反转整数.md?bb05",
        "webpack:///./docs/algorithm/simple/反转整数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,qpDAAqpD,2CAA2C,kIAAkI,2HAA2H,glBAAglB,gtBAAgtB,kIAAkI,0FAA0F,qFAAqF,uQAAuQ,oqBAAoqB,2GAA2G,kIAAkI,ucAAuc,6eAA6e,mLAAmL,8CAA8C,2FAA2F,4CAA4C,0CAA0C,4lCAA4lC,6UAA6U,wKAAwK,+PAA+P,obAAob,4SAA4S,sHAAsH,oIAAoI,wIAAwI,4KAA4K,iIAAiI,8CAA8C,6FAA6F,4CAA4C,0CAA0C;AAC5iT;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "45.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"反转整数\\\"><a href=\\\"#反转整数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 反转整数</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给定 x = 123，返回 321</p> <p>给定 x = -123，返回 -321</p> <p>给定 x = 1534236469， 返回 0</p> <hr> <h3 id=\\\"这题很简单-自己想一下！\\\"><a href=\\\"#这题很简单-自己想一下！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-2\\\"><a href=\\\"#这题很简单-自己想一下！-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-3\\\"><a href=\\\"#这题很简单-自己想一下！-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <p>给</p> <p>你</p> <p>点</p> <p>时</p> <p>间</p> <p>想</p> <p>一</p> <p>下</p> <hr> <h3 id=\\\"解法：\\\"><a href=\\\"#解法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 解法：</h3> <ol><li>最优：转字符串 再转数组进行操作</li> <li>看到有人用四则运算+遍历反转整数，会把这个解法放到下面</li></ol> <h3 id=\\\"提示\\\"><a href=\\\"#提示\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 提示:</h3> <p>整数溢出的值为<code>Math.pow(2, 31) - 1</code>和<code>Math.pow(-2, 31) + 1</code>，转为数字：<code>2147483647</code>和<code>-2147483647</code></p> <p>这部分跟位操作符，二进制有关，有兴趣可以去搜下。</p> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>转数组操作：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> n <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    n <span class=\\\"token operator\\\">=</span> n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 负数提取数字</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'-'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转数字</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    n <span class=\\\"token operator\\\">=</span> n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转字符</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转为数组 颠倒数组 再合字符 最后转数字</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">&gt;=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">||</span> n <span class=\\\"token operator\\\">&lt;=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pow</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断溢出</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br></div></div><ol start=\\\"2\\\"><li>遍历，一位一位颠倒：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">reverseInteger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 从个位起一位一位的颠倒</span>\\n    res <span class=\\\"token operator\\\">=</span> res <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    n <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// n除以10， 一位数转化完成 到最后小于1 被转成0 退出循环</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">2147483647</span> <span class=\\\"token operator\\\">||</span> res <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2147483647</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> res<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"转数组操作运行效率也更高点：\\\"><a href=\\\"#转数组操作运行效率也更高点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转数组操作运行效率也更高点：</h3> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fujnet3b8vj318z0kh41p.jpg\\\" alt></p> \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.23</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./反转整数.md?vue&type=template&id=ac1abdc0&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"5cc5095c\"\n  \n)\n\ncomponent.options.__file = \"反转整数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "46.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/合并排序数组.md?be65",
        "webpack:///./docs/algorithm/simple/合并排序数组.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,62CAA62C,8XAA8X,8YAA8Y,2CAA2C,uIAAuI,6FAA6F,oFAAoF,4CAA4C,0CAA0C,+xCAA+xC,oIAAoI,uNAAuN,0UAA0U,6CAA6C,oIAAoI,KAAK,6CAA6C,kIAAkI,sFAAsF,sVAAsV,kNAAkN,mZAAmZ,2FAA2F,gDAAgD,qFAAqF,iYAAiY,8GAA8G,8CAA8C,4OAA4O,6KAA6K,+XAA+X,8CAA8C,qIAAqI,6KAA6K,+XAA+X,8CAA8C,6FAA6F,4CAA4C,0CAA0C;AACj8Q;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "46.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"合并排序数组\\\"><a href=\\\"#合并排序数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 合并排序数组</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>合并<strong>两个排序的整数数组 A 和 B 变成一个新的排序数组</strong>。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出<code>A=[1,2,3,4]</code>，<code>B=[2,4,5,6]</code>，返回 <code>[1,2,2,3,4,4,5,6]</code></p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>注意 A 和 B 本来就是排序好的数组，最简单的就是用<code>sort</code>排序了。</p> <h3 id=\\\"sort排序\\\"><a href=\\\"#sort排序\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> <code>sort</code>排序</h3> <ol><li>把两个数组合并成一个数组</li> <li>用 sort 升序进行排序。</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSortedArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> newArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 合并数组</span>\\n  <span class=\\\"token keyword\\\">return</span> newArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// sort排序</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"先对比完一个数组：\\\"><a href=\\\"#先对比完一个数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 先对比完一个数组：</h3> <ol><li><p><strong>初始两个变量分别对应一个数组</strong>，进入循环</p></li> <li><p><strong>i 和 j 不会同时递增</strong>，只在对应数组元素打败另一数组元素时才会递增，只要打败一个即可，因为两个数组一开始就是排序好的</p></li> <li><p><strong>i 和 j 必须有一个超过对应数组长度</strong>(这样至少有一个数组的元素被逐一比较过)</p></li> <li><p>如果一个数组那边超过长度，会退出循环，但是可能由一方的长度还有剩余（比如一个元素打败另一数组的所有元素），所以我们需要<strong>将长度有剩余的数组剩下的元素全都 push 到新数组中</strong>(因为一开始就排序好的，后面出场的只会更强)</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSortedArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// i或者j必须有一个超过对应数组长度 才退出循环 所以至少有一个数组的元素被逐一比较</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 下面两种写法是一样的</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这里会先把j赋值给B[j]， 然后再j++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 上面至少有一个数组已经比较了每个元素 如果还有一方长度有剩余 直接push进来就可以(AB一开始就是排序好的数组)</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./合并排序数组.md?vue&type=template&id=28fa6129&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"76fa6d0e\"\n  \n)\n\ncomponent.options.__file = \"合并排序数组.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "47.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/回文.md?ae9a",
        "webpack:///./docs/algorithm/simple/回文.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,uZAAuZ,SAAS,oCAAoC,UAAU,szBAAszB,k8BAAk8B,2CAA2C,yKAAyK,oQAAoQ,wIAAwI,2FAA2F,2YAA2Y,i6BAAi6B,gDAAgD,4FAA4F,6FAA6F,8CAA8C,mIAAmI,+FAA+F,0CAA0C,4XAA4X,2CAA2C,wIAAwI,2FAA2F,2YAA2Y,wIAAwI,uGAAuG,4FAA4F,6FAA6F,8CAA8C,mIAAmI,kLAAkL,0CAA0C,qpCAAqpC,2uEAA2uE,2CAA2C,qQAAqQ,qMAAqM,2FAA2F,6YAA6Y,2hCAA2hC,+GAA+G,8FAA8F,+FAA+F,gDAAgD,qIAAqI,iGAAiG,qFAAqF,0MAA0M,2FAA2F,6YAA6Y,0IAA0I,kDAAkD,8FAA8F,+FAA+F,gDAAgD,qIAAqI,sLAAsL,4CAA4C,0CAA0C,qpCAAqpC,40DAA40D,2CAA2C,iLAAiL,unBAAunB,6CAA6C,4CAA4C,mNAAmN,wEAAwE,8YAA8Y,6OAA6O,mMAAmM,kDAAkD,odAAod,kJAAkJ,iEAAiE,wGAAwG,6IAA6I,kDAAkD,ufAAuf,0EAA0E,iEAAiE,wGAAwG,6IAA6I,kDAAkD,qFAAqF,kOAAkO,kDAAkD,gDAAgD,8CAA8C,mIAAmI,4CAA4C,0CAA0C,qpCAAqpC;AACz1tB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "47.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"删除一个字母的回文\\\"><a href=\\\"#删除一个字母的回文\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 删除一个字母的回文</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>给定非空字符串 s，您最多可以删除一个字符。判断是否可以成为回文。</p> <p>该字符串仅包含小写字符 a-z,字符串的最大长度为 50000。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>Given s = &quot;aba&quot; return true</p> <p>Given s = &quot;abca&quot; return true // delete c</p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li>如果单单是回文的话，就很简单了:</li></ul> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>s <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>s<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 翻转字符串与原字符相比</span>\\n<span class=\\\"token comment\\\">// 实际上这里做了很多步操作，字符转数组 翻转数组 再转字符串，所以这里性能也不是很好</span>\\n<span class=\\\"token comment\\\">// 如果对性能要求比较高的话，还是通过循环从两侧向中间逐一比较，会更好一点</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><ul><li>题目中还有一个要求：删除一个字符，也就是允许一个字符的不同。</li> <li>下面我们的解法主体思路就是<strong>通过循环，从两侧向中间比较</strong>，然后解决当出现不同的情况，如何<strong>保证只允许出现一个不同</strong>。</li></ul> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li>出现一处不同 将值传入一个新函数，再进行判断字符串：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 左右两边字符都要尝试一下 一边返回true即可</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token function\\\">isSubPalindrom</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isSubPalindrom</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 再有不同之处 返回false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n  <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br></div></div><p>这个写好之后，我在想能不能通过递归的形式来解决，<strong>为什么要创建第二个函数</strong>？</p> <ol start=\\\"2\\\"><li>递归解法：</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> validPalindrome <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'first'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第一次进入允许出现一次不同</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span>\\n          <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'second'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 左右两边都尝试一下 一边返回true即可</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束返回true</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 第二次 再有不同之处 返回false</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">&lt;</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      left<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      right<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 循环结束一直相等返回true</span>\\n    <span class=\\\"token comment\\\">// 并且left不小于right 直接返回right，说明不同之处只有一个</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br></div></div><p>相对于上个解法这里就是多设置了一个变量，然后将两方区分开来，但是这样递归我还是觉得太傻了，所以在想你<strong>能不能通过设置变量来处理</strong>？出现两次不同即失败。</p> <ol start=\\\"3\\\"><li>设置一个变量允许一次不同</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">validPalindrome</span> <span class=\\\"token operator\\\">=</span> s <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> s<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> j<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 从两侧向中间递减 i- j-1 减到最后 i&gt;j i=j 退出循环</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果两侧不相同</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removed<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 只允许一次不同</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 转数组删除一个不同元素 下次直接return</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(j, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> s<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// s = [...s].splice(i, 1);</span>\\n        <span class=\\\"token comment\\\">// s = s.join(''); // 处理过的字符串</span>\\n        i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 上面两个else 右边-1 或左边+1相不相等 如果两边也不相等即false</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">'回文验证:'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abaacaaa'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ab'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abc'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">validPalindrome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'aabsjdbaa'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br><span class=\\\"line-number\\\">33</span><br><span class=\\\"line-number\\\">34</span><br><span class=\\\"line-number\\\">35</span><br><span class=\\\"line-number\\\">36</span><br></div></div>\"),_vm._ssrNode(\"<h3 id=\\\"代码地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#代码地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm/blob/9bc3c386129f03f93120265c88d4d6250bdcc416/codeSource/Palindrome.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"代码地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.12</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./回文.md?vue&type=template&id=358cc167&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"4ab407b8\"\n  \n)\n\ncomponent.options.__file = \"回文.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "48.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/姓名去重.md?3924",
        "webpack:///./docs/algorithm/simple/姓名去重.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,4vCAA4vC,47BAA47B,qlCAAqlC,2CAA2C,+TAA+T,2CAA2C,2WAA2W,4FAA4F,oFAAoF,oYAAoY,uFAAuF,0CAA0C,6fAA6f,WAAW,qFAAqF,gBAAgB,qFAAqF,iBAAiB,qFAAqF,gBAAgB,uVAAuV,gBAAgB,qFAAqF,iBAAiB,qFAAqF,gBAAgB,qFAAqF,WAAW,8xBAA8xB;AAC1iO;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "48.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"姓名去重\\\"><a href=\\\"#姓名去重\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 姓名去重</h2> <h3 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h3> <p>给一串名字，将他们去重之后返回。两个名字重复是说在忽略大小写的情况下是一样的。</p> <h3 id=\\\"说明：\\\"><a href=\\\"#说明：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 说明：</h3> <p>你可以假设名字只包含大小写字母和空格。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'James'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'james'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Bill Gates'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'bill Gates'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Hello World'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'HELLO WORLD'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'Helloworld'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br></div></div><p>返回：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'james'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bill gates'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'hello world'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'helloworld'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><hr> <h3 id=\\\"这题很简单-自己想一下！\\\"><a href=\\\"#这题很简单-自己想一下！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-2\\\"><a href=\\\"#这题很简单-自己想一下！-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-3\\\"><a href=\\\"#这题很简单-自己想一下！-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <p>给</p> <p>你</p> <p>点</p> <p>时</p> <p>间</p> <p>想</p> <p>一</p> <p>下</p> <hr> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <ul><li>思路就是：去重和转小写</li></ul> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <p>题目基本就像下面这样解了，其他的不过是循环的方法，去重的方法不同，事实上都大同小异。</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">nameDeduplication</span> <span class=\\\"token operator\\\">=</span> names <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  names<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    names<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 全部转小写</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>names<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 去重</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><p>再讲一个坑吧：</p> <p>题目描述的时候说是输出是这样的：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;james&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;bill gates&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;hello world&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;helloworld&quot;</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>当我把代码提交之后，告诉我，期望答案是这样的：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;bill gates&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;hello world&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;helloworld&quot;</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">&quot;james&quot;</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><p>一般来说不会这么坑：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>names<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 我在后面加了一个sort方法就符合他们的预期答案了。。</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"题目比较简单，就不放代码-上面就是-了。\\\"><a href=\\\"#题目比较简单，就不放代码-上面就是-了。\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目比较简单，就不放代码(上面就是)了。</h3> \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.16</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./姓名去重.md?vue&type=template&id=346252a0&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"3ec96a21\"\n  \n)\n\ncomponent.options.__file = \"姓名去重.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "49.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/字符串密钥格式.md?b5c7",
        "webpack:///./docs/algorithm/simple/字符串密钥格式.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,8rBAA8rB,iBAAiB,6BAA6B,eAAe,yBAAyB,cAAc,6BAA6B,aAAa,o/BAAo/B,wcAAwc,wYAAwY,sQAAsQ,qQAAqQ,qWAAqW,2KAA2K,ySAAyS,wKAAwK,+aAA+a,2FAA2F,0LAA0L,sUAAsU,gDAAgD,gTAAgT,mYAAmY,mRAAmR,mGAAmG,gLAAgL,yGAAyG,2GAA2G,4CAA4C,kDAAkD,8bAA8b,0VAA0V,sUAAsU,ujBAAujB,qLAAqL,4CAA4C,0CAA0C,yyBAAyyB;AAC1gT;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "49.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"字符串密钥格式\\\"><a href=\\\"#字符串密钥格式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串密钥格式</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <ol><li><p>给定字符串 S(非空)，字符串 S 仅由字母数字字符（a-z 和/或 A-Z 和/或 0-9）和短划线（ - ）组成。</p></li> <li><p>给定正整数 K，我们希望重新格式化字符串，使得<strong>每个组包含正好的 K 个字符</strong>，但<strong>第一个组可能比 K 短</strong>，但仍必须包含至少一个字符。</p></li> <li><p>必须在<strong>两个组之间插入短划线</strong>，并且所有<strong>小写字母都应转换为大写</strong></p></li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>Input: S = &quot;5F3Z-2e-9-w&quot;, K = 4</p> <p>Output: &quot;5F3Z-2E9W&quot;</p> <p>Input: S = &quot;2-5g-3-J&quot;, K = 2</p> <p>Output: &quot;2-5G-3J&quot;</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>处理字符串通常需要转成数组来处理，仔细观察输出和规则，总结规律。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li><p>去掉<code>-</code>，等下用<code>join</code>连接。</p></li> <li><p>字符串长度不能被K整除的话，需取余，将不能整除的部分拿出来。</p></li> <li><p>然后每隔几个<code>K</code>每割一下字符串，这里用了正则，返回一个数组。</p></li> <li><p>再跟之前被拿出来的部分，合并成一个数组。</p></li> <li><p>用<code>join</code>将数组转成字符串。</p></li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">licenseKeyFormatting</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">K</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/-/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 去掉所有的-</span>\\n  <span class=\\\"token keyword\\\">let</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 字符串总数</span>\\n  <span class=\\\"token keyword\\\">let</span> num <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">%</span> <span class=\\\"token constant\\\">K</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取余</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 字符串剩余的放在这个数组中</span>\\n  <span class=\\\"token comment\\\">// 字符串余数</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>num <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n      str <span class=\\\"token operator\\\">+=</span> arr<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 有多少个余数就将多少个字符 添加到字符串中</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">===</span> num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除已被添加的字符</span>\\n    <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// S重新变为字符串 用于下面操作</span>\\n    strArr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加到数组 等下用于连接</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> spliceNum <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\\\\\\\w{</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">K</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">}`</span></span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 几个字符串为一个间隔</span>\\n  <span class=\\\"token keyword\\\">let</span> reg <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span>spliceNum<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'gim'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>reg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 切割字符串返回数组</span>\\n  strArr <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>strArr2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 连接余数数组和切割的数组</span>\\n  <span class=\\\"token constant\\\">S</span> <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 连接字符串 并转为大写</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">S</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">licenseKeyFormatting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'5F3Z-2e-9-w'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">licenseKeyFormatting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2-5g-3-J'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./字符串密钥格式.md?vue&type=template&id=c37cc948&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"1c801bb0\"\n  \n)\n\ncomponent.options.__file = \"字符串密钥格式.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "50.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/搜索二维矩阵.md?1448",
        "webpack:///./docs/algorithm/simple/搜索二维矩阵.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,kgGAAkgG,+aAA+a,mRAAmR,+PAA+P,mTAAmT,obAAob,+WAA+W,uLAAuL,oDAAoD,8KAA8K,mLAAmL,2MAA2M,oDAAoD,kDAAkD,gDAAgD,8CAA8C,oIAAoI,kGAAkG,0CAA0C;AACp4M;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "50.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"搜索二维矩阵\\\"><a href=\\\"#搜索二维矩阵\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 搜索二维矩阵</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>写出一个高效的算法来搜索 m × n 矩阵中的值。</p> <p>这个矩阵具有以下特性：</p> <ol><li>每行中的整数从左到右是从小到大排序的。</li> <li>每行的第一个数大于上一行的最后一个整数。</li></ol> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">34</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div><p>给出 <code>target = 3</code>，返回 <code>true</code></p> <h3 id=\\\"题目分析：\\\"><a href=\\\"#题目分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 题目分析：</h3> <p>双循环找出是否有这个值，根据第二个特性，我们可以跳过一些第二层循环，算法更具效率。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param matrix: matrix, a list of lists of integers\\n * @param target: An integer\\n * @return: a boolean, indicate whether matrix contains target\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">searchMatrix</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>matrix<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">of</span> matrix<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历外层数组</span>\\n    <span class=\\\"token keyword\\\">let</span> value <span class=\\\"token operator\\\">=</span> matrix<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 拿到每行元素</span>\\n    <span class=\\\"token comment\\\">// 判断target是否在当前行中，跳过其他不必要循环</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">&lt;=</span> value<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 遍历行中元素 </span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 找到值</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>target <span class=\\\"token operator\\\">&lt;</span> value<span class=\\\"token punctuation\\\">[</span>item<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 值超过target即找不到(因为是排序的)</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 没有找到即返回false</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./搜索二维矩阵.md?vue&type=template&id=213a4116&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"9019b7da\"\n  \n)\n\ncomponent.options.__file = \"搜索二维矩阵.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "51.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/最大子数组.md?6a2e",
        "webpack:///./docs/algorithm/simple/最大子数组.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,wwCAAwwC,gQAAgQ,kTAAkT,4SAA4S,6CAA6C,+FAA+F,+HAA+H,shBAAshB,6WAA6W,6FAA6F,6FAA6F,4CAA4C,0CAA0C,woCAAwoC,iQAAiQ,2LAA2L,wSAAwS,6CAA6C,+FAA+F,+HAA+H,iOAAiO,sLAAsL,8KAA8K,8NAA8N,qNAAqN,+LAA+L,sYAAsY,oGAAoG,8FAA8F,4CAA4C,0CAA0C,qwCAAqwC,mIAAmI,8iBAA8iB,0CAA0C,sIAAsI,ueAAue,0CAA0C,yPAAyP,6CAA6C,+FAA+F,+HAA+H,wTAAwT,+KAA+K,oYAAoY,6NAA6N,gDAAgD,qFAAqF,wSAAwS,iJAAiJ,6NAA6N,gDAAgD,+OAA+O,yIAAyI,8LAA8L,kMAAkM,8LAA8L,gDAAgD,8CAA8C,6bAA6b,4LAA4L,4FAA4F,0CAA0C;AACj3c;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "51.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"最大子数组\\\"><a href=\\\"#最大子数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 最大子数组</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出数组[−2,2,−3,4,−1,2,1,−5,3]，符合要求的子数组为[4,−1,2,1]，其最大和为 6</p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>本题只要找出最大和即可，保存两个值，一个为元素之间相加的值(需比较元素相加的值与当前元素的大小)，一个为最大值。</p> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> max <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化最大值</span>\\n  <span class=\\\"token keyword\\\">let</span> newMax <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素相加的缓存值</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    newMax <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>newMax <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 相加是否大于当前值</span>\\n    max <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>newMax<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 与最大值相比</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> max<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><p>第二种方法更难理解点，可以扩展一下思路：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param nums: A list of integers\\n * @return: A integer indicate the sum of max subarray\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> nSum <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素相加的缓存值</span>\\n  <span class=\\\"token keyword\\\">var</span> nMax <span class=\\\"token operator\\\">=</span> nSum<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化最大值</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> curNum <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 当前元素</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>curNum <span class=\\\"token operator\\\">&gt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> nSum <span class=\\\"token operator\\\">=</span> nSum <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> nSum <span class=\\\"token operator\\\">+</span> curNum <span class=\\\"token punctuation\\\">:</span> curNum<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 如果两个值都大于0 两个值相加。否则就取后一个大于0的</span>\\n    <span class=\\\"token keyword\\\">else</span> nSum <span class=\\\"token operator\\\">=</span> nSum <span class=\\\"token operator\\\">&lt;</span> curNum <span class=\\\"token operator\\\">?</span> curNum <span class=\\\"token punctuation\\\">:</span> nSum <span class=\\\"token operator\\\">+</span> curNum<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果新加的值小于0 判断结果是否大于新加的值 小于的话就改为新加的值</span>\\n    nMax <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>nMax<span class=\\\"token punctuation\\\">,</span> nSum<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 最大值与数组元素相加值比较</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> nMax<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><h3 id=\\\"最大和的数组：\\\"><a href=\\\"#最大和的数组：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 最大和的数组：</h3> <p>如果你想把最大和的数组都找出来，你需要保存数组的开始下标和结束下标，这里我演示了第一个方法，下面那个方法也是一样：</p> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">maxSubArray</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> max <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">:</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    start<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token comment\\\">// 结束的下标 后面要切割数组 需比当前下标+1.把当前值也切割</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> newMax <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    num<span class=\\\"token punctuation\\\">:</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    start<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> nums<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&gt;</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 相加大于当前值 缓存改值和结束下标</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 小于当前值 重置start end</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>start <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n      newMax<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 最大值被超过 把值赋给最大值</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">&lt;</span> newMax<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      max<span class=\\\"token punctuation\\\">.</span>num <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">;</span>\\n      max<span class=\\\"token punctuation\\\">.</span>start <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>start<span class=\\\"token punctuation\\\">;</span>\\n      max<span class=\\\"token punctuation\\\">.</span>end <span class=\\\"token operator\\\">=</span> newMax<span class=\\\"token punctuation\\\">.</span>end<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> arr <span class=\\\"token operator\\\">=</span> nums<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">.</span>start<span class=\\\"token punctuation\\\">,</span> max<span class=\\\"token punctuation\\\">.</span>end<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 找出最大和的子数组</span>\\n  <span class=\\\"token keyword\\\">return</span> max<span class=\\\"token punctuation\\\">.</span>num<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 子数组的最大和</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br><span class=\\\"line-number\\\">19</span><br><span class=\\\"line-number\\\">20</span><br><span class=\\\"line-number\\\">21</span><br><span class=\\\"line-number\\\">22</span><br><span class=\\\"line-number\\\">23</span><br><span class=\\\"line-number\\\">24</span><br><span class=\\\"line-number\\\">25</span><br><span class=\\\"line-number\\\">26</span><br><span class=\\\"line-number\\\">27</span><br><span class=\\\"line-number\\\">28</span><br><span class=\\\"line-number\\\">29</span><br><span class=\\\"line-number\\\">30</span><br><span class=\\\"line-number\\\">31</span><br><span class=\\\"line-number\\\">32</span><br></div></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./最大子数组.md?vue&type=template&id=d277c782&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"394bcfc0\"\n  \n)\n\ncomponent.options.__file = \"最大子数组.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "52.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/比较字符串.md?136e",
        "webpack:///./docs/algorithm/simple/比较字符串.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,2dAA2d,UAAU,WAAW,SAAS,6BAA6B,UAAU,WAAW,UAAU,+yBAA+yB,0CAA0C,0CAA0C,80CAA80C,2uBAA2uB,igBAAigB,snBAAsnB,sZAAsZ,2GAA2G,qFAAqF,wIAAwI,sGAAsG,8CAA8C,mIAAmI,4CAA4C,0CAA0C,8wBAA8wB;AACjkN;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "52.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"比较字符串\\\"><a href=\\\"#比较字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 比较字符串</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>比较两个字符串 A 和 B，确定 A 中是否包含 B 中所有的字符。字符串 A 和 B 中的字符都是 大写字母</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 A = &quot;ABCD&quot; B = &quot;ACD&quot;，返回 true</p> <p>给出 A = &quot;ABCD&quot; B = &quot;AABC&quot;， 返回 false</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param A: A string\\n * @param B: A string\\n * @return: if string A contains all of the characters in B return true else return false\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compareStrings</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>将字符串转成数组来处理</p> <h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">compareStrings</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转成数组操作</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// B数组元素和A数组元素成功匹配</span>\\n      <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>find<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除A数组中已匹配到的，保持数量相等</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// B数组中有A不包含的字符串</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">compareStrings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ABCD'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ACD'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">compareStrings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ABC'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'A'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./比较字符串.md?vue&type=template&id=7ddb671e&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"2993c709\"\n  \n)\n\ncomponent.options.__file = \"比较字符串.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "53.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/simple/落单的数.md?902c",
        "webpack:///./docs/algorithm/simple/落单的数.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,05CAA05C,4CAA4C,irCAAirC,iTAAiT,0CAA0C,mNAAmN,odAAod,4bAA4b,yXAAyX,kZAAkZ,+GAA+G,qFAAqF,8ZAA8Z,0eAA0e,gHAAgH,gDAAgD,6aAA6a,oGAAoG,k1FAAk1F,yrCAAyrC,waAAwa,6CAA6C,kIAAkI,+HAA+H,yuBAAyuB,KAAK,0hBAA0hB,2KAA2K,8NAA8N,4FAA4F,4CAA4C,k1FAAk1F,6hCAA6hC,2PAA2P,6CAA6C,kIAAkI,+HAA+H,szCAAszC,wVAAwV,gDAAgD,4CAA4C,k1FAAk1F;AAC3osB;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wF",
      "file": "53.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"落单的数\\\"><a href=\\\"#落单的数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 落单的数</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <p>给出 2*n + 1 个的数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <p>给出 <code>[1,2,2,1,3,4,3]</code>，返回 <code>4</code></p> <p>给出 <code>[7, 10001, 10002, 10003, 10001, 10002, 10003, 10004, 7, 10004, 91985345, 2, 2, 3, 4, 5, 5, 4, 3, 11, 91985345]</code>,返回<code>11</code></p> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <p>有很多解决方式，建议用<code>indexOf</code>来查找是否有值。</p> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">/**\\n * @param A: An integer array\\n * @return: An integer\\n */</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <ol><li>转对象，如果第二次出现，删除该值，最后只剩一个值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> index <span class=\\\"token keyword\\\">of</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 判断出现次数</span>\\n            <span class=\\\"token comment\\\">// 第二次出现 </span>\\n            <span class=\\\"token keyword\\\">let</span> test <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">delete</span> res<span class=\\\"token punctuation\\\">[</span>obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 删除数组元素 变为undefined</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 第一次出现</span>\\n            res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组元素添加进去</span>\\n            obj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> res<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 保存下标 用于等下删除第二次出现的元素</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 转成字符串 最终只有一个值输出</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br></div></div><ol start=\\\"2\\\"><li>查找该值的前后是否有该值，如果没有，即找到落单的值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> v <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token comment\\\">// 如果b数组中没有v(没有push过 代表前面没有v)并且A数组在后面也没有该值(也就是后面也没有v)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> v <span class=\\\"token comment\\\">// 前面没有v 后面也没有v 即是唯一的值</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        b<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 添加v</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br></div></div><ol start=\\\"3\\\"><li>转成本地变量操作，将该值删除，再查找是否有该值，如果没有即找到该值</li></ol> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">singleNumber</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//  转成本地变量</span>\\n        s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 将该值删除</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 被删过一次 再查找是否还有这个值</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">A</span><span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// 如果没有的话 即找到该值</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">singleNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10001</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10002</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10003</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10004</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">91985345</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./落单的数.md?vue&type=template&id=fb99694e&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"f04032ee\"\n  \n)\n\ncomponent.options.__file = \"落单的数.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    },
    "54.server-bundle.js": {
      "version": 3,
      "sources": [
        "webpack:///./docs/algorithm/template.md?6452",
        "webpack:///./docs/algorithm/template.md"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB;AAChI;;;;;;;;;ACDkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+F",
      "file": "54.server-bundle.js",
      "sourcesContent": [
        "var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"标题\\\"><a href=\\\"#标题\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 标题</h2> <h3 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h3> <h3 id=\\\"描述：\\\"><a href=\\\"#描述：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述：</h3> <h3 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h3> <h3 id=\\\"思路分析：\\\"><a href=\\\"#思路分析：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 思路分析：</h3> <h3 id=\\\"代码模板：\\\"><a href=\\\"#代码模板：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码模板：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br></div></div><h3 id=\\\"想一想再看答案\\\"><a href=\\\"#想一想再看答案\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-2\\\"><a href=\\\"#想一想再看答案-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"想一想再看答案-3\\\"><a href=\\\"#想一想再看答案-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 想一想再看答案</h3> <h3 id=\\\"代码：\\\"><a href=\\\"#代码：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码：</h3> <div class=\\\"language-js line-numbers-mode\\\"><pre class=\\\"language-js\\\"><code>\\n\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br></div></div><h3 id=\\\"鼓励我一下：\\\"><a href=\\\"#鼓励我一下：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 鼓励我一下：</h3> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"觉得还不错的话，给我的点个\"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"star\"),_c('OutboundLink')],2),_vm._ssrNode(\"吧\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }",
        "import { render, staticRenderFns } from \"./template.md?vue&type=template&id=1fa50996&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../usr/local/lib/node_modules/vuepress/node_modules/_vue-loader@15.4.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"d28fd134\"\n  \n)\n\ncomponent.options.__file = \"template.md\"\nexport default component.exports"
      ],
      "sourceRoot": ""
    }
  }
}